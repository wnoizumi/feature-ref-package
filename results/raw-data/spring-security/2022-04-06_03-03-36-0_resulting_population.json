{
  "executionId" : "6bbec1fb-e1ed-4c05-9025-ff2b7db5fec3",
  "computingTime" : 11672,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2359813084112146,
    "meanNumConcerns" : 1.6459833795013852,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "8f65e05e-e895-421a-baa0-059baefade1f",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.5531773980294642,
      "MetricsIntensity" : 0.05345318862122456,
      "Density" : 1.000361010830325
    },
    "euclideanDistance" : 3.3636739435343834,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.647123893805309,
      "LackOfCohesion" : 0.5531773980294642,
      "MetricsIntensity" : 0.05345318862122456,
      "Density" : 3.231486880466472,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "5d6c27f9-585e-44c7-a78d-ae215000f6c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5515935586462627,
      "MetricsIntensity" : 0.05353345312429014,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 6.1890454297731745,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454293628808867,
      "LackOfCohesion" : 0.5515935586462627,
      "MetricsIntensity" : 0.053533453124290135,
      "Density" : 3.2324766355140193,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "83bbcc0f-07a7-4da8-ad80-c2a35b50db79",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535468744291869,
      "MetricsIntensity" : 0.0533033679267596,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 10.11513480494697,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.64569536423841,
      "LackOfCohesion" : 0.5535468744291869,
      "MetricsIntensity" : 0.0533033679267596,
      "Density" : 3.2253931275480507,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "12e68a2c-a192-4120-a06b-b4c3dee9d3b2",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5548052887356051,
      "MetricsIntensity" : 0.0530883659060355,
      "Density" : 0.9992779783393502
    },
    "euclideanDistance" : 10.11516694787369,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6429752066115701,
      "LackOfCohesion" : 0.5548052887356051,
      "MetricsIntensity" : 0.05308836590603551,
      "Density" : 3.220477021524142,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "9c5efc9a-4b30-4b23-a1e2-de5920e0ec70",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545672783917595,
      "MetricsIntensity" : 0.05315319761345466,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 10.115189907248718,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644787644787645,
      "LackOfCohesion" : 0.5545672783917595,
      "MetricsIntensity" : 0.05315319761345466,
      "Density" : 3.2216404886561967,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "61f07b15-05ae-4579-879f-3ded4c96cb18",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.552853890179476,
      "MetricsIntensity" : 0.0533650484429601,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 13.088491796090004,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644198895027624,
      "LackOfCohesion" : 0.552853890179476,
      "MetricsIntensity" : 0.053365048442960104,
      "Density" : 3.225072886297376,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "c226267c-bb29-4321-ac33-cc4e0adcf145",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5527885278838979,
      "MetricsIntensity" : 0.053357628711713186,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 14.082145997137042,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6430939226519337,
      "LackOfCohesion" : 0.5527885278838979,
      "MetricsIntensity" : 0.053357628711713186,
      "Density" : 3.224489795918368,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "2c49546a-ed42-4692-b0c8-87315621d884",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5534034117252594,
      "MetricsIntensity" : 0.05333303838480947,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 14.082281924881485,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644198895027624,
      "LackOfCohesion" : 0.5534034117252594,
      "MetricsIntensity" : 0.05333303838480947,
      "Density" : 3.2255244755244754,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "ddd80c3b-c2d0-4cee-ae0c-682a7ca629a5",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5551242153584653,
      "MetricsIntensity" : 0.05313723869827457,
      "Density" : 1.0001805054151625
    },
    "euclideanDistance" : 14.082593578815281,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6444321940463067,
      "LackOfCohesion" : 0.5551242153584653,
      "MetricsIntensity" : 0.053137238698274566,
      "Density" : 3.2233856893542763,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "0c1771cc-eb8a-40b5-8a41-2cf729a2f80f",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5543837971230522,
      "MetricsIntensity" : 0.05329511609750749,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 15.076779146175241,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436464088397793,
      "LackOfCohesion" : 0.5543837971230522,
      "MetricsIntensity" : 0.05329511609750749,
      "Density" : 3.226371061843641,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "f40c0109-dec3-4e1d-8ae2-e299a34004e6",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5543799454430861,
      "MetricsIntensity" : 0.05331325556359049,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 15.076941841937133,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443953616786307,
      "LackOfCohesion" : 0.5543799454430861,
      "MetricsIntensity" : 0.053313255563590484,
      "Density" : 3.2272727272727275,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "c0a1a7a9-307e-4ee8-9ef0-2da309911e17",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5538355219448124,
      "MetricsIntensity" : 0.05325747885414672,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 17.067777189629073,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436464088397793,
      "LackOfCohesion" : 0.5538355219448124,
      "MetricsIntensity" : 0.05325747885414673,
      "Density" : 3.2231934731934717,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "70b17d1a-9698-4ada-b94e-3bf5c9b5b8fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5527263125648735,
      "MetricsIntensity" : 0.053420999859551406,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 19.060526554778754,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423438363736877,
      "LackOfCohesion" : 0.5527263125648735,
      "MetricsIntensity" : 0.05342099985955141,
      "Density" : 3.224620770128355,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "68176d97-3924-450f-bf9c-c925dfa2b5de",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5543142537192866,
      "MetricsIntensity" : 0.05255067492262537,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 20.05762680218923,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6418322295805738,
      "LackOfCohesion" : 0.5543142537192866,
      "MetricsIntensity" : 0.05255067492262537,
      "Density" : 3.221445221445221,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "acac86f9-3b3c-4888-b470-cefa55020221",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5531591005566288,
      "MetricsIntensity" : 0.05337129433820909,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 21.054694073219785,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641988950276243,
      "LackOfCohesion" : 0.5531591005566288,
      "MetricsIntensity" : 0.05337129433820909,
      "Density" : 3.215160349854228,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "4bfeda48-a212-4065-9c28-28ad2f1fa042",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5551337484708518,
      "MetricsIntensity" : 0.05256992185044325,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 22.05242172973216,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641832229580574,
      "LackOfCohesion" : 0.5551337484708518,
      "MetricsIntensity" : 0.052569921850443256,
      "Density" : 3.221445221445221,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "e4d76f65-0cb9-444f-affb-4b905f3f6cd6",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5553680594824325,
      "MetricsIntensity" : 0.05328405754699207,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 22.052485485662277,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423841059602653,
      "LackOfCohesion" : 0.5553680594824325,
      "MetricsIntensity" : 0.05328405754699208,
      "Density" : 3.222481071636575,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "14ef8203-044a-40cc-9649-9b4cbd3e9f9c",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5532378063111255,
      "MetricsIntensity" : 0.05261835544795395,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 23.049936407684825,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403314917127068,
      "LackOfCohesion" : 0.5532378063111255,
      "MetricsIntensity" : 0.05261835544795395,
      "Density" : 3.221249270286048,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "6d7a1551-de31-4eba-a8f6-14b3821e78f6",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5550310074390397,
      "MetricsIntensity" : 0.053230955849954,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 23.050237435462897,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642581356867071,
      "LackOfCohesion" : 0.5550310074390397,
      "MetricsIntensity" : 0.053230955849954,
      "Density" : 3.2230634828188705,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "6ac2d434-b35b-4477-b387-68211e4e1c6c",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5536628808369196,
      "MetricsIntensity" : 0.052631063768716395,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 24.047906189732302,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408839779005522,
      "LackOfCohesion" : 0.5536628808369196,
      "MetricsIntensity" : 0.0526310637687164,
      "Density" : 3.2211201866977834,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "7cef61b1-e5d9-4b95-967a-98c3b4b137fc",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5547426253331579,
      "MetricsIntensity" : 0.05246482332027498,
      "Density" : 0.9947653429602888
    },
    "euclideanDistance" : 25.045958756366314,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6396247240618098,
      "LackOfCohesion" : 0.5547426253331579,
      "MetricsIntensity" : 0.05246482332027498,
      "Density" : 3.211538461538462,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "a66bd484-d41c-4190-90cf-95876b8c7c39",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5550640018302365,
      "MetricsIntensity" : 0.053271619527879184,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 26.044358832866518,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412803532008828,
      "LackOfCohesion" : 0.5550640018302365,
      "MetricsIntensity" : 0.053271619527879184,
      "Density" : 3.2233236151603495,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "cb7a878b-17f3-4f1d-8647-d65788260744",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5530978671893131,
      "MetricsIntensity" : 0.053304971664965485,
      "Density" : 0.9933212996389892
    },
    "euclideanDistance" : 27.042412666720455,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5530978671893131,
      "MetricsIntensity" : 0.053304971664965485,
      "Density" : 3.2106184364060684,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "b5a4fae8-cba0-406c-bdb4-9866366cf133",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5545895991079925,
      "MetricsIntensity" : 0.05262398564375281,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 28.041186247967982,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428966279712554,
      "LackOfCohesion" : 0.5545895991079925,
      "MetricsIntensity" : 0.05262398564375282,
      "Density" : 3.2237762237762237,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "951bb468-6f1b-4da4-b228-e7b98ff0678b",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5558250177937344,
      "MetricsIntensity" : 0.052493708955797615,
      "Density" : 0.9936823104693141
    },
    "euclideanDistance" : 30.038271516170123,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6385209713024291,
      "LackOfCohesion" : 0.5558250177937344,
      "MetricsIntensity" : 0.052493708955797615,
      "Density" : 3.209912536443149,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "9f835e83-8b10-4c31-ba5a-5303d9497482",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5546526761196953,
      "MetricsIntensity" : 0.05264180701593996,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 31.037139318735427,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412382531785514,
      "LackOfCohesion" : 0.5546526761196953,
      "MetricsIntensity" : 0.05264180701593997,
      "Density" : 3.224037339556592,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "468ec099-e440-471c-9bb5-e305dde746cf",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5552129606214061,
      "MetricsIntensity" : 0.05263950612435981,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 31.03721087949494,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428966279712554,
      "LackOfCohesion" : 0.5552129606214061,
      "MetricsIntensity" : 0.05263950612435982,
      "Density" : 3.223193473193472,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "b3af9edb-f55f-4604-a0ed-bc70b1ad83d0",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5542784944154329,
      "MetricsIntensity" : 0.05339806740469071,
      "Density" : 0.9945848375451264
    },
    "euclideanDistance" : 34.03375653845223,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088497,
      "LackOfCohesion" : 0.5542784944154329,
      "MetricsIntensity" : 0.05339806740469072,
      "Density" : 3.2147024504084003,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "d256b620-d33e-4f20-a225-cc5c507c2124",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.554240399460835,
      "MetricsIntensity" : 0.053403362920977075,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 37.031066303930324,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399336283185841,
      "LackOfCohesion" : 0.554240399460835,
      "MetricsIntensity" : 0.05340336292097707,
      "Density" : 3.222287047841307,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "c646bc6b-a083-42c3-9d12-f08b177a5481",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5551942152099805,
      "MetricsIntensity" : 0.052645013381641466,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 38.030210901218524,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375690607734807,
      "LackOfCohesion" : 0.5551942152099805,
      "MetricsIntensity" : 0.052645013381641466,
      "Density" : 3.21891418563923,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "e639fe67-f372-4820-8700-05641429b455",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5553674599905655,
      "MetricsIntensity" : 0.053330646476321145,
      "Density" : 0.9924187725631769
    },
    "euclideanDistance" : 41.02791882126149,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5553674599905655,
      "MetricsIntensity" : 0.05333064647632115,
      "Density" : 3.211448598130841,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.jackson2.UnmodifiableListMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.ldap.DefaultLdapUsernameToDnMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "563fd0b8-ead6-437b-8496-8b01cc82d6fa",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5549071438045312,
      "MetricsIntensity" : 0.0533362969185763,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 42.027319349548684,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638121546961326,
      "LackOfCohesion" : 0.5549071438045312,
      "MetricsIntensity" : 0.0533362969185763,
      "Density" : 3.212244897959185,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.server.header.CompositeServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.web.authentication.logout.LogoutSuccessEventPublishingLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.authorization.method.MethodInvocationResult'"
      } ]
    } ]
  }, {
    "solutionId" : "690618bc-0374-4b88-a3c9-aec057539b7a",
    "objectives" : {
      "NumberOfConcerns" : 0.997307303938068,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5553410587740903,
      "MetricsIntensity" : 0.05261697141038624,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 44.02609214078453,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637016574585635,
      "LackOfCohesion" : 0.5553410587740903,
      "MetricsIntensity" : 0.05261697141038624,
      "Density" : 3.219497956800933,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.savedrequest.NoOpServerRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.domain.GrantedAuthoritySid'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.client.PasswordOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration.Step'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.PreAuthorizeExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='lock.GlobalLockPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.csrf.CsrfException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.servletapi.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "387e7c52-4fbb-4279-b70a-5c0126753c98",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5522021672982005,
      "MetricsIntensity" : 0.05282724349776211,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 57.0200123020979,
    "generation" : 0,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633795013850415,
      "LackOfCohesion" : 0.5522021672982005,
      "MetricsIntensity" : 0.05282724349776212,
      "Density" : 3.217873831775701,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.MethodSecurityMetadataSourcePointcut'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.CacheSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.web.jackson2.CookieMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.web.jackson2.CookieMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.Jwt'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.Jwt'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.jackson2.SimpleGrantedAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.jackson2.SimpleGrantedAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.ldap.LdapEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.ldap.LdapEncoder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.ldap.LdapEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.saml2.provider.service.authentication.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.cas.ServiceProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.core.authority.mapping.NullAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.core.authority.mapping.NullAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.core.authority.mapping.NullAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.oauth2.core.AbstractOAuth2Token'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.oauth2.core.AbstractOAuth2Token'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.oauth2.core.AbstractOAuth2Token'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.oauth2.core.AbstractOAuth2Token'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.util.matcher.OrMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.oauth2.core.oidc.OidcUserInfo.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.oauth2.core.oidc.OidcUserInfo.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.authorization.method.Jsr250AuthorizationManager.Jsr250AuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.rsocket.metadata.BasicAuthenticationDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2AccessTokenResponseHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.cas.web.authentication.DefaultServiceAuthenticationDetails'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.oauth2.client.jackson2.UnmodifiableMapDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.messaging.handler.invocation.reactive.CurrentSecurityContextArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.config.http.WellKnownChangePasswordBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.config.http.WellKnownChangePasswordBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.config.http.WellKnownChangePasswordBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.config.http.WellKnownChangePasswordBeanDefinitionParser'"
      } ]
    } ]
  } ]
}