{
  "executionId" : "a3d4322c-72c7-4780-8a86-24ce5b88ffe5",
  "computingTime" : 773911,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2248831775700944,
    "meanNumConcerns" : 1.654293628808864,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "fac584bb-5930-4d9e-a8e7-4b45357b0172",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523300145973074,
      "MetricsIntensity" : 0.05327994433249578,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 8.142934570473711,
    "generation" : 13,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480948,
      "LackOfCohesion" : 0.5523300145973074,
      "MetricsIntensity" : 0.05327994433249577,
      "Density" : 3.209545983701979
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "70d6864e-e83d-422b-9c27-cedd0f27901e",
    "objectives" : {
      "NumberOfConcerns" : 1.0010046885465507,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523300145973075,
      "MetricsIntensity" : 0.05327994433249576,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 8.142934570473711,
    "generation" : 16,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6504693539480948,
      "LackOfCohesion" : 0.5523300145973075,
      "MetricsIntensity" : 0.053279944332495756,
      "Density" : 3.209545983701979
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a7146af1-5a2d-4769-b654-5bc4e958cddf",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5523569094132046,
      "MetricsIntensity" : 0.05326299928287099,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 8.14295524612116,
    "generation" : 5,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.651021535063502,
      "LackOfCohesion" : 0.5523569094132046,
      "MetricsIntensity" : 0.053262999282870996,
      "Density" : 3.2089639115250277
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e26e2cbc-ab2b-4f0b-9627-572443b70ca0",
    "objectives" : {
      "NumberOfConcerns" : 1.0020093770931011,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 8.143068317977795,
    "generation" : 14,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.652125897294313,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.05331026705665076,
      "Density" : 3.2083818393480796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "653b5bbb-6b51-4d61-bbff-4ce895537afd",
    "objectives" : {
      "NumberOfConcerns" : 1.0020093770931011,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.053310267056650755,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 8.143068317977795,
    "generation" : 15,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6521258972943127,
      "LackOfCohesion" : 0.5531315182466371,
      "MetricsIntensity" : 0.05331026705665076,
      "Density" : 3.2083818393480796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2cbc79c5-ca24-4bd4-8e4d-cf8aa23b07e3",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5527751068371305,
      "MetricsIntensity" : 0.05325499389116313,
      "Density" : 0.9990943669625068
    },
    "euclideanDistance" : 8.143091411307964,
    "generation" : 4,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6506622516556295,
      "LackOfCohesion" : 0.5527751068371305,
      "MetricsIntensity" : 0.05325499389116314,
      "Density" : 3.208842350203607
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fc8b9f93-3b2d-4d64-ba7f-3cdad13799c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0016744809109177,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5527751068371304,
      "MetricsIntensity" : 0.05325499389116315,
      "Density" : 0.9990943669625068
    },
    "euclideanDistance" : 8.143091411307964,
    "generation" : 14,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6506622516556293,
      "LackOfCohesion" : 0.5527751068371304,
      "MetricsIntensity" : 0.053254993891163144,
      "Density" : 3.2088423502036068
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d895739-6159-4e31-aed6-6c701a1c323e",
    "objectives" : {
      "NumberOfConcerns" : 1.0020093770931011,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5528019840861983,
      "MetricsIntensity" : 0.05323805990950022,
      "Density" : 0.9989132403550082
    },
    "euclideanDistance" : 8.143112106447486,
    "generation" : 3,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6512141280353199,
      "LackOfCohesion" : 0.5528019840861983,
      "MetricsIntensity" : 0.053238059909500236,
      "Density" : 3.2082606166375793
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "7851252d-6183-445b-9f4d-f1796a810218",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5532253688688991,
      "MetricsIntensity" : 0.05331389221866899,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 10.1146583216045,
    "generation" : 15,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650276243093922,
      "LackOfCohesion" : 0.5532253688688991,
      "MetricsIntensity" : 0.05331389221866899,
      "Density" : 3.2102504368083866
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "269c25b6-2096-4861-8fb8-303fbbb5fffe",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5532522812746041,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 10.114674954343176,
    "generation" : 15,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6508287292817676,
      "LackOfCohesion" : 0.5532522812746041,
      "MetricsIntensity" : 0.05329693608660496,
      "Density" : 3.209668025626091
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0cea4d5e-9746-432a-9cfe-3a1e339aac6f",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5540273967194386,
      "MetricsIntensity" : 0.05334423477455984,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 10.114766043359962,
    "generation" : 8,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6519337016574582,
      "LackOfCohesion" : 0.5540273967194386,
      "MetricsIntensity" : 0.05334423477455984,
      "Density" : 3.2090856144437994
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2eded643-c729-46d2-93ac-78965dd6d903",
    "objectives" : {
      "NumberOfConcerns" : 1.001339584728734,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5540273967194385,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 10.114766043359962,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6519337016574585,
      "LackOfCohesion" : 0.5540273967194385,
      "MetricsIntensity" : 0.05334423477455984,
      "Density" : 3.209085614443798
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f020cfab-4dcd-4aa6-b185-cf95e18e97c7",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5525691406047573,
      "MetricsIntensity" : 0.053326384009166956,
      "Density" : 0.9992754935700054
    },
    "euclideanDistance" : 12.095787196531703,
    "generation" : 11,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6508287292817678,
      "LackOfCohesion" : 0.5525691406047573,
      "MetricsIntensity" : 0.053326384009166956,
      "Density" : 3.21316249271986
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "842121e0-ab0d-4142-8013-38cdc5f3ae4d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5536722840640159,
      "MetricsIntensity" : 0.05335131625403754,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 13.088306679701828,
    "generation" : 5,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5536722840640159,
      "MetricsIntensity" : 0.05335131625403754,
      "Density" : 3.209668025626091
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "c352da91-caf4-42c3-8db5-2b8bbe01201d",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.553699196469721,
      "MetricsIntensity" : 0.05333436012197351,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 13.088319502606037,
    "generation" : 16,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486187845303868,
      "LackOfCohesion" : 0.553699196469721,
      "MetricsIntensity" : 0.05333436012197351,
      "Density" : 3.2090856144437976
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ce7cc011-b99a-443b-90f7-d13958661326",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5544743119145551,
      "MetricsIntensity" : 0.05338165880992839,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 13.088389857032704,
    "generation" : 11,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060776,
      "LackOfCohesion" : 0.5544743119145551,
      "MetricsIntensity" : 0.053381658809928394,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "6fe3e712-9d6b-4fcf-b8e1-8aa8db1b5a23",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5541167899134944,
      "MetricsIntensity" : 0.0533263028569122,
      "Density" : 0.9985509871400109
    },
    "euclideanDistance" : 13.088404161896507,
    "generation" : 11,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482606294864712,
      "LackOfCohesion" : 0.5541167899134944,
      "MetricsIntensity" : 0.05332630285691221,
      "Density" : 3.2089639115250295
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "dbe56028-e43c-427c-a03e-c6c1f07f9776",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5541436847293917,
      "MetricsIntensity" : 0.053309357807287405,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 13.088416997077033,
    "generation" : 12,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488128106018773,
      "LackOfCohesion" : 0.5541436847293917,
      "MetricsIntensity" : 0.053309357807287405,
      "Density" : 3.20838183934808
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "be338cf3-e89d-4176-a18f-4c8ea9ec58e6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.554143684729392,
      "MetricsIntensity" : 0.0533093578072874,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 13.088416997077033,
    "generation" : 5,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488128106018771,
      "LackOfCohesion" : 0.554143684729392,
      "MetricsIntensity" : 0.0533093578072874,
      "Density" : 3.2083818393480796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a6d74d64-912e-443d-a779-e01d1311437b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5525059444084676,
      "MetricsIntensity" : 0.05331389221866899,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 14.082013108753571,
    "generation" : 12,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649171270718232,
      "LackOfCohesion" : 0.5525059444084676,
      "MetricsIntensity" : 0.05331389221866898,
      "Density" : 3.2085032032615026
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "30f91df8-d935-4794-9b0a-87980b9680b0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5525328568141726,
      "MetricsIntensity" : 0.05329693608660492,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 14.08202504520631,
    "generation" : 18,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060774,
      "LackOfCohesion" : 0.5525328568141726,
      "MetricsIntensity" : 0.05329693608660492,
      "Density" : 3.2079207920792085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "455f4480-dd70-47c5-b645-61d692d5b6be",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5533079722590069,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 14.082090407252462,
    "generation" : 4,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6508287292817674,
      "LackOfCohesion" : 0.5533079722590069,
      "MetricsIntensity" : 0.053344234774559844,
      "Density" : 3.2073383808969127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "13a5b2bc-4486-4bb1-a64f-22a487de3612",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5529512125714465,
      "MetricsIntensity" : 0.05328890328169748,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 14.082103727914797,
    "generation" : 9,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6493649917172832,
      "LackOfCohesion" : 0.5529512125714465,
      "MetricsIntensity" : 0.05328890328169749,
      "Density" : 3.2077997671711294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ddf776c8-21fa-4b5d-9513-6530706ae056",
    "objectives" : {
      "NumberOfConcerns" : 1.0003348961821836,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5529512125714465,
      "MetricsIntensity" : 0.05328890328169748,
      "Density" : 0.9981887339250136
    },
    "euclideanDistance" : 14.082103727914797,
    "generation" : 12,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649364991717283,
      "LackOfCohesion" : 0.5529512125714465,
      "MetricsIntensity" : 0.05328890328169748,
      "Density" : 3.207799767171129
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2001546c-e7ec-4af5-b30b-b0cef0d88632",
    "objectives" : {
      "NumberOfConcerns" : 1.000669792364367,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5529781073873439,
      "MetricsIntensity" : 0.05327195823207271,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 14.082115675792389,
    "generation" : 18,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6499171728326887,
      "LackOfCohesion" : 0.5529781073873439,
      "MetricsIntensity" : 0.05327195823207271,
      "Density" : 3.2072176949941795
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5d4a3733-4fe2-40fe-9ab6-5e824790bfed",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.554569102749049,
      "MetricsIntensity" : 0.05338533306678651,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 15.076561557967425,
    "generation" : 20,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.554569102749049,
      "MetricsIntensity" : 0.053385333066786514,
      "Density" : 3.21037296037296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "025fc537-2986-4fef-ad09-10f2a16dde87",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5553716554869251,
      "MetricsIntensity" : 0.053415695480371,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 15.076633797412049,
    "generation" : 19,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6495301271420675,
      "LackOfCohesion" : 0.5553716554869251,
      "MetricsIntensity" : 0.053415695480371,
      "Density" : 3.2092074592074593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1bb0ea1-f977-4f31-8ce1-5f122d783f8a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5534019997822079,
      "MetricsIntensity" : 0.053347884539248214,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 16.071777321988566,
    "generation" : 9,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444994,
      "LackOfCohesion" : 0.5534019997822079,
      "MetricsIntensity" : 0.05334788453924822,
      "Density" : 3.2092074592074593
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc20e632-3b7d-4481-9673-89ed5e41762a",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5534289298007439,
      "MetricsIntensity" : 0.053330917310239104,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 16.071787772811412,
    "generation" : 14,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6495301271420673,
      "LackOfCohesion" : 0.5534289298007439,
      "MetricsIntensity" : 0.05333091731023911,
      "Density" : 3.208624708624709
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f99d6bdb-ecb3-48e8-aecb-90274873535f",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5542045525200838,
      "MetricsIntensity" : 0.05337824695283273,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 16.07184507984055,
    "generation" : 6,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650635710337203,
      "LackOfCohesion" : 0.5542045525200838,
      "MetricsIntensity" : 0.053378246952832734,
      "Density" : 3.2080419580419584
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0751a42f-089d-497d-a2be-14de9daf036e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5539124450161478,
      "MetricsIntensity" : 0.053397833032540025,
      "Density" : 0.9987321137475095
    },
    "euclideanDistance" : 17.067643621349042,
    "generation" : 15,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469327,
      "LackOfCohesion" : 0.5539124450161478,
      "MetricsIntensity" : 0.05339783303254003,
      "Density" : 3.2132867132867133
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "dddfd9bf-476a-439d-ac22-7490283cc118",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5527453420493067,
      "MetricsIntensity" : 0.05336038450500173,
      "Density" : 0.9983698605325122
    },
    "euclideanDistance" : 18.063880479733708,
    "generation" : 19,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5527453420493067,
      "MetricsIntensity" : 0.05336038450500173,
      "Density" : 3.212121212121213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "faf94e3a-ad93-46a4-bddd-29bf423c3ea0",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5538492074610909,
      "MetricsIntensity" : 0.0533853330667865,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 19.060416823112092,
    "generation" : 14,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5538492074610909,
      "MetricsIntensity" : 0.05338533306678651,
      "Density" : 3.2086247086247077
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5485a025-8160-4e1b-bf13-651c593e825b",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5538761374796272,
      "MetricsIntensity" : 0.05336836583777738,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 19.0604256140482,
    "generation" : 15,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5538761374796272,
      "MetricsIntensity" : 0.05336836583777739,
      "Density" : 3.2080419580419575
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ae2481db-dd8b-4f1c-aebb-b5c814604535",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.554651760198967,
      "MetricsIntensity" : 0.053415695480371,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 19.06047390840976,
    "generation" : 12,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469323,
      "LackOfCohesion" : 0.554651760198967,
      "MetricsIntensity" : 0.053415695480371006,
      "Density" : 3.2074592074592068
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "acefac43-7bc9-49cc-8e63-efb53d5d88f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5546517601989667,
      "MetricsIntensity" : 0.053415695480371006,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 19.06047390840976,
    "generation" : 19,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648424543946933,
      "LackOfCohesion" : 0.5546517601989667,
      "MetricsIntensity" : 0.05341569548037101,
      "Density" : 3.2074592074592063
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "bff13552-9ba2-425a-927b-c91a8f002747",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5536421410072083,
      "MetricsIntensity" : 0.05339442953324757,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 20.057485196172966,
    "generation" : 13,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6493362831858407,
      "LackOfCohesion" : 0.5536421410072083,
      "MetricsIntensity" : 0.05339442953324757,
      "Density" : 3.212827988338193
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "b727e13e-ad44-4f96-897c-4cf078d82b96",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5547467293171011,
      "MetricsIntensity" : 0.053419394433317724,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 21.054653397651222,
    "generation" : 11,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601766,
      "LackOfCohesion" : 0.5547467293171011,
      "MetricsIntensity" : 0.05341939443331773,
      "Density" : 3.2093294460641393
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e5d8f669-e8fb-4e7e-9723-1640a09d0162",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5547736769715368,
      "MetricsIntensity" : 0.05340241609282922,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 21.054661349954976,
    "generation" : 13,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053094,
      "LackOfCohesion" : 0.5547736769715368,
      "MetricsIntensity" : 0.05340241609282922,
      "Density" : 3.208746355685131
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fdcd3ee1-b008-4b67-87f6-9331b1be8719",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5555498076297891,
      "MetricsIntensity" : 0.053449776730604644,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 21.054705098456907,
    "generation" : 14,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955758,
      "LackOfCohesion" : 0.5555498076297891,
      "MetricsIntensity" : 0.05344977673060464,
      "Density" : 3.2081632653061223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "05254bf9-48a7-49a2-8bcd-b1d073aac8e7",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5555498076297892,
      "MetricsIntensity" : 0.053449776730604616,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 21.054705098456907,
    "generation" : 9,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6482300884955754,
      "LackOfCohesion" : 0.5555498076297892,
      "MetricsIntensity" : 0.05344977673060462,
      "Density" : 3.2081632653061227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "0d9f1cdd-3b67-45db-b295-6fd42a84ff70",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5540896415529407,
      "MetricsIntensity" : 0.05343190258503442,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 23.049949605665745,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053097,
      "LackOfCohesion" : 0.5540896415529407,
      "MetricsIntensity" : 0.05343190258503442,
      "Density" : 3.212244897959185
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "f8bc3719-d6de-4170-b4b0-ba2f800f4622",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5540896415529408,
      "MetricsIntensity" : 0.0534319025850344,
      "Density" : 0.9978264807100163
    },
    "euclideanDistance" : 23.049949605665745,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053099,
      "LackOfCohesion" : 0.5540896415529408,
      "MetricsIntensity" : 0.0534319025850344,
      "Density" : 3.2122448979591836
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "9ec374a1-fcb1-4f0e-a4ed-b95ba19d1d00",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5542912929891074,
      "MetricsIntensity" : 0.05334065355067186,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 23.050003238143518,
    "generation" : 22,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6480662983425411,
      "LackOfCohesion" : 0.5542912929891074,
      "MetricsIntensity" : 0.05334065355067185,
      "Density" : 3.2086247086247086
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "41e2a329-f32d-442b-befb-173e97d8f240",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5550933208396465,
      "MetricsIntensity" : 0.0533709634609484,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 23.050050503873212,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6497237569060776,
      "LackOfCohesion" : 0.5550933208396465,
      "MetricsIntensity" : 0.0533709634609484,
      "Density" : 3.2074592074592063
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "cf272710-bdab-43c7-a7ae-7d5c7f55455d",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5549879091205813,
      "MetricsIntensity" : 0.05346601678962902,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 25.045940157463747,
    "generation" : 14,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469286109573875,
      "LackOfCohesion" : 0.5549879091205813,
      "MetricsIntensity" : 0.05346601678962901,
      "Density" : 3.212952158693116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "28914466-b272-46de-ace7-2addc15caeba",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5559910695225694,
      "MetricsIntensity" : 0.05340499313181709,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 25.04603298046939,
    "generation" : 20,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5559910695225694,
      "MetricsIntensity" : 0.0534049931318171,
      "Density" : 3.2081632653061223
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "c825c273-65d9-4361-aa0c-4b444922ce5d",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5556357244635765,
      "MetricsIntensity" : 0.053412111912750096,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 28.041024498702974,
    "generation" : 5,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456605859590936,
      "LackOfCohesion" : 0.5556357244635765,
      "MetricsIntensity" : 0.0534121119127501,
      "Density" : 3.2087463556851312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d91d1037-f268-4095-a8d0-b7436ec1f257",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5556626544821125,
      "MetricsIntensity" : 0.05339514468374099,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 28.041030471405346,
    "generation" : 13,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566608,
      "LackOfCohesion" : 0.5556626544821125,
      "MetricsIntensity" : 0.05339514468374099,
      "Density" : 3.208163265306123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd186201-0881-4109-bbba-1ff02caafe6f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5564382772014526,
      "MetricsIntensity" : 0.053442441659355355,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 28.04106333562896,
    "generation" : 12,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5564382772014526,
      "MetricsIntensity" : 0.05344244165935536,
      "Density" : 3.207580174927114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ecb4f523-98f6-48e6-9ead-105af4ec7320",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5565344162717822,
      "MetricsIntensity" : 0.05344619081618106,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 30.03827559905942,
    "generation" : 10,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699115,
      "LackOfCohesion" : 0.5565344162717822,
      "MetricsIntensity" : 0.05344619081618106,
      "Density" : 3.2094515752625434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "59efe91f-bc87-4735-8129-3011a86ded0f",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5565613639262178,
      "MetricsIntensity" : 0.05342921247569259,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 30.038281170445952,
    "generation" : 6,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.5565613639262178,
      "MetricsIntensity" : 0.05342921247569259,
      "Density" : 3.2088681446907814
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fe82aee9-90ef-46ed-adf1-3682211ef6a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5573374945844702,
      "MetricsIntensity" : 0.05347654042509588,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 30.038311869511976,
    "generation" : 10,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053099,
      "LackOfCohesion" : 0.5573374945844702,
      "MetricsIntensity" : 0.05347654042509588,
      "Density" : 3.2082847141190203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "a018f2d7-222f-4139-aedb-5b5443727b80",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5573374945844703,
      "MetricsIntensity" : 0.05347654042509586,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 30.038311869511976,
    "generation" : 11,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6471238938053097,
      "LackOfCohesion" : 0.5573374945844703,
      "MetricsIntensity" : 0.05347654042509585,
      "Density" : 3.2082847141190207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "d82d8471-263c-48b2-b976-04b0c48ecb5b",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5531954789673614,
      "MetricsIntensity" : 0.053430222461625695,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 32.03590774498532,
    "generation" : 23,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6469613259668507,
      "LackOfCohesion" : 0.5531954789673614,
      "MetricsIntensity" : 0.053430222461625695,
      "Density" : 3.2037252619324805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "6749df6f-a1c8-4166-8cab-399b10e85382",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.555877328507622,
      "MetricsIntensity" : 0.053458698967897775,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 32.03591335223738,
    "generation" : 18,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.555877328507622,
      "MetricsIntensity" : 0.05345869896789778,
      "Density" : 3.212368728121353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "282b6888-cf74-4308-ae38-e3d3413b6a3c",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5558773285076221,
      "MetricsIntensity" : 0.05345869896789777,
      "Density" : 0.9972831008875204
    },
    "euclideanDistance" : 32.03591335223738,
    "generation" : 19,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460176991150444,
      "LackOfCohesion" : 0.5558773285076221,
      "MetricsIntensity" : 0.05345869896789777,
      "Density" : 3.212368728121353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "ed9b3405-afef-4130-850e-92c16cc21d4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5528656876207255,
      "MetricsIntensity" : 0.053357922342313166,
      "Density" : 0.9974642274950191
    },
    "euclideanDistance" : 32.0359188453152,
    "generation" : 7,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6460519050248483,
      "LackOfCohesion" : 0.5528656876207255,
      "MetricsIntensity" : 0.05335792234231316,
      "Density" : 3.203606748109366
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "58fcca00-c1ce-4dfc-b50c-58bbcc347387",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5533163628878341,
      "MetricsIntensity" : 0.053416993938948505,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 34.033755058728715,
    "generation" : 17,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456605859590936,
      "LackOfCohesion" : 0.5533163628878341,
      "MetricsIntensity" : 0.05341699393894851,
      "Density" : 3.2050087361677346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2e744aa9-2dd2-41a4-b733-8c0750e0a258",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5540919856071741,
      "MetricsIntensity" : 0.053464290914562874,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 34.033782075170116,
    "generation" : 9,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5540919856071741,
      "MetricsIntensity" : 0.05346429091456288,
      "Density" : 3.2044263249854392
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4db47cad-d954-4de9-96ca-50c28ddbc233",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5567767675608161,
      "MetricsIntensity" : 0.05349283073237631,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 34.03378750110502,
    "generation" : 7,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6458218040951857,
      "LackOfCohesion" : 0.5567767675608161,
      "MetricsIntensity" : 0.05349283073237631,
      "Density" : 3.2130764740221838
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "76cd2b7f-bd23-4553-909e-59092b3560fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.556776767560816,
      "MetricsIntensity" : 0.05349283073237632,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 34.03378750110502,
    "generation" : 20,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6458218040951857,
      "LackOfCohesion" : 0.556776767560816,
      "MetricsIntensity" : 0.05349283073237632,
      "Density" : 3.2130764740221833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "9cbddb19-51f4-440b-b7a2-e1f3f3a96565",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5526597051549328,
      "MetricsIntensity" : 0.05342949390470202,
      "Density" : 0.9976453541025176
    },
    "euclideanDistance" : 36.03190575798229,
    "generation" : 21,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566608,
      "LackOfCohesion" : 0.5526597051549328,
      "MetricsIntensity" : 0.053429493904702016,
      "Density" : 3.2079207920792085
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "6555f66c-882a-4218-90cf-11756f9e5b57",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.556105795518783,
      "MetricsIntensity" : 0.05344475532966748,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 36.03193299012957,
    "generation" : 12,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6476769911504425,
      "LackOfCohesion" : 0.556105795518783,
      "MetricsIntensity" : 0.053444755329667484,
      "Density" : 3.2094515752625434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.key, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.userDetailsService, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.TWO_WEEKS_S, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.DEFAULT_PARAMETER], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getUserDetailsService(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ddf5d590-c9a9-4269-8336-ca4ce77fdab6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5531051639702446,
      "MetricsIntensity" : 0.05340441301833676,
      "Density" : 0.9980076073175149
    },
    "euclideanDistance" : 36.03194113313095,
    "generation" : 22,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6464088397790047,
      "LackOfCohesion" : 0.5531051639702446,
      "MetricsIntensity" : 0.05340441301833677,
      "Density" : 3.207217694994179
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "b9a3cf46-a0d4-4885-97db-f8947b3d390a",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5537635705667172,
      "MetricsIntensity" : 0.053454442466486785,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 37.030986378372745,
    "generation" : 22,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688227,
      "LackOfCohesion" : 0.5537635705667172,
      "MetricsIntensity" : 0.053454442466486785,
      "Density" : 3.204426324985439
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "04978a5e-98f9-45b1-b8b8-926e792a8f9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.554539193286057,
      "MetricsIntensity" : 0.05350173944210118,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 37.0310111942174,
    "generation" : 12,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.554539193286057,
      "MetricsIntensity" : 0.05350173944210118,
      "Density" : 3.2038439138031456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "653c07b8-2d16-4554-b455-f71059c6bee5",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.554208307429503,
      "MetricsIntensity" : 0.05342934526320734,
      "Density" : 0.9969208476725231
    },
    "euclideanDistance" : 37.03102076063101,
    "generation" : 9,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436464088397795,
      "LackOfCohesion" : 0.554208307429503,
      "MetricsIntensity" : 0.05342934526320734,
      "Density" : 3.2037252619324796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8136c07d-7951-42af-892d-abfba01d9cb3",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5525964675998758,
      "MetricsIntensity" : 0.05341699393894851,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 38.030162624374256,
    "generation" : 16,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.5525964675998758,
      "MetricsIntensity" : 0.05341699393894851,
      "Density" : 3.2032615026208506
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "49f33e59-d133-49ad-ab2f-dc688a697684",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5530419677739548,
      "MetricsIntensity" : 0.0533919212278388,
      "Density" : 0.9965585944575258
    },
    "euclideanDistance" : 38.030196109156094,
    "generation" : 16,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447513812154697,
      "LackOfCohesion" : 0.5530419677739548,
      "MetricsIntensity" : 0.0533919212278388,
      "Density" : 3.20256111757858
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "62c1a921-8c6f-428e-a397-2575818ecf57",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5554371669991892,
      "MetricsIntensity" : 0.053535877040705296,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 39.02940858503923,
    "generation" : 14,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796458,
      "LackOfCohesion" : 0.5554371669991892,
      "MetricsIntensity" : 0.05353587704070529,
      "Density" : 3.2045454545454555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "aa7c635c-e99d-4caa-aa6c-01d805c2c508",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5534931690630498,
      "MetricsIntensity" : 0.05345107603951519,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 40.02864235631958,
    "generation" : 16,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796458,
      "LackOfCohesion" : 0.5534931690630498,
      "MetricsIntensity" : 0.05345107603951519,
      "Density" : 3.2039627039627043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4dc07487-731d-4eae-bfe9-d22480305e3c",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5542692997213023,
      "MetricsIntensity" : 0.053498403988918454,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 40.02866531887154,
    "generation" : 15,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6454646017699113,
      "LackOfCohesion" : 0.5542692997213023,
      "MetricsIntensity" : 0.05349840398891845,
      "Density" : 3.2033799533799536
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8d40a2d4-44af-4c9b-919f-aa70ccbc8b41",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5540039485767763,
      "MetricsIntensity" : 0.053501057243018714,
      "Density" : 0.9971019742800218
    },
    "euclideanDistance" : 41.027973871185075,
    "generation" : 22,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6438053097345144,
      "LackOfCohesion" : 0.5540039485767763,
      "MetricsIntensity" : 0.05350105724301871,
      "Density" : 3.208041958041957
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.gradle.sagan.SaganCreateReleaseTask.gitHubAccessToken, org.springframework.gradle.sagan.SaganCreateReleaseTask.projectName, org.springframework.gradle.sagan.SaganCreateReleaseTask.version], extractedMethods=[org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName(), org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken(), org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String), org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "3d24df4d-3fca-48df-8336-8f3b99f2bdea",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5574262127712051,
      "MetricsIntensity" : 0.05353336503147644,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 41.0279938700518,
    "generation" : 12,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447149972329838,
      "LackOfCohesion" : 0.5574262127712051,
      "MetricsIntensity" : 0.05353336503147644,
      "Density" : 3.2101576182136604
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieDomain, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.parameter, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cookieName, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authenticationDetailsSource, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logger, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds, org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.authoritiesMapper], extractedMethods=[org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[]), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource(), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String), org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc14ce29-a4a2-44e6-8b3d-35d6fb998df2",
    "objectives" : {
      "NumberOfConcerns" : 0.9959812458137978,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5528360812988894,
      "MetricsIntensity" : 0.053463584191231886,
      "Density" : 0.9967397210650244
    },
    "euclideanDistance" : 42.02730011315481,
    "generation" : 21,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6449115044247784,
      "LackOfCohesion" : 0.5528360812988894,
      "MetricsIntensity" : 0.053463584191231886,
      "Density" : 3.2068764568764565
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "21ea3093-1aed-43ac-94e0-cbc34c36b64e",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5539406696087823,
      "MetricsIntensity" : 0.05348854909130203,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 43.02661597258895,
    "generation" : 17,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5539406696087823,
      "MetricsIntensity" : 0.05348854909130204,
      "Density" : 3.203379953379953
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "c3b7c59f-6c57-4308-82d5-c8751eaaa035",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5539406696087824,
      "MetricsIntensity" : 0.053488549091302004,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 43.02661597258895,
    "generation" : 16,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5539406696087824,
      "MetricsIntensity" : 0.053488549091302,
      "Density" : 3.203379953379954
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef2d3104-b6b3-47a3-b4b3-c520fcdfd80c",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5547168002670347,
      "MetricsIntensity" : 0.05353587704070527,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 43.02663732319835,
    "generation" : 15,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432522123893802,
      "LackOfCohesion" : 0.5547168002670347,
      "MetricsIntensity" : 0.05353587704070527,
      "Density" : 3.2027972027972043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "87653211-78a6-4cdf-b3f4-6c65df543d4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.55438558162721,
      "MetricsIntensity" : 0.05346341314206177,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 43.026645539327795,
    "generation" : 19,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.55438558162721,
      "MetricsIntensity" : 0.05346341314206177,
      "Density" : 3.2026790914385552
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fd095c9a-36c1-493f-ab49-7e85a8bafc99",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5543855816272099,
      "MetricsIntensity" : 0.05346341314206179,
      "Density" : 0.9960152146350298
    },
    "euclideanDistance" : 43.026645539327795,
    "generation" : 18,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.5543855816272099,
      "MetricsIntensity" : 0.053463413142061794,
      "Density" : 3.202679091438556
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.disabled, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.build(), org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "8abcafcc-bec9-49c1-81ec-c9e62ae5fabf",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5537335273984737,
      "MetricsIntensity" : 0.05349771915703633,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 44.02604792362275,
    "generation" : 18,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644714997232983,
      "LackOfCohesion" : 0.5537335273984737,
      "MetricsIntensity" : 0.053497719157036334,
      "Density" : 3.207580174927114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "6518d2db-a149-4efe-b2cd-8d2e075f9f32",
    "objectives" : {
      "NumberOfConcerns" : 0.9953114534494307,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5537335273984738,
      "MetricsIntensity" : 0.05349771915703631,
      "Density" : 0.9963774678500271
    },
    "euclideanDistance" : 44.02604792362275,
    "generation" : 17,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447149972329842,
      "LackOfCohesion" : 0.5537335273984738,
      "MetricsIntensity" : 0.0534977191570363,
      "Density" : 3.207580174927114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "17383f2a-e66c-4150-9dbc-2c86f7668e7f",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.554838839553917,
      "MetricsIntensity" : 0.053522700416805055,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 45.02542202849821,
    "generation" : 17,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774768,
      "LackOfCohesion" : 0.554838839553917,
      "MetricsIntensity" : 0.053522700416805055,
      "Density" : 3.204081632653062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "89db1aba-0d8c-4c30-a790-a85dc2fa498d",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5548388395539169,
      "MetricsIntensity" : 0.05352270041680508,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 45.02542202849821,
    "generation" : 17,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774772,
      "LackOfCohesion" : 0.5548388395539169,
      "MetricsIntensity" : 0.05352270041680508,
      "Density" : 3.2040816326530615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "b524d22c-4069-483f-a1f3-673859d88067",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5556154788167946,
      "MetricsIntensity" : 0.05357005938059196,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 45.02544244461882,
    "generation" : 5,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643054786939679,
      "LackOfCohesion" : 0.5556154788167946,
      "MetricsIntensity" : 0.053570059380591964,
      "Density" : 3.2034985422740525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9753a6e4-c186-4cc9-8b79-3272e3f69923",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5556154788167947,
      "MetricsIntensity" : 0.053570059380591936,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 45.02544244461882,
    "generation" : 10,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643054786939679,
      "LackOfCohesion" : 0.5556154788167947,
      "MetricsIntensity" : 0.05357005938059194,
      "Density" : 3.2034985422740525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b110a5a-fc35-4bc0-985d-749c2f199e1f",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5541813211948913,
      "MetricsIntensity" : 0.05353521676521357,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 47.024359327717676,
    "generation" : 22,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5541813211948913,
      "MetricsIntensity" : 0.05353521676521358,
      "Density" : 3.2069970845481044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "d0e3570b-82a5-43bd-89e3-39330a827a2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5541813211948913,
      "MetricsIntensity" : 0.05353521676521357,
      "Density" : 0.9961963412425285
    },
    "euclideanDistance" : 47.024359327717676,
    "generation" : 18,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6425013835085778,
      "LackOfCohesion" : 0.5541813211948913,
      "MetricsIntensity" : 0.05353521676521358,
      "Density" : 3.206997084548105
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "be50bcaa-27db-4d55-a477-de5e0d9f7031",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5551586073217016,
      "MetricsIntensity" : 0.05349103709354724,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 47.02440507224987,
    "generation" : 21,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.5551586073217016,
      "MetricsIntensity" : 0.05349103709354724,
      "Density" : 3.2027972027972025
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "2ea5e398-333d-432a-9f79-5df21682bced",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5551586073217015,
      "MetricsIntensity" : 0.053491037093547245,
      "Density" : 0.995471834812534
    },
    "euclideanDistance" : 47.02440507224987,
    "generation" : 17,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.5551586073217015,
      "MetricsIntensity" : 0.053491037093547245,
      "Density" : 3.2027972027972034
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "9e61f6c8-6304-4b6c-b60a-ee6215704fb8",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5550802379082432,
      "MetricsIntensity" : 0.05356942108678183,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 49.023354825013385,
    "generation" : 19,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423034330011077,
      "LackOfCohesion" : 0.5550802379082432,
      "MetricsIntensity" : 0.053569421086781845,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "af47108f-3ae8-4d87-a9cd-5ebd8e7c014d",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5550802379082433,
      "MetricsIntensity" : 0.053569421086781824,
      "Density" : 0.9958340880275313
    },
    "euclideanDistance" : 49.023354825013385,
    "generation" : 20,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423034330011077,
      "LackOfCohesion" : 0.5550802379082433,
      "MetricsIntensity" : 0.053569421086781824,
      "Density" : 3.2077012835472574
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "6b58e74d-00a2-4b46-9aca-8fccbd6b1976",
    "objectives" : {
      "NumberOfConcerns" : 0.9949765572672472,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5552808560177309,
      "MetricsIntensity" : 0.053477872422378545,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 49.02337991872092,
    "generation" : 17,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432522123893802,
      "LackOfCohesion" : 0.5552808560177309,
      "MetricsIntensity" : 0.05347787242237855,
      "Density" : 3.204081632653062
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ee99b3dd-2ee3-49fa-8b7a-1079fc7a238c",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5560569866759834,
      "MetricsIntensity" : 0.05352516768340966,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 49.02339868928845,
    "generation" : 6,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443584070796458,
      "LackOfCohesion" : 0.5560569866759834,
      "MetricsIntensity" : 0.053525167683409675,
      "Density" : 3.203498542274052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5efa746c-8793-42f3-956e-0eee63a9ea0b",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5557283565634632,
      "MetricsIntensity" : 0.053515345474165366,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 52.02200741427682,
    "generation" : 15,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088497,
      "LackOfCohesion" : 0.5557283565634632,
      "MetricsIntensity" : 0.05351534547416537,
      "Density" : 3.2034985422740525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e6ed951e-bb1e-40f5-872d-f686c695d256",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5557283565634631,
      "MetricsIntensity" : 0.05351534547416541,
      "Density" : 0.9951095815975367
    },
    "euclideanDistance" : 52.02200741427682,
    "generation" : 16,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6410398230088497,
      "LackOfCohesion" : 0.5557283565634631,
      "MetricsIntensity" : 0.0535153454741654,
      "Density" : 3.2034985422740516
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "3b376812-7bf7-488e-a884-32eee6624ee4",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5565044872217157,
      "MetricsIntensity" : 0.0535626407351965,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 52.022025092974424,
    "generation" : 18,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5565044872217157,
      "MetricsIntensity" : 0.0535626407351965,
      "Density" : 3.2029154518950436
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a41fc0b-c941-4a4c-ade0-62695c010fb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9943067649028801,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.556504487221716,
      "MetricsIntensity" : 0.05356264073519649,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 52.022025092974424,
    "generation" : 10,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.556504487221716,
      "MetricsIntensity" : 0.053562640735196496,
      "Density" : 3.202915451895044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f781fcf6-eed9-419e-9313-dafca6ff456e",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5566276979941512,
      "MetricsIntensity" : 0.053549514359552366,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 54.021182956437464,
    "generation" : 7,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640841173215274,
      "LackOfCohesion" : 0.5566276979941512,
      "MetricsIntensity" : 0.05354951435955238,
      "Density" : 3.2042007001166857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ea488f51-7298-49cd-95fa-d4de265b2131",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5566276979941512,
      "MetricsIntensity" : 0.053549514359552366,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 54.021182956437464,
    "generation" : 23,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640841173215274,
      "LackOfCohesion" : 0.5566276979941512,
      "MetricsIntensity" : 0.053549514359552366,
      "Density" : 3.2042007001166857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "db0e3b73-22f8-4824-bfe9-0829c63034e2",
    "objectives" : {
      "NumberOfConcerns" : 0.992967180174146,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5566276979941513,
      "MetricsIntensity" : 0.05354951435955235,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 54.021182956437464,
    "generation" : 7,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6408411732152741,
      "LackOfCohesion" : 0.5566276979941513,
      "MetricsIntensity" : 0.05354951435955235,
      "Density" : 3.2042007001166857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "e849ae12-2485-43ab-b3f6-e87947219b28",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5574043372570291,
      "MetricsIntensity" : 0.05359684061354616,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 54.021199992034845,
    "generation" : 20,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774763,
      "LackOfCohesion" : 0.5574043372570291,
      "MetricsIntensity" : 0.05359684061354617,
      "Density" : 3.203617269544926
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ece31f6d-c15f-4de4-92d9-b39184dad2f0",
    "objectives" : {
      "NumberOfConcerns" : 0.993636972538513,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5574043372570292,
      "MetricsIntensity" : 0.053596840613546144,
      "Density" : 0.9945662017750407
    },
    "euclideanDistance" : 54.021199992034845,
    "generation" : 7,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6419479800774766,
      "LackOfCohesion" : 0.5574043372570292,
      "MetricsIntensity" : 0.053596840613546144,
      "Density" : 3.203617269544924
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5ee03b09-7083-47c6-8821-0c8c479b55fc",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5559701796351258,
      "MetricsIntensity" : 0.05356203070796084,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 56.020442211448625,
    "generation" : 6,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641394576646375,
      "LackOfCohesion" : 0.5559701796351258,
      "MetricsIntensity" : 0.05356203070796083,
      "Density" : 3.207117852975496
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "cc942dd6-c0ca-49d0-87df-18a1152048ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5559701796351258,
      "MetricsIntensity" : 0.05356203070796084,
      "Density" : 0.9956529614200326
    },
    "euclideanDistance" : 56.020442211448625,
    "generation" : 7,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6413945766463742,
      "LackOfCohesion" : 0.5559701796351258,
      "MetricsIntensity" : 0.053562030707960846,
      "Density" : 3.207117852975496
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "eac39679-80be-4330-bbfc-b42be2185d77",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5568702693704056,
      "MetricsIntensity" : 0.053596252612442385,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 58.01972853694048,
    "generation" : 16,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6411960132890366,
      "LackOfCohesion" : 0.5568702693704056,
      "MetricsIntensity" : 0.05359625261244239,
      "Density" : 3.207822533566842
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "ca2e187f-463e-4850-bf34-da33b651eaea",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5568702693704055,
      "MetricsIntensity" : 0.05359625261244243,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 58.01972853694048,
    "generation" : 19,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6411960132890366,
      "LackOfCohesion" : 0.5568702693704055,
      "MetricsIntensity" : 0.05359625261244242,
      "Density" : 3.2078225335668424
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.logger, org.springframework.security.access.intercept.AbstractSecurityInterceptor.messages, org.springframework.security.access.intercept.AbstractSecurityInterceptor.rejectPublicInvocations, org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateConfigAttributes, org.springframework.security.access.intercept.AbstractSecurityInterceptor.eventPublisher, org.springframework.security.access.intercept.AbstractSecurityInterceptor.accessDecisionManager, org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishAuthorizationSuccess, org.springframework.security.access.intercept.AbstractSecurityInterceptor.alwaysReauthenticate, org.springframework.security.access.intercept.AbstractSecurityInterceptor.afterInvocationManager], extractedMethods=[org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication), org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean), org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager(), org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "a9af614c-2921-4502-9e09-84dbd18e78c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5561718310490971,
      "MetricsIntensity" : 0.05356506739888372,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 60.019080791265495,
    "generation" : 11,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5561718310490971,
      "MetricsIntensity" : 0.053565067398883726,
      "Density" : 3.204784130688448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "4391dd70-7c15-4062-bdaf-b6ac0abfb70f",
    "objectives" : {
      "NumberOfConcerns" : 0.9939718687206965,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5561718310490971,
      "MetricsIntensity" : 0.05356506739888372,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 60.019080791265495,
    "generation" : 12,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642501383508578,
      "LackOfCohesion" : 0.5561718310490971,
      "MetricsIntensity" : 0.05356506739888372,
      "Density" : 3.204784130688448
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5351abe4-2c11-4c86-8165-51c311f761e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5566196248455147,
      "MetricsIntensity" : 0.05360256500706097,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 63.01815246213019,
    "generation" : 16,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6402877697841725,
      "LackOfCohesion" : 0.5566196248455147,
      "MetricsIntensity" : 0.053602565007060975,
      "Density" : 3.2042007001166857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "5c4c5d94-7bc8-45fd-bfa3-f90bf15643f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9926322839919625,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5566196248455147,
      "MetricsIntensity" : 0.05360256500706097,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 63.01815246213019,
    "generation" : 18,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6402877697841722,
      "LackOfCohesion" : 0.5566196248455147,
      "MetricsIntensity" : 0.053602565007060975,
      "Density" : 3.2042007001166857
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f73394fc-0316-4c65-9776-5c8394494d99",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5575201404465064,
      "MetricsIntensity" : 0.05363681349141076,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 65.01758605852172,
    "generation" : 11,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6400885935769656,
      "LackOfCohesion" : 0.5575201404465064,
      "MetricsIntensity" : 0.05363681349141076,
      "Density" : 3.2049036777583195
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "fab8b6b9-a58d-43da-bf02-e4bc3160a2b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5575201404465062,
      "MetricsIntensity" : 0.05363681349141077,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 65.01758605852172,
    "generation" : 9,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6400885935769656,
      "LackOfCohesion" : 0.5575201404465062,
      "MetricsIntensity" : 0.05363681349141078,
      "Density" : 3.204903677758319
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "f692270c-0f98-4254-8124-b6536cce4ba1",
    "objectives" : {
      "NumberOfConcerns" : 0.9922973878097789,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5568621909279009,
      "MetricsIntensity" : 0.05364933804726083,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 67.01707417853193,
    "generation" : 8,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640642303433001,
      "LackOfCohesion" : 0.5568621909279009,
      "MetricsIntensity" : 0.05364933804726083,
      "Density" : 3.2078225335668424
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "6990533d-821d-49a7-aa14-f9e18aaef4bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9922973878097789,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5568621909279011,
      "MetricsIntensity" : 0.0536493380472608,
      "Density" : 0.9952907082050353
    },
    "euclideanDistance" : 67.01707417853193,
    "generation" : 8,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6406423034330013,
      "LackOfCohesion" : 0.5568621909279011,
      "MetricsIntensity" : 0.0536493380472608,
      "Density" : 3.207822533566843
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "9fd93548-1177-4de2-bc24-6f9a052bb1d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5577634565824905,
      "MetricsIntensity" : 0.05368363969534067,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 69.01657184999316,
    "generation" : 8,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404432132963986,
      "LackOfCohesion" : 0.5577634565824905,
      "MetricsIntensity" : 0.053683639695340665,
      "Density" : 3.208528037383179
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "7c060c6e-75a5-4aae-a5a4-4404f3e08644",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5577634565824906,
      "MetricsIntensity" : 0.05368363969534066,
      "Density" : 0.994928454990038
    },
    "euclideanDistance" : 69.01657184999316,
    "generation" : 7,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404432132963989,
      "LackOfCohesion" : 0.5577634565824906,
      "MetricsIntensity" : 0.05368363969534066,
      "Density" : 3.2085280373831773
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "e289c0b2-175d-4564-b739-6ceb9107814a",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5579606894893318,
      "MetricsIntensity" : 0.05359188134163099,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 69.01658962099887,
    "generation" : 3,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641394576646375,
      "LackOfCohesion" : 0.5579606894893318,
      "MetricsIntensity" : 0.053591881341630995,
      "Density" : 3.2049036777583195
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "77419ccf-defa-4777-8429-70953ca9ef7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9933020763563295,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5579606894893316,
      "MetricsIntensity" : 0.053591881341631,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 69.01658962099887,
    "generation" : 15,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6413945766463751,
      "LackOfCohesion" : 0.5579606894893316,
      "MetricsIntensity" : 0.053591881341631,
      "Density" : 3.2049036777583204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.authoritiesClaimName, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES, org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger], extractedMethods=[org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt), org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "52f74d18-02ea-4557-ade1-d63dae88676f",
    "objectives" : {
      "NumberOfConcerns" : 0.9919624916275954,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5584084832857492,
      "MetricsIntensity" : 0.05362937894980824,
      "Density" : 0.9942039485600435
    },
    "euclideanDistance" : 72.01588107647244,
    "generation" : 9,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6391809629219705,
      "LackOfCohesion" : 0.5584084832857492,
      "MetricsIntensity" : 0.05362937894980824,
      "Density" : 3.204319906596614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "ec9bbad1-8102-4f6d-8737-4defa3120e42",
    "objectives" : {
      "NumberOfConcerns" : 0.9912926992632284,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5593101719086686,
      "MetricsIntensity" : 0.05366364501707133,
      "Density" : 0.9938416953450462
    },
    "euclideanDistance" : 74.01544494351307,
    "generation" : 16,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6389811738648945,
      "LackOfCohesion" : 0.5593101719086686,
      "MetricsIntensity" : 0.05366364501707133,
      "Density" : 3.205023364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "594b8a3f-06f2-4f0b-ae8a-fb53e35d0644",
    "objectives" : {
      "NumberOfConcerns" : 0.9912926992632284,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.5593101719086689,
      "MetricsIntensity" : 0.05366364501707131,
      "Density" : 0.9938416953450462
    },
    "euclideanDistance" : 74.01544494351307,
    "generation" : 18,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6389811738648945,
      "LackOfCohesion" : 0.5593101719086689,
      "MetricsIntensity" : 0.05366364501707131,
      "Density" : 3.205023364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)]"
      } ]
    } ]
  }, {
    "solutionId" : "836faa36-8c27-4d05-b4b5-6f5c8ba5f01c",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5586522223900637,
      "MetricsIntensity" : 0.053676169572921394,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 76.01504996362323,
    "generation" : 16,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63953488372093,
      "LackOfCohesion" : 0.5586522223900637,
      "MetricsIntensity" : 0.053676169572921394,
      "Density" : 3.2079439252336446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "bdb36227-0ec2-475e-8123-931db6c0998d",
    "objectives" : {
      "NumberOfConcerns" : 0.9916275954454119,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5586522223900634,
      "MetricsIntensity" : 0.05367616957292142,
      "Density" : 0.9947473283825394
    },
    "euclideanDistance" : 76.01504996362323,
    "generation" : 17,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63953488372093,
      "LackOfCohesion" : 0.5586522223900634,
      "MetricsIntensity" : 0.05367616957292142,
      "Density" : 3.207943925233645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType(), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader), org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "89ff95af-b710-4514-8f49-664ed13a2eeb",
    "objectives" : {
      "NumberOfConcerns" : 0.9909578030810449,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5595546626059802,
      "MetricsIntensity" : 0.05371048882698919,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 78.01465750281967,
    "generation" : 14,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393351800554021,
      "LackOfCohesion" : 0.5595546626059802,
      "MetricsIntensity" : 0.05371048882698919,
      "Density" : 3.208649912331969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "28042316-f0c3-41a6-bb50-cb245dcdd183",
    "objectives" : {
      "NumberOfConcerns" : 0.9909578030810449,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5595546626059801,
      "MetricsIntensity" : 0.05371048882698921,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 78.01465750281967,
    "generation" : 18,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393351800554021,
      "LackOfCohesion" : 0.5595546626059801,
      "MetricsIntensity" : 0.05371048882698921,
      "Density" : 3.2086499123319694
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  }, {
    "solutionId" : "9fb4104d-c36c-424d-a9c6-35d2e30084f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9909578030810449,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5595546626059802,
      "MetricsIntensity" : 0.05371048882698919,
      "Density" : 0.9943850751675422
    },
    "euclideanDistance" : 78.01465750281967,
    "generation" : 18,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393351800554021,
      "LackOfCohesion" : 0.5595546626059802,
      "MetricsIntensity" : 0.05371048882698919,
      "Density" : 3.208649912331969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.fromResourceLocation(String)', targetType='org.springframework.security.authentication.AccountStatusUserDetailsChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObjectType()', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.config.annotation.SecurityConfigurerAdapter.CompositeObjectPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.publishEvent(ApplicationEvent)', targetType='org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isRejectPublicInvocations()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setRejectPublicInvocations(boolean)', targetType='org.springframework.security.access.event.AbstractAuthorizationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setMessageSource(MessageSource)', targetType='org.springframework.security.messaging.access.expression.ExpressionBasedMessageSecurityMetadataSourceFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isAlwaysReauthenticate()', targetType='org.springframework.security.web.authentication.NullRememberMeServices'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.obtainSecurityMetadataSource()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setApplicationEventPublisher(ApplicationEventPublisher)', targetType='org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(String, Object, Collection<ConfigAttribute>)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAccessDecisionManager()', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAccessDecisionManager(AccessDecisionManager)', targetType='org.springframework.security.web.server.csrf.CsrfWebFilter.DefaultRequireCsrfProtectionMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setPublishAuthorizationSuccess(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAlwaysReauthenticate(boolean)', targetType='org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setAfterInvocationManager(AfterInvocationManager)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getAfterInvocationManager()', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.isValidateConfigAttributes()', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.validateAttributeDefs(Collection<ConfigAttribute>)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.setValidateConfigAttributes(boolean)', targetType='org.springframework.security.oauth2.core.OAuth2TokenValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(Object, Collection<ConfigAttribute>, Authentication)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.finallyInvocation(InterceptorStatusToken)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(Object)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.gradle.sagan.SaganCreateReleaseTask",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getProjectName()', targetType='org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setProjectName(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.saganCreateRelease()', targetType='org.springframework.security.oauth2.jwt.JwtDecoderInitializationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getVersion()', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setVersion(String)', targetType='org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.OidcAuthenticationRequestChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.setGitHubAccessToken(String)', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.gradle.sagan.SaganCreateReleaseTask.getGitHubAccessToken()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.Saml2RequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.core.context.SecurityContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.encodeCookie(String[])', targetType='org.springframework.security.access.method.AbstractMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.onLoginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.jaasapi.JaasApiIntegrationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.logout(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.oidc.web.server.logout.OidcClientInitiatedServerLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookiePath(HttpServletRequest)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.createSuccessfulAuthentication(HttpServletRequest, UserDetails)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getTokenValiditySeconds()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setTokenValiditySeconds(int)', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.tokenValiditySeconds', targetTypeName='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getAuthenticationDetailsSource()', targetType='org.springframework.security.config.annotation.web.configurers.X509Configurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieDomain(String)', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getKey()', targetType='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginFail(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.loginSuccess(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getParameter()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setParameter(String)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setMessageSource(MessageSource)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.rememberMeRequested(HttpServletRequest, String)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAlwaysRemember(boolean)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.messages', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.alwaysRemember', targetTypeName='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.getCookieName()', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setAuthoritiesMapper(GrantedAuthoritiesMapper)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookieName(String)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.web.server.AbstractServerWebExchangeMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.disabled(boolean)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.roles(String...)', targetType='org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.password', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthorities(Jwt)', targetType='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.logger', targetTypeName='org.springframework.security.oauth2.client.endpoint.WebClientReactiveClientCredentialsTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.castAuthoritiesToCollection(Object)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(String)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.SecuredAnnotationMetadataExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.getAuthoritiesClaimName(Jwt)', targetType='org.springframework.security.acls.model.AlreadyExistsException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter.WELL_KNOWN_AUTHORITIES_CLAIM_NAMES', targetTypeName='org.springframework.security.acls.model.AlreadyExistsException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.initializeTransientFields(MutableAcl)', targetType='org.springframework.security.ldap.authentication.BindAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl'"
      } ]
    } ]
  } ]
}