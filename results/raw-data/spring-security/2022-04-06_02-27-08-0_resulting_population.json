{
  "executionId" : "5f5f9081-7e7e-470a-955f-9b738f3e6a93",
  "computingTime" : 848269,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.155790711346267,
    "meanNumConcerns" : 1.6221606648199451,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "af16b9cb-0bbe-4f7c-b94e-ba1d60ee123d",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531650354870793,
      "MetricsIntensity" : 0.053176115640955125,
      "Density" : 1.0007451564828613
    },
    "euclideanDistance" : 10.115261916621613,
    "generation" : 33,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207276736493934,
      "LackOfCohesion" : 0.5531650354870793,
      "MetricsIntensity" : 0.053176115640955125,
      "Density" : 3.143358689291984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd1f8b35-0d22-41ba-98c0-c7228e722a8f",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5528613435391095,
      "MetricsIntensity" : 0.05314543327536368,
      "Density" : 1.0013040238450075
    },
    "euclideanDistance" : 10.115368285630568,
    "generation" : 31,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6209366391184568,
      "LackOfCohesion" : 0.5528613435391095,
      "MetricsIntensity" : 0.05314543327536368,
      "Density" : 3.14327485380117
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "94d0a49f-d972-4b50-882a-e889c1f71eed",
    "objectives" : {
      "NumberOfConcerns" : 1.0051229508196722,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531836671665181,
      "MetricsIntensity" : 0.053140161923753974,
      "Density" : 1.0013040238450075
    },
    "euclideanDistance" : 10.115419810411316,
    "generation" : 9,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6214876033057852,
      "LackOfCohesion" : 0.5531836671665181,
      "MetricsIntensity" : 0.053140161923753974,
      "Density" : 3.1432748538011697
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "61fc4fbd-c9b7-4499-85f7-5a3b09146c21",
    "objectives" : {
      "NumberOfConcerns" : 1.005464480874317,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526947315517099,
      "MetricsIntensity" : 0.053171239727474874,
      "Density" : 1.0061475409836065
    },
    "euclideanDistance" : 10.115907786429569,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6220385674931126,
      "LackOfCohesion" : 0.5526947315517099,
      "MetricsIntensity" : 0.05317123972747487,
      "Density" : 3.158479532163742
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "54fc3013-441e-4ca3-914d-5fc40f6cb16c",
    "objectives" : {
      "NumberOfConcerns" : 1.005464480874317,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5526947315517101,
      "MetricsIntensity" : 0.05317123972747485,
      "Density" : 1.0061475409836065
    },
    "euclideanDistance" : 10.115907786429569,
    "generation" : 14,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6220385674931126,
      "LackOfCohesion" : 0.5526947315517101,
      "MetricsIntensity" : 0.05317123972747486,
      "Density" : 3.158479532163741
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a241754-48a1-47d3-b717-17f56f8b5998",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5534543077034548,
      "MetricsIntensity" : 0.05320683806185416,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 11.10464698929799,
    "generation" : 17,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6188637617209045,
      "LackOfCohesion" : 0.5534543077034548,
      "MetricsIntensity" : 0.05320683806185416,
      "Density" : 3.141686182669789
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "a84785dd-04c4-4543-8da2-ddf8d3ced313",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5537770521188886,
      "MetricsIntensity" : 0.05320155982858442,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 11.104693888521442,
    "generation" : 31,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6194153337010475,
      "LackOfCohesion" : 0.5537770521188886,
      "MetricsIntensity" : 0.05320155982858441,
      "Density" : 3.141686182669791
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "e3361449-302c-4114-b900-68e7f6c32a34",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5534727628398166,
      "MetricsIntensity" : 0.053170840850759904,
      "Density" : 1.0001862891207154
    },
    "euclideanDistance" : 11.104790593065594,
    "generation" : 32,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6196251378169793,
      "LackOfCohesion" : 0.5534727628398166,
      "MetricsIntensity" : 0.05317084085075991,
      "Density" : 3.1416032767700406
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "65d89be3-5401-4a81-ac51-486a1161f538",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526013921246905,
      "MetricsIntensity" : 0.053216162940630744,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 12.096121716112318,
    "generation" : 18,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205184776613346,
      "LackOfCohesion" : 0.5526013921246905,
      "MetricsIntensity" : 0.05321616294063075,
      "Density" : 3.144613583138173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "42d002ac-30c0-44f4-a787-2ff7042e7fdf",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5522978697471153,
      "MetricsIntensity" : 0.05318543443696668,
      "Density" : 1.001117734724292
    },
    "euclideanDistance" : 12.096210640692998,
    "generation" : 12,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207276736493932,
      "LackOfCohesion" : 0.5522978697471153,
      "MetricsIntensity" : 0.05318543443696669,
      "Density" : 3.144528964306612
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a2403a1-5e4c-4efc-91e4-e80c6a5bb2f5",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552131149076097,
      "MetricsIntensity" : 0.053211257723032306,
      "Density" : 1.0059612518628913
    },
    "euclideanDistance" : 12.096661687734047,
    "generation" : 9,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621830209481808,
      "LackOfCohesion" : 0.552131149076097,
      "MetricsIntensity" : 0.05321125772303231,
      "Density" : 3.159742539496781
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "64890264-77f0-40fd-9534-00fe92d301fa",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5531380729269797,
      "MetricsIntensity" : 0.05322116630619726,
      "Density" : 0.9921758569299552
    },
    "euclideanDistance" : 13.088216863622431,
    "generation" : 11,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6216216216216222,
      "LackOfCohesion" : 0.5531380729269797,
      "MetricsIntensity" : 0.05322116630619726,
      "Density" : 3.118266978922717
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "02a1d6d0-6d2a-4ed3-adc2-e54fce69b5ec",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5528342004640798,
      "MetricsIntensity" : 0.05319043453875918,
      "Density" : 0.9927347242921013
    },
    "euclideanDistance" : 13.088298698144808,
    "generation" : 19,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621830209481808,
      "LackOfCohesion" : 0.5528342004640798,
      "MetricsIntensity" : 0.05319043453875919,
      "Density" : 3.118197776477472
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "c83ba644-5b69-4751-b7a2-76a9eb8dbd24",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5528904851306505,
      "MetricsIntensity" : 0.053246931586037015,
      "Density" : 0.999441132637854
    },
    "euclideanDistance" : 13.08857608445226,
    "generation" : 31,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6186534216335542,
      "LackOfCohesion" : 0.5528904851306505,
      "MetricsIntensity" : 0.053246931586037015,
      "Density" : 3.1429408318687755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "e062ef15-00ba-432a-be76-4edcf25aed4f",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5531232567307013,
      "MetricsIntensity" : 0.05322116630619727,
      "Density" : 0.9916169895678092
    },
    "euclideanDistance" : 14.081840755836131,
    "generation" : 32,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6199669056811916,
      "LackOfCohesion" : 0.5531232567307013,
      "MetricsIntensity" : 0.05322116630619727,
      "Density" : 3.1165105386416863
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "79849c7c-4267-4942-9828-be6a2e32663e",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5532714997180662,
      "MetricsIntensity" : 0.053231362880536405,
      "Density" : 1.002608047690015
    },
    "euclideanDistance" : 14.082503326270114,
    "generation" : 21,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618101545253863,
      "LackOfCohesion" : 0.5532714997180662,
      "MetricsIntensity" : 0.0532313628805364,
      "Density" : 3.1528998242530752
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "7bea1619-6c3a-4ae3-b563-41c21617aff7",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5532422007399848,
      "MetricsIntensity" : 0.05323672484935744,
      "Density" : 0.9890089418777943
    },
    "euclideanDistance" : 15.07636015330561,
    "generation" : 16,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6227247655819086,
      "LackOfCohesion" : 0.5532422007399848,
      "MetricsIntensity" : 0.053236724849357445,
      "Density" : 3.1046783625731
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "eb8c4d09-81e9-4a34-810a-87efe26fd8a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5522510885780677,
      "MetricsIntensity" : 0.05326655086997099,
      "Density" : 0.99198956780924
    },
    "euclideanDistance" : 15.07640603333461,
    "generation" : 17,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6208609271523178,
      "LackOfCohesion" : 0.5522510885780677,
      "MetricsIntensity" : 0.05326655086997098,
      "Density" : 3.1195079086115993
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "ae177cb1-9d70-46ed-9810-9665be0a2772",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.552267903422686,
      "MetricsIntensity" : 0.05316056724687723,
      "Density" : 1.0009314456035767
    },
    "euclideanDistance" : 15.077088218084727,
    "generation" : 18,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621278941565601,
      "LackOfCohesion" : 0.552267903422686,
      "MetricsIntensity" : 0.05316056724687724,
      "Density" : 3.1439438267992963
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "a7a31f33-b14d-40e1-9af7-ac87292cf0b3",
    "objectives" : {
      "NumberOfConcerns" : 1.0047814207650274,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5525904373068636,
      "MetricsIntensity" : 0.053155292456682025,
      "Density" : 1.0009314456035767
    },
    "euclideanDistance" : 15.077122773885996,
    "generation" : 12,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6218302094818084,
      "LackOfCohesion" : 0.5525904373068636,
      "MetricsIntensity" : 0.05315529245668203,
      "Density" : 3.1439438267992976
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "d5ed3dab-b3fd-4034-afb3-d459c670f447",
    "objectives" : {
      "NumberOfConcerns" : 1.0051229508196722,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5521011827516676,
      "MetricsIntensity" : 0.05318639053294285,
      "Density" : 1.005774962742176
    },
    "euclideanDistance" : 15.077450047341467,
    "generation" : 13,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6223814773980156,
      "LackOfCohesion" : 0.5521011827516676,
      "MetricsIntensity" : 0.05318639053294286,
      "Density" : 3.159157401989467
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "b9d1f231-f328-4459-9805-30bb2db8b5d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5544544592942332,
      "MetricsIntensity" : 0.05325098087468262,
      "Density" : 0.9992548435171386
    },
    "euclideanDistance" : 16.07211461558446,
    "generation" : 32,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132448,
      "LackOfCohesion" : 0.5544544592942332,
      "MetricsIntensity" : 0.05325098087468263,
      "Density" : 3.1423550087873453
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "b40284d1-a474-446c-8892-b262c800f3cd",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552707189151433,
      "MetricsIntensity" : 0.05327149863893025,
      "Density" : 1.0024217585692996
    },
    "euclideanDistance" : 16.07216659502849,
    "generation" : 21,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391494,
      "LackOfCohesion" : 0.552707189151433,
      "MetricsIntensity" : 0.05327149863893024,
      "Density" : 3.1541617819460726
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "48ffc9f0-ccf5-451b-9495-000b6b1376d6",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5524032011685137,
      "MetricsIntensity" : 0.05324069385002413,
      "Density" : 1.0029806259314455
    },
    "euclideanDistance" : 16.072233451230677,
    "generation" : 22,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618101545253863,
      "LackOfCohesion" : 0.5524032011685137,
      "MetricsIntensity" : 0.05324069385002413,
      "Density" : 3.154071470415934
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "fefdea7a-bbb9-42dc-b50f-6b7142d8e191",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5521748271257033,
      "MetricsIntensity" : 0.053193422298431436,
      "Density" : 1.0052160953800298
    },
    "euclideanDistance" : 16.072514232480135,
    "generation" : 32,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6201764057331862,
      "LackOfCohesion" : 0.5521748271257033,
      "MetricsIntensity" : 0.05319342229843144,
      "Density" : 3.1574019894675254
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "00ee95e4-c7f1-4df2-be07-a0c14f524c12",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5520081064546851,
      "MetricsIntensity" : 0.05321924558449704,
      "Density" : 1.0061475409836065
    },
    "euclideanDistance" : 16.07260954562046,
    "generation" : 22,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621278941565601,
      "LackOfCohesion" : 0.5520081064546851,
      "MetricsIntensity" : 0.05321924558449705,
      "Density" : 3.160327677004095
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "5f8dcb83-16a9-473f-ad04-0c8d168f4084",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552008106454685,
      "MetricsIntensity" : 0.053219245584497046,
      "Density" : 1.0061475409836065
    },
    "euclideanDistance" : 16.07260954562046,
    "generation" : 13,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6212789415656013,
      "LackOfCohesion" : 0.552008106454685,
      "MetricsIntensity" : 0.05321924558449705,
      "Density" : 3.1603276770040956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "bbc4ec7c-18c6-48e9-852b-7e09d63df533",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5526592410687869,
      "MetricsIntensity" : 0.0533129514400152,
      "Density" : 0.988263785394933
    },
    "euclideanDistance" : 17.06725217503104,
    "generation" : 19,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6217559359469904,
      "LackOfCohesion" : 0.5526592410687869,
      "MetricsIntensity" : 0.0533129514400152,
      "Density" : 3.1059718969555044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "2b545c10-44da-4ac3-8114-ba38a30f9596",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5524634529919735,
      "MetricsIntensity" : 0.0532241560161043,
      "Density" : 1.0040983606557377
    },
    "euclideanDistance" : 17.068109583528656,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618312189740761,
      "LackOfCohesion" : 0.5524634529919735,
      "MetricsIntensity" : 0.05322415601610429,
      "Density" : 3.1557377049180335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "26539bbb-82da-4790-a2e7-a5570c6c317d",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5515368449684335,
      "MetricsIntensity" : 0.053226444539466976,
      "Density" : 1.0055886736214605
    },
    "euclideanDistance" : 17.06830788392107,
    "generation" : 14,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6221731936017652,
      "LackOfCohesion" : 0.5515368449684335,
      "MetricsIntensity" : 0.05322644453946698,
      "Density" : 3.1604215456674476
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "67e7e3e8-4754-4596-b266-5cb4e306b193",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5529487500557515,
      "MetricsIntensity" : 0.053343823634008934,
      "Density" : 0.9871460506706409
    },
    "euclideanDistance" : 18.063382554654165,
    "generation" : 33,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619889502762431,
      "LackOfCohesion" : 0.5529487500557515,
      "MetricsIntensity" : 0.053343823634008934,
      "Density" : 3.104276508494434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "cb9532f6-b99d-4201-8e1e-aa13d0ce98bc",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5534921075199358,
      "MetricsIntensity" : 0.0532758818394587,
      "Density" : 0.9877049180327869
    },
    "euclideanDistance" : 18.06352429142296,
    "generation" : 32,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6208609271523178,
      "LackOfCohesion" : 0.5534921075199358,
      "MetricsIntensity" : 0.0532758818394587,
      "Density" : 3.1060339777387234
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "04390076-4689-4361-9f32-e7d248ec69e9",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5529519981459845,
      "MetricsIntensity" : 0.05333757773875995,
      "Density" : 0.9908718330849479
    },
    "euclideanDistance" : 18.063548776080616,
    "generation" : 36,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5529519981459845,
      "MetricsIntensity" : 0.05333757773875995,
      "Density" : 3.1178194607268455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f597742-8275-40ad-ae8d-15a144534a2d",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.55381506274165,
      "MetricsIntensity" : 0.053270600158616566,
      "Density" : 0.9877049180327869
    },
    "euclideanDistance" : 18.063553143029132,
    "generation" : 31,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6214128035320086,
      "LackOfCohesion" : 0.55381506274165,
      "MetricsIntensity" : 0.053270600158616566,
      "Density" : 3.1060339777387225
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "3f652c13-7892-4a2a-bf23-68fd8c4b26ce",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5522403552672437,
      "MetricsIntensity" : 0.05320560776303708,
      "Density" : 0.9923621460506706
    },
    "euclideanDistance" : 18.06381693800199,
    "generation" : 33,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6221731936017652,
      "LackOfCohesion" : 0.5522403552672437,
      "MetricsIntensity" : 0.05320560776303709,
      "Density" : 3.118852459016393
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "c8602183-889c-4721-81f2-6351df5ab12c",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5535677556002351,
      "MetricsIntensity" : 0.053296414588215935,
      "Density" : 0.9990685543964233
    },
    "euclideanDistance" : 18.06403791997639,
    "generation" : 32,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6184428492545548,
      "LackOfCohesion" : 0.5535677556002351,
      "MetricsIntensity" : 0.05329641458821594,
      "Density" : 3.1436107854630717
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1933a6b-dad3-40bf-b4cc-e0eb3e1e488f",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5524071847637653,
      "MetricsIntensity" : 0.05317976762104062,
      "Density" : 1.0039120715350223
    },
    "euclideanDistance" : 18.06442218859532,
    "generation" : 34,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6210700496414783,
      "LackOfCohesion" : 0.5524071847637653,
      "MetricsIntensity" : 0.053179767621040624,
      "Density" : 3.1551522248243558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "90ef2bf3-240f-4e2c-a80a-d6767d994f75",
    "objectives" : {
      "NumberOfConcerns" : 1.0030737704918034,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5516105374132094,
      "MetricsIntensity" : 0.05323348089488084,
      "Density" : 1.0050298062593144
    },
    "euclideanDistance" : 18.06442221298516,
    "generation" : 33,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6199669056811918,
      "LackOfCohesion" : 0.5516105374132094,
      "MetricsIntensity" : 0.05323348089488085,
      "Density" : 3.158665105386416
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "55a71c1c-106a-4a71-97ff-8dd428b2d0ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5514437079166878,
      "MetricsIntensity" : 0.05325932103687729,
      "Density" : 1.0059612518628913
    },
    "euclideanDistance" : 18.06450698285193,
    "generation" : 23,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6210700496414778,
      "LackOfCohesion" : 0.5514437079166878,
      "MetricsIntensity" : 0.05325932103687729,
      "Density" : 3.1615925058548005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "0b4f0db7-6d70-4043-9474-8946aa53e206",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5541051379460563,
      "MetricsIntensity" : 0.05330142449412963,
      "Density" : 0.9865871833084948
    },
    "euclideanDistance" : 19.06007990625002,
    "generation" : 34,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6195472114853673,
      "LackOfCohesion" : 0.5541051379460563,
      "MetricsIntensity" : 0.05330142449412963,
      "Density" : 3.1043376318874563
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "cd11a7d2-e843-4441-bf19-abcb16362580",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519913032965863,
      "MetricsIntensity" : 0.053217922351720674,
      "Density" : 1.0001862891207154
    },
    "euclideanDistance" : 19.060780967870432,
    "generation" : 34,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6194153337010482,
      "LackOfCohesion" : 0.5519913032965863,
      "MetricsIntensity" : 0.053217922351720674,
      "Density" : 3.1434426229508197
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "c569dd69-c52b-45a2-9ca1-3d7a8a4b715f",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5539490192167926,
      "MetricsIntensity" : 0.053280835707090864,
      "Density" : 1.0022354694485842
    },
    "euclideanDistance" : 19.060837885212585,
    "generation" : 30,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178906681391494,
      "LackOfCohesion" : 0.5539490192167926,
      "MetricsIntensity" : 0.053280835707090864,
      "Density" : 3.153575615474795
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0f15f95-8a2a-404e-9230-ff4d9cafd296",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5517320447605263,
      "MetricsIntensity" : 0.053290117871765116,
      "Density" : 1.0048435171385992
    },
    "euclideanDistance" : 19.060982690816587,
    "generation" : 27,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132448,
      "LackOfCohesion" : 0.5517320447605263,
      "MetricsIntensity" : 0.053290117871765116,
      "Density" : 3.159929701230229
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "83b30694-fae5-44a2-ab41-d9c42e07c7d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5539192585675963,
      "MetricsIntensity" : 0.053286168864117155,
      "Density" : 0.9845380029806259
    },
    "euclideanDistance" : 20.05709835838646,
    "generation" : 9,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6225165562913908,
      "LackOfCohesion" : 0.5539192585675963,
      "MetricsIntensity" : 0.053286168864117155,
      "Density" : 3.092451726155647
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "731d971b-3cd2-47c4-b3a8-a1bc0f051e59",
    "objectives" : {
      "NumberOfConcerns" : 1.0044398907103824,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5526482341552187,
      "MetricsIntensity" : 0.0532519382196411,
      "Density" : 0.9886363636363636
    },
    "euclideanDistance" : 20.057281899429782,
    "generation" : 10,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6230684326710811,
      "LackOfCohesion" : 0.5526482341552187,
      "MetricsIntensity" : 0.05325193821964111,
      "Density" : 3.1053247513165596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "5780e7fa-5863-4d6a-b438-bd6d09eb2cd4",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5516560859941209,
      "MetricsIntensity" : 0.053281793677765046,
      "Density" : 0.9916169895678092
    },
    "euclideanDistance" : 20.05731636053945,
    "generation" : 12,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6212037548315852,
      "LackOfCohesion" : 0.5516560859941209,
      "MetricsIntensity" : 0.053281793677765046,
      "Density" : 3.120164126611958
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "5a85b6d2-7eb0-484c-9de9-d89d104d1f50",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5535284098011151,
      "MetricsIntensity" : 0.05335817773974026,
      "Density" : 1.0027943368107302
    },
    "euclideanDistance" : 20.057787447211826,
    "generation" : 34,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6185737976782753,
      "LackOfCohesion" : 0.5535284098011151,
      "MetricsIntensity" : 0.05335817773974026,
      "Density" : 3.1534856473345045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4d9cb0cf-4317-4273-ac0e-2a0e98467ddf",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515197230221931,
      "MetricsIntensity" : 0.053225125144523565,
      "Density" : 1.003725782414307
    },
    "euclideanDistance" : 20.057914754807502,
    "generation" : 34,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6203090507726272,
      "LackOfCohesion" : 0.5515197230221931,
      "MetricsIntensity" : 0.05322512514452356,
      "Density" : 3.1564147627416514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "eb34292d-2fed-4801-a7f8-213692cd8c9b",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.554514769967095,
      "MetricsIntensity" : 0.05334787821930418,
      "Density" : 0.9828614008941878
    },
    "euclideanDistance" : 21.054210205472106,
    "generation" : 30,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6204419889502764,
      "LackOfCohesion" : 0.554514769967095,
      "MetricsIntensity" : 0.05334787821930417,
      "Density" : 3.090802577621558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "83d2b24a-30bb-4952-8bd9-754617989336",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5542094018738497,
      "MetricsIntensity" : 0.05331700337525471,
      "Density" : 0.9834202682563339
    },
    "euclideanDistance" : 21.054260692891898,
    "generation" : 14,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6206515737161793,
      "LackOfCohesion" : 0.5542094018738497,
      "MetricsIntensity" : 0.05331700337525472,
      "Density" : 3.090749414519907
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d4219ba7-a8d3-49c8-a907-7dfa7f571972",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5545180180573281,
      "MetricsIntensity" : 0.05334163232405518,
      "Density" : 0.9865871833084948
    },
    "euclideanDistance" : 21.05435204565723,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6193370165745855,
      "LackOfCohesion" : 0.5545180180573281,
      "MetricsIntensity" : 0.05334163232405518,
      "Density" : 3.104337631887456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "a287ad68-4e4e-460e-b598-183f0608048c",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5519449388953596,
      "MetricsIntensity" : 0.053312645493889366,
      "Density" : 0.9904992548435171
    },
    "euclideanDistance" : 21.054468040245048,
    "generation" : 7,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6193370165745855,
      "LackOfCohesion" : 0.5519449388953596,
      "MetricsIntensity" : 0.05331264549388937,
      "Density" : 3.1184750733137827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "bb90861c-cec6-4ce6-8abe-449caccd9ac1",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514265251363184,
      "MetricsIntensity" : 0.05325802311580544,
      "Density" : 1.0
    },
    "euclideanDistance" : 21.05495215357769,
    "generation" : 34,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6192052980132448,
      "LackOfCohesion" : 0.5514265251363184,
      "MetricsIntensity" : 0.053258023115805436,
      "Density" : 3.1446983011130634
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "d2cde3cf-4343-45f0-bbb4-a480b4ea0a95",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5533847826913185,
      "MetricsIntensity" : 0.05332103007149187,
      "Density" : 1.0020491803278688
    },
    "euclideanDistance" : 21.055003690566238,
    "generation" : 30,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6176795580110501,
      "LackOfCohesion" : 0.5533847826913185,
      "MetricsIntensity" : 0.05332103007149188,
      "Density" : 3.1548387096774184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c2599a9-1b36-4a1c-b060-a360ddbfe969",
    "objectives" : {
      "NumberOfConcerns" : 1.0040983606557377,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5514137220319942,
      "MetricsIntensity" : 0.053234437614940525,
      "Density" : 1.005774962742176
    },
    "euclideanDistance" : 21.055324452302887,
    "generation" : 23,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621621621621622,
      "LackOfCohesion" : 0.5514137220319942,
      "MetricsIntensity" : 0.05323443761494053,
      "Density" : 3.1610070257611245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "b5833e63-93b4-49e9-a29b-b347c4c47e6d",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.55333680324956,
      "MetricsIntensity" : 0.05336250998363053,
      "Density" : 0.9837928464977646
    },
    "euclideanDistance" : 22.05179504431291,
    "generation" : 32,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.621546961325966,
      "LackOfCohesion" : 0.55333680324956,
      "MetricsIntensity" : 0.05336250998363052,
      "Density" : 3.0937316930287055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d152c02a-e8fa-4d52-9959-36117e441c4b",
    "objectives" : {
      "NumberOfConcerns" : 1.0034153005464481,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5517603499219141,
      "MetricsIntensity" : 0.05329737255889011,
      "Density" : 0.9884500745156483
    },
    "euclideanDistance" : 22.052010246434413,
    "generation" : 9,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6223081170623972,
      "LackOfCohesion" : 0.5517603499219141,
      "MetricsIntensity" : 0.05329737255889012,
      "Density" : 3.10655737704918
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "c2300bbe-697d-4ad5-8cd7-95a6b122c5e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5520187759296283,
      "MetricsIntensity" : 0.05331969565510191,
      "Density" : 0.9983233979135618
    },
    "euclideanDistance" : 22.052290910068248,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617127071823204,
      "LackOfCohesion" : 0.5520187759296283,
      "MetricsIntensity" : 0.05331969565510192,
      "Density" : 3.143108504398827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "f93982e5-516a-4658-b61f-f397ae4c7fe9",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5549281883716471,
      "MetricsIntensity" : 0.053388142764907165,
      "Density" : 0.9828614008941878
    },
    "euclideanDistance" : 23.049487247041263,
    "generation" : 29,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.620232172470979,
      "LackOfCohesion" : 0.5549281883716471,
      "MetricsIntensity" : 0.053388142764907165,
      "Density" : 3.090802577621558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "56ffc037-c2df-42d6-8bf6-537529bf337a",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5520492710140803,
      "MetricsIntensity" : 0.05332823456394915,
      "Density" : 0.9873323397913562
    },
    "euclideanDistance" : 23.04963873174681,
    "generation" : 29,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6204419889502764,
      "LackOfCohesion" : 0.5520492710140803,
      "MetricsIntensity" : 0.05332823456394915,
      "Density" : 3.104862331575864
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "6c7df80c-d4b1-424d-9e5e-3a081c60acfb",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5523566754732941,
      "MetricsIntensity" : 0.053352886981425984,
      "Density" : 0.9904992548435171
    },
    "euclideanDistance" : 23.04972269633817,
    "generation" : 26,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6191265892758426,
      "LackOfCohesion" : 0.5523566754732941,
      "MetricsIntensity" : 0.053352886981425984,
      "Density" : 3.1184750733137823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "132b168d-4db2-4d5f-b038-e085df220671",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5529167587215877,
      "MetricsIntensity" : 0.05325503145311598,
      "Density" : 0.9878912071535022
    },
    "euclideanDistance" : 23.04977244687244,
    "generation" : 12,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6219646799117002,
      "LackOfCohesion" : 0.5529167587215877,
      "MetricsIntensity" : 0.053255031453115984,
      "Density" : 3.106619800820152
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "cf42c8e2-1edb-4397-8461-f8117d14ea42",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5529732250008782,
      "MetricsIntensity" : 0.0533116868966811,
      "Density" : 0.9986959761549925
    },
    "euclideanDistance" : 23.050105894834964,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5529732250008782,
      "MetricsIntensity" : 0.0533116868966811,
      "Density" : 3.144281524926686
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "a0abcccd-e00c-414d-96e8-ecd73c8a6277",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.553797461575402,
      "MetricsIntensity" : 0.053361277046317504,
      "Density" : 1.0020491803278688
    },
    "euclideanDistance" : 23.050212058904876,
    "generation" : 23,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6174682144831403,
      "LackOfCohesion" : 0.553797461575402,
      "MetricsIntensity" : 0.053361277046317504,
      "Density" : 3.1548387096774193
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "ee283ef4-4127-4cca-b613-ba7bdd845197",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5510155050783931,
      "MetricsIntensity" : 0.05324869214631771,
      "Density" : 1.0046572280178838
    },
    "euclideanDistance" : 23.050406972586682,
    "generation" : 28,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6203090507726268,
      "LackOfCohesion" : 0.5510155050783931,
      "MetricsIntensity" : 0.05324869214631771,
      "Density" : 3.159343878148799
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes], extractedMethods=[org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object), org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "7e04338a-e7a8-4b14-be80-aa56438b8bab",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5524273106142826,
      "MetricsIntensity" : 0.05336619173949513,
      "Density" : 0.9947839046199702
    },
    "euclideanDistance" : 24.047805221212137,
    "generation" : 37,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6180210060807076,
      "LackOfCohesion" : 0.5524273106142826,
      "MetricsIntensity" : 0.05336619173949514,
      "Density" : 3.130128956623681
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "e89796b3-8dc0-467a-9ca5-3b75cc486535",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5517194748875228,
      "MetricsIntensity" : 0.05322784175997499,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 24.04812522806264,
    "generation" : 29,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6203090507726274,
      "LackOfCohesion" : 0.5517194748875228,
      "MetricsIntensity" : 0.053227841759975004,
      "Density" : 3.144112478031635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "5f490c10-b0f4-4876-8c5a-5812ad429ff2",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.554040052862322,
      "MetricsIntensity" : 0.05343375556359493,
      "Density" : 0.9826751117734724
    },
    "euclideanDistance" : 25.045467971705147,
    "generation" : 35,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619469026548673,
      "LackOfCohesion" : 0.554040052862322,
      "MetricsIntensity" : 0.05343375556359493,
      "Density" : 3.092028135990622
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "533526d9-c0e5-412d-b0ab-8c336fe93631",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5527656989819356,
      "MetricsIntensity" : 0.05339943525141888,
      "Density" : 0.9867734724292101
    },
    "euclideanDistance" : 25.045614515924704,
    "generation" : 28,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6200221238938053,
      "LackOfCohesion" : 0.5527656989819356,
      "MetricsIntensity" : 0.05339943525141889,
      "Density" : 3.104923798358734
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "003ed8c9-88b9-4675-8989-a619be838884",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5533253462908319,
      "MetricsIntensity" : 0.05330142449412962,
      "Density" : 0.9841654247391952
    },
    "euclideanDistance" : 25.04566068880858,
    "generation" : 33,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6228602981778022,
      "LackOfCohesion" : 0.5533253462908319,
      "MetricsIntensity" : 0.05330142449412962,
      "Density" : 3.093091334894614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4ec3c26f-3499-4187-940f-36ecc387a427",
    "objectives" : {
      "NumberOfConcerns" : 1.0037568306010929,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5533253462908322,
      "MetricsIntensity" : 0.05330142449412961,
      "Density" : 0.9841654247391952
    },
    "euclideanDistance" : 25.04566068880858,
    "generation" : 24,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6228602981778029,
      "LackOfCohesion" : 0.5533253462908322,
      "MetricsIntensity" : 0.05330142449412961,
      "Density" : 3.093091334894614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "41167c20-7c43-481c-b3ae-12e92406a9fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5532614181794648,
      "MetricsIntensity" : 0.053329038829912696,
      "Density" : 0.9981371087928465
    },
    "euclideanDistance" : 25.046048329581083,
    "generation" : 20,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6171270718232043,
      "LackOfCohesion" : 0.5532614181794648,
      "MetricsIntensity" : 0.0533290388299127,
      "Density" : 3.1425219941348983
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6d11ccb-5aff-4ce7-ab79-0d52a7816f10",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5515179665488118,
      "MetricsIntensity" : 0.053289797201703216,
      "Density" : 1.0035394932935917
    },
    "euclideanDistance" : 25.046293887344564,
    "generation" : 30,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6189950303699614,
      "LackOfCohesion" : 0.5515179665488118,
      "MetricsIntensity" : 0.053289797201703216,
      "Density" : 3.1576787807737405
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b3880f5-033e-4d0a-a03a-a3ab261fdfc0",
    "objectives" : {
      "NumberOfConcerns" : 1.0013661202185793,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5539204700508322,
      "MetricsIntensity" : 0.053363194203122404,
      "Density" : 0.982488822652757
    },
    "euclideanDistance" : 26.043764971889072,
    "generation" : 12,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6207849640685463,
      "LackOfCohesion" : 0.5539204700508322,
      "MetricsIntensity" : 0.053363194203122404,
      "Density" : 3.091441969519343
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "ddae42a2-3bbb-4d1d-9a1c-045d03638457",
    "objectives" : {
      "NumberOfConcerns" : 1.0020491803278688,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5536152909254238,
      "MetricsIntensity" : 0.05333228914924441,
      "Density" : 0.9830476900149031
    },
    "euclideanDistance" : 26.0438057807236,
    "generation" : 11,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6209944751381224,
      "LackOfCohesion" : 0.5536152909254238,
      "MetricsIntensity" : 0.053332289149244407,
      "Density" : 3.0913884007029866
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "bfa745d5-1588-4c60-9fa6-5c698a815cd8",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5526224770316349,
      "MetricsIntensity" : 0.05336223627087997,
      "Density" : 0.9860283159463488
    },
    "euclideanDistance" : 26.04383178695064,
    "generation" : 10,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6191265892758426,
      "LackOfCohesion" : 0.5526224770316349,
      "MetricsIntensity" : 0.05336223627087998,
      "Density" : 3.1062206572769955
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "4f912282-6d8a-4f22-a2f4-5d0ba7b588ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5523181468225246,
      "MetricsIntensity" : 0.05333133184351097,
      "Density" : 0.9865871833084948
    },
    "euclideanDistance" : 26.043872677976427,
    "generation" : 13,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6193370165745855,
      "LackOfCohesion" : 0.5523181468225246,
      "MetricsIntensity" : 0.05333133184351097,
      "Density" : 3.106158357771261
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "9e8338b5-3af7-4954-bc53-c3b4f4925aeb",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5528396327248282,
      "MetricsIntensity" : 0.05340649464663432,
      "Density" : 0.9947839046199702
    },
    "euclideanDistance" : 26.044117009404058,
    "generation" : 35,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178097345132747,
      "LackOfCohesion" : 0.5528396327248282,
      "MetricsIntensity" : 0.053406494646634314,
      "Density" : 3.130128956623681
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "5a717760-1882-4e3a-8545-ffd5a247a31e",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5508309836220173,
      "MetricsIntensity" : 0.05327326034990395,
      "Density" : 0.9996274217585693
    },
    "euclideanDistance" : 26.04436457300761,
    "generation" : 21,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6195472114853668,
      "LackOfCohesion" : 0.5508309836220173,
      "MetricsIntensity" : 0.053273260349903956,
      "Density" : 3.145369284876905
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "277bba49-837e-4e51-a5ad-68da13601503",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5506639360477223,
      "MetricsIntensity" : 0.0532991342698638,
      "Density" : 1.0044709388971684
    },
    "euclideanDistance" : 26.044573726047574,
    "generation" : 11,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.620651573716179,
      "LackOfCohesion" : 0.5506639360477223,
      "MetricsIntensity" : 0.05329913426986381,
      "Density" : 3.16060961313013
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "2846dff8-1469-442c-8c5c-5769131a293e",
    "objectives" : {
      "NumberOfConcerns" : 1.0023907103825136,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5506639360477225,
      "MetricsIntensity" : 0.05329913426986379,
      "Density" : 1.0044709388971684
    },
    "euclideanDistance" : 26.044573726047574,
    "generation" : 12,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6206515737161789,
      "LackOfCohesion" : 0.5506639360477225,
      "MetricsIntensity" : 0.05329913426986379,
      "Density" : 3.1606096131301293
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "70493a86-e8a9-4c97-9d83-0b500530b6fa",
    "objectives" : {
      "NumberOfConcerns" : 1.0027322404371584,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5524373242078888,
      "MetricsIntensity" : 0.05334692091357074,
      "Density" : 0.9839791356184798
    },
    "euclideanDistance" : 27.04222105849469,
    "generation" : 27,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6220994475138126,
      "LackOfCohesion" : 0.5524373242078888,
      "MetricsIntensity" : 0.053346920913570746,
      "Density" : 3.0943175161101335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "896ea8fc-ef90-464c-82c1-727a03d666d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5536707661116649,
      "MetricsIntensity" : 0.05337554102894915,
      "Density" : 0.9945976154992549
    },
    "euclideanDistance" : 27.04252099451745,
    "generation" : 25,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6180210060807076,
      "LackOfCohesion" : 0.5536707661116649,
      "MetricsIntensity" : 0.05337554102894914,
      "Density" : 3.1295427901524033
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "9ebb3402-0929-421e-8089-b415b777f746",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5520930633293495,
      "MetricsIntensity" : 0.05331035248029111,
      "Density" : 0.9951564828614009
    },
    "euclideanDistance" : 27.04254706488331,
    "generation" : 27,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5520930633293495,
      "MetricsIntensity" : 0.05331035248029111,
      "Density" : 3.1294669009958986
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "3840e167-6516-496d-8ab2-c85cb662a285",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5526963623885701,
      "MetricsIntensity" : 0.053369291046072374,
      "Density" : 0.9979508196721312
    },
    "euclideanDistance" : 27.04259934359428,
    "generation" : 34,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616915422885572,
      "LackOfCohesion" : 0.5526963623885701,
      "MetricsIntensity" : 0.05336929104607238,
      "Density" : 3.143779342723005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "aafc61a6-252d-4e1b-8350-c17bbe090370",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.551119296887957,
      "MetricsIntensity" : 0.05330410658504214,
      "Density" : 0.9985096870342772
    },
    "euclideanDistance" : 27.042625527161416,
    "generation" : 13,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61767955801105,
      "LackOfCohesion" : 0.551119296887957,
      "MetricsIntensity" : 0.05330410658504213,
      "Density" : 3.143695014662757
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "e7998077-23eb-40b7-9542-2910c0fc3853",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5509521400608342,
      "MetricsIntensity" : 0.053329997427121,
      "Density" : 1.0033532041728763
    },
    "euclideanDistance" : 27.04282671224251,
    "generation" : 12,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5509521400608342,
      "MetricsIntensity" : 0.053329997427120995,
      "Density" : 3.1589442815249273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "df837b0a-7c99-4536-a35f-1095fe03e4b8",
    "objectives" : {
      "NumberOfConcerns" : 1.0003415300546448,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5530316746080945,
      "MetricsIntensity" : 0.05340879066352478,
      "Density" : 0.9823025335320418
    },
    "euclideanDistance" : 28.040583053427678,
    "generation" : 5,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6200221238938053,
      "LackOfCohesion" : 0.5530316746080945,
      "MetricsIntensity" : 0.05340879066352478,
      "Density" : 3.0926686217008794
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "efc950e9-8fd9-4298-a3f9-20d9da006693",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5543337699999082,
      "MetricsIntensity" : 0.05340349514723842,
      "Density" : 0.982488822652757
    },
    "euclideanDistance" : 28.04062746686107,
    "generation" : 23,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6205752212389388,
      "LackOfCohesion" : 0.5543337699999082,
      "MetricsIntensity" : 0.05340349514723842,
      "Density" : 3.0914419695193427
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "073c33f6-2b90-4c96-8556-abbef245930c",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5530349269525389,
      "MetricsIntensity" : 0.05340253658766642,
      "Density" : 0.9860283159463488
    },
    "euclideanDistance" : 28.04068951287976,
    "generation" : 19,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6189159292035404,
      "LackOfCohesion" : 0.5530349269525389,
      "MetricsIntensity" : 0.05340253658766642,
      "Density" : 3.106220657276995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "faedb3fb-1f65-4772-afd2-014d4f182785",
    "objectives" : {
      "NumberOfConcerns" : 1.0010245901639345,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5515420978904498,
      "MetricsIntensity" : 0.05335059246716437,
      "Density" : 0.9955290611028316
    },
    "euclideanDistance" : 28.041044440481798,
    "generation" : 23,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6202321724709792,
      "LackOfCohesion" : 0.5515420978904498,
      "MetricsIntensity" : 0.05335059246716437,
      "Density" : 3.132473622508792
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "33ae3e36-e014-4d14-9391-2e817992cd04",
    "objectives" : {
      "NumberOfConcerns" : 1.001707650273224,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5512384742733215,
      "MetricsIntensity" : 0.05331969565510192,
      "Density" : 0.9960879284649776
    },
    "euclideanDistance" : 28.041082650698662,
    "generation" : 22,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6204419889502764,
      "LackOfCohesion" : 0.5512384742733215,
      "MetricsIntensity" : 0.05331969565510192,
      "Density" : 3.1323960164030464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d9712523-bc8e-4c32-ba95-e0f9de720f98",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5518312544706007,
      "MetricsIntensity" : 0.05338152974656417,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 29.03953952034211,
    "generation" : 26,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618362831858408,
      "LackOfCohesion" : 0.5518312544706007,
      "MetricsIntensity" : 0.05338152974656416,
      "Density" : 3.1307917888563046
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "9226e6c2-bb51-401b-a5e8-da0626c9f316",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5531056083509871,
      "MetricsIntensity" : 0.05341585005874022,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 29.039552076822982,
    "generation" : 33,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178097345132743,
      "LackOfCohesion" : 0.5531056083509871,
      "MetricsIntensity" : 0.05341585005874022,
      "Density" : 3.130791788856304
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1310a41d-c186-4286-aa46-b726fa73f618",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5515272429083171,
      "MetricsIntensity" : 0.05335059246716436,
      "Density" : 0.9949701937406855
    },
    "euclideanDistance" : 29.039576344565,
    "generation" : 25,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6185737976782748,
      "LackOfCohesion" : 0.5515272429083171,
      "MetricsIntensity" : 0.053350592467164365,
      "Density" : 3.1307151230949595
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "d66e3edb-3ca1-4823-9d82-3ccc5953373e",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5531088606954314,
      "MetricsIntensity" : 0.05340959598288188,
      "Density" : 0.9979508196721312
    },
    "euclideanDistance" : 29.03965005730493,
    "generation" : 35,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6167035398230098,
      "LackOfCohesion" : 0.5531088606954314,
      "MetricsIntensity" : 0.05340959598288188,
      "Density" : 3.1437793427230045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "64368c15-dcc7-4c55-89bf-affa1a68eaa9",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5531088606954311,
      "MetricsIntensity" : 0.0534095959828819,
      "Density" : 0.9979508196721312
    },
    "euclideanDistance" : 29.03965005730493,
    "generation" : 14,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6167035398230094,
      "LackOfCohesion" : 0.5531088606954311,
      "MetricsIntensity" : 0.0534095959828819,
      "Density" : 3.143779342723005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "10991fab-f363-4d6a-9385-5d4460468853",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5534446629611723,
      "MetricsIntensity" : 0.05344914789689674,
      "Density" : 0.9823025335320418
    },
    "euclideanDistance" : 30.037865988286985,
    "generation" : 37,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.619811842833426,
      "LackOfCohesion" : 0.5534446629611723,
      "MetricsIntensity" : 0.05344914789689673,
      "Density" : 3.092668621700879
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.delete, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.servletPath, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.defaultMatcher, org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.method], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath(), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "514dc9e1-2a09-40a5-b29a-571ba900d15a",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5526662980067963,
      "MetricsIntensity" : 0.05334434248428761,
      "Density" : 0.9977645305514158
    },
    "euclideanDistance" : 30.038349722656314,
    "generation" : 17,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6174682144831403,
      "LackOfCohesion" : 0.5526662980067963,
      "MetricsIntensity" : 0.05334434248428762,
      "Density" : 3.14319248826291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "769559f8-18c4-42ef-82b8-7c350d1fb531",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5522434561787652,
      "MetricsIntensity" : 0.053421869115639294,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 31.03697714409168,
    "generation" : 21,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6181516325401213,
      "LackOfCohesion" : 0.5522434561787652,
      "MetricsIntensity" : 0.053421869115639294,
      "Density" : 3.1307917888563037
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "48ec05c2-1a41-42b6-bbbd-63733c002bc4",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5535186451534375,
      "MetricsIntensity" : 0.05345621191819032,
      "Density" : 0.9944113263785395
    },
    "euclideanDistance" : 31.036988931896698,
    "generation" : 23,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6175982291090203,
      "LackOfCohesion" : 0.5535186451534375,
      "MetricsIntensity" : 0.05345621191819032,
      "Density" : 3.1307917888563055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "f732d720-0be8-4dd7-81ba-da4c1f0f027b",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5530755242806856,
      "MetricsIntensity" : 0.0533908851586701,
      "Density" : 0.9942250372578242
    },
    "euclideanDistance" : 32.03585274178352,
    "generation" : 32,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.618362831858407,
      "LackOfCohesion" : 0.5530755242806856,
      "MetricsIntensity" : 0.0533908851586701,
      "Density" : 3.1302052785923755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "bd87277b-fec0-4ffa-8e69-9797cbb77ac7",
    "objectives" : {
      "NumberOfConcerns" : 0.9993169398907104,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5530755242806857,
      "MetricsIntensity" : 0.05339088515867007,
      "Density" : 0.9942250372578242
    },
    "euclideanDistance" : 32.03585274178352,
    "generation" : 23,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6183628318584076,
      "LackOfCohesion" : 0.5530755242806857,
      "MetricsIntensity" : 0.05339088515867007,
      "Density" : 3.1302052785923755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "76b25b06-7f7c-42cf-9992-8653b676b255",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5533993254885735,
      "MetricsIntensity" : 0.05338558964238373,
      "Density" : 0.9942250372578242
    },
    "euclideanDistance" : 32.03586898018963,
    "generation" : 31,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6189159292035395,
      "LackOfCohesion" : 0.5533993254885735,
      "MetricsIntensity" : 0.05338558964238373,
      "Density" : 3.130205278592375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "baa30dd9-2bf9-4750-b504-edc1a7d939a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5521004824412038,
      "MetricsIntensity" : 0.05338463108281173,
      "Density" : 0.9975782414307004
    },
    "euclideanDistance" : 32.035918854235646,
    "generation" : 26,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617256637168142,
      "LackOfCohesion" : 0.5521004824412038,
      "MetricsIntensity" : 0.05338463108281174,
      "Density" : 3.1444509688784494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f3a2b90-9f5d-4eed-af04-f110314c72f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5534025778330178,
      "MetricsIntensity" : 0.05337933556652537,
      "Density" : 0.9977645305514158
    },
    "euclideanDistance" : 32.03595776146706,
    "generation" : 32,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178097345132747,
      "LackOfCohesion" : 0.5534025778330178,
      "MetricsIntensity" : 0.05337933556652538,
      "Density" : 3.14319248826291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "d4c247f2-abe1-4a46-a796-e88e75c12922",
    "objectives" : {
      "NumberOfConcerns" : 0.9986338797814208,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5525096061008784,
      "MetricsIntensity" : 0.053431230658421536,
      "Density" : 0.9940387481371088
    },
    "euclideanDistance" : 34.03371129365543,
    "generation" : 19,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6181516325401217,
      "LackOfCohesion" : 0.5525096061008784,
      "MetricsIntensity" : 0.05343123065842154,
      "Density" : 3.1314553990610334
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "4a1f4acb-498c-46f3-baa5-b2d602a07326",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.55251286057661,
      "MetricsIntensity" : 0.0534249724842173,
      "Density" : 0.9975782414307004
    },
    "euclideanDistance" : 34.0337948644439,
    "generation" : 9,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6170448256779195,
      "LackOfCohesion" : 0.55251286057661,
      "MetricsIntensity" : 0.053424972484217306,
      "Density" : 3.14445096887845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "7c064ef5-e391-4d58-bfa0-9e16a4eb3a51",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5529225229259861,
      "MetricsIntensity" : 0.05347162907030383,
      "Density" : 0.9940387481371088
    },
    "euclideanDistance" : 36.03182761674402,
    "generation" : 24,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6179401993355478,
      "LackOfCohesion" : 0.5529225229259861,
      "MetricsIntensity" : 0.053471629070303825,
      "Density" : 3.1314553990610334
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "337bc55f-7f22-4fe1-8dba-5180f3875e4c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979508196721312,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5529225229259863,
      "MetricsIntensity" : 0.053471629070303804,
      "Density" : 0.9940387481371088
    },
    "euclideanDistance" : 36.03182761674402,
    "generation" : 34,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6179401993355476,
      "LackOfCohesion" : 0.5529225229259863,
      "MetricsIntensity" : 0.05347162907030381,
      "Density" : 3.1314553990610334
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.permissionEvaluator, org.springframework.security.access.expression.SecurityExpressionRoot.authentication, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b151a652-ebfc-4ea1-8caa-3c6d52cdab99",
    "objectives" : {
      "NumberOfConcerns" : 0.9996584699453552,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.551781310948723,
      "MetricsIntensity" : 0.05334953905596281,
      "Density" : 1.000558867362146
    },
    "euclideanDistance" : 43.026825863547266,
    "generation" : 33,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617127071823204,
      "LackOfCohesion" : 0.551781310948723,
      "MetricsIntensity" : 0.05334953905596281,
      "Density" : 3.1501466275659826
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "22538623-f444-4726-a84a-ce6ffaa2ec28",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5509267218926948,
      "MetricsIntensity" : 0.0533588822307736,
      "Density" : 1.0014903129657229
    },
    "euclideanDistance" : 44.02625031565784,
    "generation" : 33,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61878453038674,
      "LackOfCohesion" : 0.5509267218926948,
      "MetricsIntensity" : 0.05335888223077359,
      "Density" : 3.1530791788856307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "88667298-e580-46df-867d-d3e31282e2ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5512152865012635,
      "MetricsIntensity" : 0.053389804688500735,
      "Density" : 1.0003725782414308
    },
    "euclideanDistance" : 45.02560811280701,
    "generation" : 11,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616915422885572,
      "LackOfCohesion" : 0.5512152865012635,
      "MetricsIntensity" : 0.05338980468850074,
      "Density" : 3.1514084507042264
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "78841837-37f9-433c-9b82-91d7b157f56d",
    "objectives" : {
      "NumberOfConcerns" : 1.0006830601092895,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5513345418822989,
      "MetricsIntensity" : 0.0534054039608315,
      "Density" : 0.9979508196721312
    },
    "euclideanDistance" : 46.02503768971318,
    "generation" : 32,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6196793808734107,
      "LackOfCohesion" : 0.5513345418822989,
      "MetricsIntensity" : 0.053405403960831516,
      "Density" : 3.1400937866354046
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString(), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "b320f8d8-fd0a-4dc8-a663-cd3cb436c10f",
    "objectives" : {
      "NumberOfConcerns" : 0.9982923497267759,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5519278364409248,
      "MetricsIntensity" : 0.05346739090334419,
      "Density" : 0.996274217585693
    },
    "euclideanDistance" : 47.02442591920371,
    "generation" : 23,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6175982291090203,
      "LackOfCohesion" : 0.5519278364409248,
      "MetricsIntensity" : 0.053467390903344195,
      "Density" : 3.138497652582159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "1c8509dc-9290-4183-a141-f0edd0aa20d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5516235625384104,
      "MetricsIntensity" : 0.05343637713511914,
      "Density" : 0.9968330849478391
    },
    "euclideanDistance" : 47.02444866311409,
    "generation" : 28,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617809734513275,
      "LackOfCohesion" : 0.5516235625384104,
      "MetricsIntensity" : 0.05343637713511913,
      "Density" : 3.1384164222873885
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "a633cf61-2ae5-404e-94cf-ea859b36963e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989754098360656,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5516235625384105,
      "MetricsIntensity" : 0.05343637713511911,
      "Density" : 0.9968330849478391
    },
    "euclideanDistance" : 47.02444866311409,
    "generation" : 27,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6178097345132747,
      "LackOfCohesion" : 0.5516235625384105,
      "MetricsIntensity" : 0.05343637713511912,
      "Density" : 3.1384164222873894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "c34293c4-6c95-4be4-8beb-b82649f8a090",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5519310909166563,
      "MetricsIntensity" : 0.05346113272913997,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 47.0244865763894,
    "generation" : 25,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6164914222468183,
      "LackOfCohesion" : 0.5519310909166563,
      "MetricsIntensity" : 0.053461132729139965,
      "Density" : 3.151497357604228
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "59c7613c-e81f-40b1-b6f0-86ac665c8077",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5532062798913288,
      "MetricsIntensity" : 0.05349547553169095,
      "Density" : 0.9998137108792846
    },
    "euclideanDistance" : 47.02449435554559,
    "generation" : 24,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.615938018815717,
      "LackOfCohesion" : 0.5532062798913288,
      "MetricsIntensity" : 0.053495475531690956,
      "Density" : 3.151497357604228
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "4b8d8476-21f2-483c-84be-df32e057739e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.552340371777731,
      "MetricsIntensity" : 0.053507813026862486,
      "Density" : 0.996274217585693
    },
    "euclideanDistance" : 49.023420215073806,
    "generation" : 29,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6173864894795118,
      "LackOfCohesion" : 0.552340371777731,
      "MetricsIntensity" : 0.05350781302686249,
      "Density" : 3.138497652582159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "6cb44fce-631e-43c6-99a6-6a76ac84d107",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5536163969418952,
      "MetricsIntensity" : 0.053542178349284,
      "Density" : 0.996274217585693
    },
    "euclideanDistance" : 49.02342769718082,
    "generation" : 14,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6168327796234772,
      "LackOfCohesion" : 0.5536163969418952,
      "MetricsIntensity" : 0.05354217834928401,
      "Density" : 3.138497652582159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "5377e0c3-f6cc-4bfc-afe5-d5466281d002",
    "objectives" : {
      "NumberOfConcerns" : 0.9972677595628415,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5536163969418951,
      "MetricsIntensity" : 0.053542178349284035,
      "Density" : 0.996274217585693
    },
    "euclideanDistance" : 49.02342769718082,
    "generation" : 24,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6168327796234767,
      "LackOfCohesion" : 0.5536163969418951,
      "MetricsIntensity" : 0.053542178349284035,
      "Density" : 3.138497652582159
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "18fdcc6a-e75f-4b54-9cf0-fc0070e67475",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5521972408387698,
      "MetricsIntensity" : 0.0534704942719222,
      "Density" : 0.999441132637854
    },
    "euclideanDistance" : 50.02301358133961,
    "generation" : 24,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6164914222468185,
      "LackOfCohesion" : 0.5521972408387698,
      "MetricsIntensity" : 0.0534704942719222,
      "Density" : 3.152173913043479
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "1479efa8-c5e0-441d-bf97-150678fce330",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5526066962243834,
      "MetricsIntensity" : 0.0535171807083613,
      "Density" : 0.9959016393442623
    },
    "euclideanDistance" : 52.02206534365319,
    "generation" : 32,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6173864894795116,
      "LackOfCohesion" : 0.5526066962243834,
      "MetricsIntensity" : 0.0535171807083613,
      "Density" : 3.1391661773341157
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "bcc11561-5f8a-4189-bdb2-e00f8b1d70d5",
    "objectives" : {
      "NumberOfConcerns" : 0.9976092896174863,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5526066962243831,
      "MetricsIntensity" : 0.053517180708361325,
      "Density" : 0.9959016393442623
    },
    "euclideanDistance" : 52.02206534365319,
    "generation" : 22,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617386489479512,
      "LackOfCohesion" : 0.5526066962243831,
      "MetricsIntensity" : 0.05351718070836133,
      "Density" : 3.1391661773341157
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[]), org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "e51a5428-882f-4f9f-8b87-8eb95daee7c5",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5526099528341972,
      "MetricsIntensity" : 0.05351091843043627,
      "Density" : 0.999441132637854
    },
    "euclideanDistance" : 52.02212015732397,
    "generation" : 18,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.616279069767442,
      "LackOfCohesion" : 0.5526099528341972,
      "MetricsIntensity" : 0.05351091843043627,
      "Density" : 3.152173913043479
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>), org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute), org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)]"
      } ]
    } ]
  }, {
    "solutionId" : "1387a9dc-c64d-4b1f-91b7-d261175340ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.55301994769972,
      "MetricsIntensity" : 0.053557662026058425,
      "Density" : 0.9959016393442623
    },
    "euclideanDistance" : 54.021240095614665,
    "generation" : 11,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6171745152354569,
      "LackOfCohesion" : 0.55301994769972,
      "MetricsIntensity" : 0.053557662026058425,
      "Density" : 3.139166177334115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  }, {
    "solutionId" : "19ae452f-126a-4db3-a062-9590cd9d2e06",
    "objectives" : {
      "NumberOfConcerns" : 0.9969262295081968,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5530199476997196,
      "MetricsIntensity" : 0.05355766202605843,
      "Density" : 0.9959016393442623
    },
    "euclideanDistance" : 54.021240095614665,
    "generation" : 21,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.617174515235457,
      "LackOfCohesion" : 0.5530199476997196,
      "MetricsIntensity" : 0.05355766202605843,
      "Density" : 3.1391661773341166
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.serialize(LogoutResponse)', targetType='org.springframework.security.web.access.intercept.FilterSecurityInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.inflateIfRequired(RelyingPartyRegistration, byte[])', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutResponseResolver.resolve(HttpServletRequest, Authentication, BiConsumer<RelyingPartyRegistration,LogoutResponse>)', targetType='org.springframework.security.authorization.method.ExpressionAttribute'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.createAuthentication(String)', targetType='org.springframework.security.crypto.encrypt.Encryptors.NoOpTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.principal(String)', targetType='org.springframework.security.access.event.PublicInvocationEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attributes(Consumer<Map<String,Object>>)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.OAuth2AuthorizeRequest.Builder.attribute(String, Object)', targetType='org.springframework.security.config.annotation.method.configuration.MethodSecuritySelector'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOAuth2UserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)', targetType='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.requestCache', targetTypeName='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.toString()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentSecurityPolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.core.userdetails.cache.NullUserCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, Object)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.acls.domain.IdentityUnavailableException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.web.util.matcher.AnyRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.BearerTokenRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasPermission(Object, String, Object)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlLogoutRequestResolver.serialize(LogoutRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.OpenSamlDecryptionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutValidatorResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.crypto.password.AbstractPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.oauth2.core.ClientAuthenticationMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.concurrent.DelegatingSecurityContextExecutorService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.AuthenticatedVoter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication)', targetType='org.springframework.security.ldap.authentication.ad.ActiveDirectoryAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(ConfigAttribute)', targetType='org.springframework.gradle.CopyPropertiesPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.AuthenticatedVoter.supports(Class<?>)', targetType='org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter'"
      } ]
    } ]
  } ]
}