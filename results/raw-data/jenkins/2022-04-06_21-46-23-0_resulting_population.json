{
  "executionId" : "475a9d7e-c24a-463b-866e-bb6893484079",
  "computingTime" : 759390,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1241305510968433,
    "meanNumConcerns" : 1.6359516616314205,
    "meanMetricsIntensity" : 0.03296937024300846,
    "meanLackOfCohesion" : 0.48535030050355504
  },
  "population" : [ {
    "solutionId" : "bb61184d-858a-4f25-be8e-7b6bad5e1118",
    "objectives" : {
      "NumberOfConcerns" : 1.002462296091105,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4877806799457483,
      "MetricsIntensity" : 0.032736925962284176,
      "Density" : 1.0008563110121595
    },
    "euclideanDistance" : 10.111658899924725,
    "generation" : 5,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6334002006018054,
      "LackOfCohesion" : 0.4877806799457483,
      "MetricsIntensity" : 0.032736925962284176,
      "Density" : 3.1168
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3ba0abf-138e-491c-a9af-bd4f7ead9650",
    "objectives" : {
      "NumberOfConcerns" : 1.0040012311480455,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48630412895427166,
      "MetricsIntensity" : 0.03273533485474396,
      "Density" : 1.0003425244048638
    },
    "euclideanDistance" : 10.111689618766269,
    "generation" : 49,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6350877192982456,
      "LackOfCohesion" : 0.48630412895427166,
      "MetricsIntensity" : 0.03273533485474396,
      "Density" : 3.111880660628662
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "15c7bf77-8363-4def-855a-3ea9cadb4c23",
    "objectives" : {
      "NumberOfConcerns" : 1.0036934441366574,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4876990893052764,
      "MetricsIntensity" : 0.03272251542950019,
      "Density" : 1.0017126220243193
    },
    "euclideanDistance" : 10.111861840019916,
    "generation" : 47,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6345864661654137,
      "LackOfCohesion" : 0.4876990893052764,
      "MetricsIntensity" : 0.03272251542950019,
      "Density" : 3.1178038379530926
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "95656e24-2c6e-4393-9711-7efcca742df4",
    "objectives" : {
      "NumberOfConcerns" : 1.0040012311480455,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4871924073425502,
      "MetricsIntensity" : 0.032734989070886546,
      "Density" : 1.0027401952389108
    },
    "euclideanDistance" : 10.111969857182935,
    "generation" : 48,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6350877192982456,
      "LackOfCohesion" : 0.4871924073425502,
      "MetricsIntensity" : 0.03273498907088655,
      "Density" : 3.11933937133724
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0b8dff25-ab51-4419-8cac-dfa332fd610a",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.4873788276674699,
      "MetricsIntensity" : 0.032765366379641676,
      "Density" : 0.9964034937489296
    },
    "euclideanDistance" : 12.092720761890776,
    "generation" : 50,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6313941825476426,
      "LackOfCohesion" : 0.4873788276674699,
      "MetricsIntensity" : 0.032765366379641676,
      "Density" : 3.104589114194237
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7d875eb9-5e99-4255-b716-1146e9451cee",
    "objectives" : {
      "NumberOfConcerns" : 1.0030778701138812,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.48591819606107556,
      "MetricsIntensity" : 0.03275591035193495,
      "Density" : 0.9994862133927043
    },
    "euclideanDistance" : 12.09306939313591,
    "generation" : 50,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6335839598997492,
      "LackOfCohesion" : 0.48591819606107556,
      "MetricsIntensity" : 0.03275591035193495,
      "Density" : 3.1108742004264394
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "542caae5-a959-4e89-b408-b949a8d07915",
    "objectives" : {
      "NumberOfConcerns" : 1.0009233610341643,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.48704992852959866,
      "MetricsIntensity" : 0.03278010309281036,
      "Density" : 1.0003425244048638
    },
    "euclideanDistance" : 13.085901761393293,
    "generation" : 47,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6317109884596084,
      "LackOfCohesion" : 0.48704992852959866,
      "MetricsIntensity" : 0.03278010309281036,
      "Density" : 3.11852642819007
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1f890913-e882-4948-84c0-e7b74fde2ab8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.4860091895350642,
      "MetricsIntensity" : 0.03277805717328723,
      "Density" : 0.9960609693440657
    },
    "euclideanDistance" : 14.079396890065825,
    "generation" : 50,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6302057200200704,
      "LackOfCohesion" : 0.4860091895350642,
      "MetricsIntensity" : 0.03277805717328723,
      "Density" : 3.106837606837606
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "f761b567-0db4-4daa-9164-9ae9d158beba",
    "objectives" : {
      "NumberOfConcerns" : 1.0009233610341643,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.4876632231566136,
      "MetricsIntensity" : 0.03276098181781446,
      "Density" : 1.000171262202432
    },
    "euclideanDistance" : 14.079811036713124,
    "generation" : 50,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6317109884596082,
      "LackOfCohesion" : 0.4876632231566136,
      "MetricsIntensity" : 0.03276098181781446,
      "Density" : 3.1179925253603837
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "07dee407-deec-4744-8aa2-0f6f6368efe6",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.4863208966747252,
      "MetricsIntensity" : 0.032752308294151246,
      "Density" : 0.9974310669635211
    },
    "euclideanDistance" : 15.074333474486362,
    "generation" : 50,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327145007526345,
      "LackOfCohesion" : 0.4863208966747252,
      "MetricsIntensity" : 0.032752308294151246,
      "Density" : 3.1077908217716113
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "cd5b867d-5fb2-494c-a51b-75e76c44d7e1",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.48638834389563806,
      "MetricsIntensity" : 0.03273851734766537,
      "Density" : 0.9988011645829765
    },
    "euclideanDistance" : 15.074508185593764,
    "generation" : 48,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347215253386855,
      "LackOfCohesion" : 0.48638834389563806,
      "MetricsIntensity" : 0.03273851734766537,
      "Density" : 3.1104000000000003
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "101c3d42-16ad-469e-9158-20cf38f6d376",
    "objectives" : {
      "NumberOfConcerns" : 1.0030778701138812,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.4858811045270124,
      "MetricsIntensity" : 0.03275100471142947,
      "Density" : 0.9998287377975681
    },
    "euclideanDistance" : 15.074580451690325,
    "generation" : 47,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6352232814851981,
      "LackOfCohesion" : 0.4858811045270124,
      "MetricsIntensity" : 0.03275100471142947,
      "Density" : 3.111940298507463
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "ff81506a-0eac-46d2-bd4d-68f8e56e763c",
    "objectives" : {
      "NumberOfConcerns" : 1.002462296091105,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.487273610103654,
      "MetricsIntensity" : 0.032739902785081806,
      "Density" : 1.0018838842267512
    },
    "euclideanDistance" : 15.074720874526843,
    "generation" : 49,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342197691921732,
      "LackOfCohesion" : 0.487273610103654,
      "MetricsIntensity" : 0.032739902785081806,
      "Density" : 3.1199999999999997
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "80d0e633-b36e-4427-b774-9f5441c1958e",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.4858215152347498,
      "MetricsIntensity" : 0.03275615545806405,
      "Density" : 0.9982873779756808
    },
    "euclideanDistance" : 16.06974652686986,
    "generation" : 46,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327145007526345,
      "LackOfCohesion" : 0.4858215152347498,
      "MetricsIntensity" : 0.03275615545806405,
      "Density" : 3.110458911419423
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "9c66122e-e16f-44fc-a1ad-5673699898bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9993844259772238,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.4875073387997221,
      "MetricsIntensity" : 0.032776660384397534,
      "Density" : 0.9982873779756808
    },
    "euclideanDistance" : 17.065581872141394,
    "generation" : 48,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.630020080321285,
      "LackOfCohesion" : 0.4875073387997221,
      "MetricsIntensity" : 0.032776660384397534,
      "Density" : 3.1154462854088725
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "ecae42ab-e633-4e84-add2-a41fe7d837a3",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.48485433518341153,
      "MetricsIntensity" : 0.03276514182217305,
      "Density" : 0.9988011645829765
    },
    "euclideanDistance" : 17.06564457789549,
    "generation" : 47,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6322127446061212,
      "LackOfCohesion" : 0.48485433518341153,
      "MetricsIntensity" : 0.03276514182217305,
      "Density" : 3.1104000000000007
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "dbbd8c4d-673e-4a79-8c79-9048c23e244b",
    "objectives" : {
      "NumberOfConcerns" : 1.0033856571252693,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.4881457830449178,
      "MetricsIntensity" : 0.03264885723063579,
      "Density" : 0.9986299023805446
    },
    "euclideanDistance" : 17.065854702072098,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349047141424273,
      "LackOfCohesion" : 0.4881457830449178,
      "MetricsIntensity" : 0.0326488572306358,
      "Density" : 3.108208955223881
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d624901-3ed7-4f54-8e46-c469affc2284",
    "objectives" : {
      "NumberOfConcerns" : 1.0033856571252693,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.48744484846547836,
      "MetricsIntensity" : 0.03265190889832387,
      "Density" : 0.9989724267854084
    },
    "euclideanDistance" : 17.06585471969841,
    "generation" : 49,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349047141424269,
      "LackOfCohesion" : 0.48744484846547836,
      "MetricsIntensity" : 0.03265190889832386,
      "Density" : 3.1092750533049025
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "43fd5131-3316-40eb-bfac-3de8a1bdaac3",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.48841559973107096,
      "MetricsIntensity" : 0.03266594235595994,
      "Density" : 1.0005137866072957
    },
    "euclideanDistance" : 17.06590045556081,
    "generation" : 52,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63371801304566,
      "LackOfCohesion" : 0.48841559973107096,
      "MetricsIntensity" : 0.03266594235595994,
      "Density" : 3.1157333333333335
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "061e102f-78bf-41e1-b51d-8836a2b40366",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.48620257183932686,
      "MetricsIntensity" : 0.03277638585479293,
      "Density" : 0.9967460181537935
    },
    "euclideanDistance" : 19.058619306157475,
    "generation" : 47,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6310240963855422,
      "LackOfCohesion" : 0.48620257183932686,
      "MetricsIntensity" : 0.03277638585479292,
      "Density" : 3.1089743589743595
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "aec2b577-8c39-4f56-9f1d-d1bee11e9955",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.48602106472030876,
      "MetricsIntensity" : 0.03268768157663818,
      "Density" : 0.9965747559513616
    },
    "euclideanDistance" : 19.058637877116382,
    "generation" : 47,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6320281124497995,
      "LackOfCohesion" : 0.48602106472030876,
      "MetricsIntensity" : 0.03268768157663818,
      "Density" : 3.1067805659369987
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "9264cd94-cab6-4768-83b1-9ca22cd4cc34",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.48446797772157524,
      "MetricsIntensity" : 0.03278573995467448,
      "Density" : 0.997944853570817
    },
    "euclideanDistance" : 19.058654037620446,
    "generation" : 48,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6307074761665832,
      "LackOfCohesion" : 0.48446797772157524,
      "MetricsIntensity" : 0.03278573995467448,
      "Density" : 3.1093916755602984
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "3bfb254e-5af8-463a-817d-55928599c322",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.4851217732505679,
      "MetricsIntensity" : 0.03277023436678677,
      "Density" : 0.9989724267854084
    },
    "euclideanDistance" : 19.05874063152119,
    "generation" : 46,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6320281124497988,
      "LackOfCohesion" : 0.4851217732505679,
      "MetricsIntensity" : 0.03277023436678677,
      "Density" : 3.112593383137674
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c4426566-f2ca-44a2-a367-4fb2f89a1b77",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.4873429924703446,
      "MetricsIntensity" : 0.03266717558525734,
      "Density" : 0.9967460181537935
    },
    "euclideanDistance" : 19.058745231937362,
    "generation" : 50,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332162568991473,
      "LackOfCohesion" : 0.4873429924703446,
      "MetricsIntensity" : 0.03266717558525735,
      "Density" : 3.1056563500533616
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c07bd045-6f64-475f-80df-76e40a2703cd",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.486705129880702,
      "MetricsIntensity" : 0.03265862235601247,
      "Density" : 0.9991436889878403
    },
    "euclideanDistance" : 19.058903022468947,
    "generation" : 48,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347215253386855,
      "LackOfCohesion" : 0.486705129880702,
      "MetricsIntensity" : 0.03265862235601247,
      "Density" : 3.111466666666667
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "162d60ea-a4db-40b8-ab6b-24507bacf61b",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.48574193950790556,
      "MetricsIntensity" : 0.03266542434915361,
      "Density" : 0.9989724267854084
    },
    "euclideanDistance" : 20.055934433747726,
    "generation" : 49,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347215253386866,
      "LackOfCohesion" : 0.48574193950790556,
      "MetricsIntensity" : 0.0326654243491536,
      "Density" : 3.109275053304903
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "57774958-1a4e-440b-aa24-0956b6d040e0",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.48601058171587963,
      "MetricsIntensity" : 0.03268252799525033,
      "Density" : 1.0008563110121595
    },
    "euclideanDistance" : 20.055973375204303,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633534136546185,
      "LackOfCohesion" : 0.48601058171587963,
      "MetricsIntensity" : 0.03268252799525033,
      "Density" : 3.116800000000001
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "318af349-5713-4124-bcfd-0279bf6ceae5",
    "objectives" : {
      "NumberOfConcerns" : 0.9996922129886119,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.48633620102999897,
      "MetricsIntensity" : 0.03270336167427863,
      "Density" : 0.9953759205343381
    },
    "euclideanDistance" : 21.052974852836993,
    "generation" : 48,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6305220883534137,
      "LackOfCohesion" : 0.48633620102999897,
      "MetricsIntensity" : 0.03270336167427863,
      "Density" : 3.1047008547008557
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "41b803dc-fa4a-4204-a621-80fd87b7edf0",
    "objectives" : {
      "NumberOfConcerns" : 1.002462296091105,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.4855023472487372,
      "MetricsIntensity" : 0.03268341379972856,
      "Density" : 1.000171262202432
    },
    "euclideanDistance" : 22.05089689657864,
    "generation" : 52,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63504016064257,
      "LackOfCohesion" : 0.4855023472487372,
      "MetricsIntensity" : 0.03268341379972857,
      "Density" : 3.1130063965884864
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "89b816b0-40a6-4f3c-8cc6-bcd119b82eb0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.48537923269432687,
      "MetricsIntensity" : 0.03270018034440297,
      "Density" : 0.9965747559513616
    },
    "euclideanDistance" : 23.048423450325732,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6310240963855427,
      "LackOfCohesion" : 0.48537923269432687,
      "MetricsIntensity" : 0.03270018034440297,
      "Density" : 3.106780565936999
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "95c05bd7-6eab-48e1-8cd1-707ec47206bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.48700574735978,
      "MetricsIntensity" : 0.03268501398621374,
      "Density" : 0.9962322315464976
    },
    "euclideanDistance" : 23.0484562874833,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6307074761665825,
      "LackOfCohesion" : 0.48700574735978,
      "MetricsIntensity" : 0.03268501398621374,
      "Density" : 3.10571276027763
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a4858b8e-b401-4fd9-8bcb-a8017e58d422",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.4866519498017517,
      "MetricsIntensity" : 0.03267301358664572,
      "Density" : 0.9972598047610892
    },
    "euclideanDistance" : 23.048506595682756,
    "generation" : 49,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6320281124497995,
      "LackOfCohesion" : 0.4866519498017517,
      "MetricsIntensity" : 0.03267301358664572,
      "Density" : 3.1089161772557405
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a79fc0ef-338b-4420-a703-0d3083a5ed6f",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.48714971639227833,
      "MetricsIntensity" : 0.03273095258987338,
      "Density" : 0.9982873779756808
    },
    "euclideanDistance" : 24.04645271861676,
    "generation" : 47,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6301507537688438,
      "LackOfCohesion" : 0.48714971639227833,
      "MetricsIntensity" : 0.03273095258987338,
      "Density" : 3.1171122994652407
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a931d05d-3c27-4b84-b400-34d43f9d64eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.4888752664632007,
      "MetricsIntensity" : 0.03276362723601613,
      "Density" : 0.9948621339270423
    },
    "euclideanDistance" : 24.046499470962917,
    "generation" : 42,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6320802005012531,
      "LackOfCohesion" : 0.4888752664632007,
      "MetricsIntensity" : 0.03276362723601613,
      "Density" : 3.10144153764015
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "18dbb208-9c03-4761-a35e-0913f2a0af6f",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.48550018142678075,
      "MetricsIntensity" : 0.032706416700984495,
      "Density" : 0.9946908717246103
    },
    "euclideanDistance" : 25.044435096160292,
    "generation" : 46,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629016064257028,
      "LackOfCohesion" : 0.48550018142678075,
      "MetricsIntensity" : 0.032706416700984495,
      "Density" : 3.1042223409941214
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "fea90fe2-e821-4e9f-bbbd-ca5d202d5868",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.4851906536221107,
      "MetricsIntensity" : 0.03269999702345761,
      "Density" : 0.99554718273677
    },
    "euclideanDistance" : 26.0427676636672,
    "generation" : 49,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303365143144148,
      "LackOfCohesion" : 0.4851906536221107,
      "MetricsIntensity" : 0.03269999702345761,
      "Density" : 3.1052350427350426
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "aa420ec0-e3a8-44d0-b159-42a78d03fa5b",
    "objectives" : {
      "NumberOfConcerns" : 0.9993844259772238,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.4846828556198194,
      "MetricsIntensity" : 0.03271250267380379,
      "Density" : 0.9965747559513616
    },
    "euclideanDistance" : 26.04280933489028,
    "generation" : 45,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.630838774485183,
      "LackOfCohesion" : 0.4846828556198194,
      "MetricsIntensity" : 0.03271250267380379,
      "Density" : 3.1067805659369987
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1c6fb607-c9e1-453c-80e9-bb3d35bec191",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.484658563918692,
      "MetricsIntensity" : 0.03288006425739164,
      "Density" : 0.9970885425586573
    },
    "euclideanDistance" : 27.041267732558456,
    "generation" : 48,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6318432948267205,
      "LackOfCohesion" : 0.484658563918692,
      "MetricsIntensity" : 0.032880064257391636,
      "Density" : 3.1100427350427347
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "82625207-bd10-4aa9-8368-54c83374a418",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.48480387095399824,
      "MetricsIntensity" : 0.03271874246450235,
      "Density" : 0.9946908717246103
    },
    "euclideanDistance" : 28.039647380199675,
    "generation" : 50,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.62882973380211,
      "LackOfCohesion" : 0.48480387095399824,
      "MetricsIntensity" : 0.032718742464502355,
      "Density" : 3.1042223409941214
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "78dc19bc-9eea-4d4c-83cc-e62fbb3c61fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.48427178101371726,
      "MetricsIntensity" : 0.032899139530795325,
      "Density" : 0.9962322315464976
    },
    "euclideanDistance" : 29.03835798217536,
    "generation" : 41,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303365143144148,
      "LackOfCohesion" : 0.48427178101371726,
      "MetricsIntensity" : 0.032899139530795325,
      "Density" : 3.1090326028861566
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "2fa10179-bb00-43b4-b455-4d745a87fba2",
    "objectives" : {
      "NumberOfConcerns" : 0.9996922129886119,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.4843352840638702,
      "MetricsIntensity" : 0.03288679935425861,
      "Density" : 0.997944853570817
    },
    "euclideanDistance" : 29.038439019004443,
    "generation" : 45,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631341034655951,
      "LackOfCohesion" : 0.4843352840638702,
      "MetricsIntensity" : 0.03288679935425861,
      "Density" : 3.1127136752136746
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "cc06723a-5914-4067-b168-0dc545dddd4f",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.48780265043612314,
      "MetricsIntensity" : 0.03277343355402849,
      "Density" : 0.993320774105155
    },
    "euclideanDistance" : 30.037041562286316,
    "generation" : 50,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629518072289157,
      "LackOfCohesion" : 0.48780265043612314,
      "MetricsIntensity" : 0.03277343355402849,
      "Density" : 3.103263777421081
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "efd19ae8-6a2f-40d9-8dd7-5286418c5f68",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.4880545214546038,
      "MetricsIntensity" : 0.03274540749411511,
      "Density" : 0.997944853570817
    },
    "euclideanDistance" : 30.037157971954382,
    "generation" : 50,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6299648064353944,
      "LackOfCohesion" : 0.4880545214546038,
      "MetricsIntensity" : 0.0327454074941151,
      "Density" : 3.1177100053504554
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0fea0f09-8b69-4597-a0bf-195d6d66eb8d",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.48898668902703063,
      "MetricsIntensity" : 0.03280472689363391,
      "Density" : 0.9936632985100189
    },
    "euclideanDistance" : 31.035828204732635,
    "generation" : 48,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6278252134605724,
      "LackOfCohesion" : 0.48898668902703063,
      "MetricsIntensity" : 0.03280472689363391,
      "Density" : 3.107659346545258
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "e88d08c4-6c91-4c0d-b409-dfdc75d8d7d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.4847358392325937,
      "MetricsIntensity" : 0.03296011620215382,
      "Density" : 0.9960609693440657
    },
    "euclideanDistance" : 31.035848438241498,
    "generation" : 46,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6299648064353949,
      "LackOfCohesion" : 0.4847358392325937,
      "MetricsIntensity" : 0.03296011620215382,
      "Density" : 3.1118245050829327
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "c18d717e-8467-40bb-817d-92cb46bc25e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.48453916812435427,
      "MetricsIntensity" : 0.03290404533782189,
      "Density" : 0.9960609693440657
    },
    "euclideanDistance" : 31.03585520494872,
    "generation" : 46,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.62964824120603,
      "LackOfCohesion" : 0.48453916812435427,
      "MetricsIntensity" : 0.03290404533782189,
      "Density" : 3.1101604278074872
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "8b96962f-1faa-483f-86ec-c3198d6e53af",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.4880998649665303,
      "MetricsIntensity" : 0.03275116709312211,
      "Density" : 0.997773591368385
    },
    "euclideanDistance" : 31.03595595241926,
    "generation" : 49,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6299648064353942,
      "LackOfCohesion" : 0.4880998649665303,
      "MetricsIntensity" : 0.03275116709312211,
      "Density" : 3.1155080213903736
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "d183f705-16cd-4feb-ab7d-58eb8a83f842",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.4881956142531352,
      "MetricsIntensity" : 0.03269023783688647,
      "Density" : 0.9941770851173146
    },
    "euclideanDistance" : 31.035970881229368,
    "generation" : 44,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323971915747237,
      "LackOfCohesion" : 0.4881956142531352,
      "MetricsIntensity" : 0.03269023783688647,
      "Density" : 3.0993059263214096
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "3033b518-d3b1-4421-b71c-a96b60dfe45a",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.4870440801185627,
      "MetricsIntensity" : 0.032797868847128285,
      "Density" : 0.9912656276759719
    },
    "euclideanDistance" : 33.03355834074663,
    "generation" : 50,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6278252134605726,
      "LackOfCohesion" : 0.4870440801185627,
      "MetricsIntensity" : 0.03279786884712828,
      "Density" : 3.0985010706638105
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "8efff9b9-a39b-44a6-9ff3-c7e6a8f00377",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.48800495442921926,
      "MetricsIntensity" : 0.03280683596686926,
      "Density" : 0.9926357252954273
    },
    "euclideanDistance" : 33.0335950895482,
    "generation" : 52,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6276381909547741,
      "LackOfCohesion" : 0.48800495442921926,
      "MetricsIntensity" : 0.032806835966869265,
      "Density" : 3.1044456347080875
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7100fc1b-0fda-42d0-8d2d-488038cd0831",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.48780704879081876,
      "MetricsIntensity" : 0.03271752121024351,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 33.03363757095504,
    "generation" : 51,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629834254143647,
      "LackOfCohesion" : 0.48780704879081876,
      "MetricsIntensity" : 0.03271752121024351,
      "Density" : 3.100053504547886
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a1b288a0-b61f-4fbd-b434-ccb9eb3b2e62",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.4884647428653198,
      "MetricsIntensity" : 0.03269556163252263,
      "Density" : 0.9943483473197465
    },
    "euclideanDistance" : 33.0337836048553,
    "generation" : 50,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6322127446061212,
      "LackOfCohesion" : 0.4884647428653198,
      "MetricsIntensity" : 0.03269556163252263,
      "Density" : 3.1014957264957257
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a8a1fe34-4e1b-4728-ba70-b0fe9856e8bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.48762154866338997,
      "MetricsIntensity" : 0.03280960863211963,
      "Density" : 0.9905805788662442
    },
    "euclideanDistance" : 34.032533571228434,
    "generation" : 51,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6263184329482674,
      "LackOfCohesion" : 0.48762154866338997,
      "MetricsIntensity" : 0.03280960863211963,
      "Density" : 3.09967845659164
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "6f1a0d90-6b35-41c6-889c-1b3b9c590785",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.48369218622887256,
      "MetricsIntensity" : 0.032812004667598454,
      "Density" : 0.997773591368385
    },
    "euclideanDistance" : 34.03279598515316,
    "generation" : 42,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323455549974888,
      "LackOfCohesion" : 0.48369218622887256,
      "MetricsIntensity" : 0.032812004667598454,
      "Density" : 3.110517885744794
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "824e445f-b931-42b2-b1b0-2a4fbaa24cc9",
    "objectives" : {
      "NumberOfConcerns" : 0.9963065558633426,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.4861525475768123,
      "MetricsIntensity" : 0.032877537205193506,
      "Density" : 0.9907518410686762
    },
    "euclideanDistance" : 35.03158062656901,
    "generation" : 53,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.626633165829145,
      "LackOfCohesion" : 0.4861525475768123,
      "MetricsIntensity" : 0.032877537205193506,
      "Density" : 3.10021436227224
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "474f8bb6-f131-4d54-bffe-566eb83d7ddc",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.4873487506060466,
      "MetricsIntensity" : 0.03273322420665665,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 35.03170207916574,
    "generation" : 55,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629331993972878,
      "LackOfCohesion" : 0.4873487506060466,
      "MetricsIntensity" : 0.03273322420665664,
      "Density" : 3.100053504547886
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "dd2812af-6b0b-4292-aa38-3bad5aa4e171",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.48790491978372985,
      "MetricsIntensity" : 0.03283774579260289,
      "Density" : 0.9928069874978592
    },
    "euclideanDistance" : 36.03077585606889,
    "generation" : 51,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6261306532663318,
      "LackOfCohesion" : 0.48790491978372985,
      "MetricsIntensity" : 0.03283774579260288,
      "Density" : 3.1066452304394425
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "4d046300-fd53-4d39-93a2-8b3cad10913f",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.48389571596548003,
      "MetricsIntensity" : 0.032829209441967995,
      "Density" : 0.9958897071416338
    },
    "euclideanDistance" : 36.03088353550809,
    "generation" : 51,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6306532663316584,
      "LackOfCohesion" : 0.48389571596548003,
      "MetricsIntensity" : 0.032829209441967995,
      "Density" : 3.107963655799037
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "1fcd2812-8064-426a-a891-db087c194518",
    "objectives" : {
      "NumberOfConcerns" : 0.9993844259772238,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.483959253708721,
      "MetricsIntensity" : 0.032817316997520836,
      "Density" : 0.997602329165953
    },
    "euclideanDistance" : 36.03094882422039,
    "generation" : 46,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631658291457287,
      "LackOfCohesion" : 0.483959253708721,
      "MetricsIntensity" : 0.032817316997520836,
      "Density" : 3.111645299145299
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "2f96d1ad-9912-43c3-8b44-1d2db0f001e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9963065558633426,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.48622753992453194,
      "MetricsIntensity" : 0.03282494114308231,
      "Density" : 0.9902380544613804
    },
    "euclideanDistance" : 37.02986217710109,
    "generation" : 48,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6266331658291462,
      "LackOfCohesion" : 0.48622753992453194,
      "MetricsIntensity" : 0.03282494114308231,
      "Density" : 3.098606645230439
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "6101d3a5-1e60-4ca5-b4fe-6bd3ddab281d",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.4883747538464096,
      "MetricsIntensity" : 0.03271446450125421,
      "Density" : 0.9909231032711081
    },
    "euclideanDistance" : 37.02995009930108,
    "generation" : 48,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6283274736313411,
      "LackOfCohesion" : 0.4883747538464096,
      "MetricsIntensity" : 0.03271446450125422,
      "Density" : 3.097430406852247
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "98660e46-4db1-4f1b-9171-8a00955638c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.48747161529795685,
      "MetricsIntensity" : 0.03284432679801707,
      "Density" : 0.993320774105155
    },
    "euclideanDistance" : 38.02914909895226,
    "generation" : 49,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6259426847662144,
      "LackOfCohesion" : 0.48747161529795685,
      "MetricsIntensity" : 0.03284432679801706,
      "Density" : 3.1099195710455763
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "86c4de69-1712-4c9b-bcb6-29c332dc9b40",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.4841630428704757,
      "MetricsIntensity" : 0.03283453418484754,
      "Density" : 0.9957184449392019
    },
    "euclideanDistance" : 38.029234054922256,
    "generation" : 45,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6299648064353947,
      "LackOfCohesion" : 0.4841630428704757,
      "MetricsIntensity" : 0.03283453418484753,
      "Density" : 3.109090909090909
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "215bf037-f363-420f-bd19-b61e4a9ef34a",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.4876343249308487,
      "MetricsIntensity" : 0.032721223521464095,
      "Density" : 0.99109436547354
    },
    "euclideanDistance" : 39.02839470772207,
    "generation" : 50,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6281407035175883,
      "LackOfCohesion" : 0.4876343249308487,
      "MetricsIntensity" : 0.032721223521464095,
      "Density" : 3.09962506695233
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a2cc8a8d-2c52-4620-b07f-5a8bd528d629",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.486962319582844,
      "MetricsIntensity" : 0.03276907982455974,
      "Density" : 0.9938345607124508
    },
    "euclideanDistance" : 39.02844031467023,
    "generation" : 48,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6279537456008046,
      "LackOfCohesion" : 0.486962319582844,
      "MetricsIntensity" : 0.03276907982455974,
      "Density" : 3.1081949651847895
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c00e1b77-3173-4efa-baf2-08d2b1740875",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.49015576503282304,
      "MetricsIntensity" : 0.03284805936877778,
      "Density" : 0.9928069874978592
    },
    "euclideanDistance" : 41.027044713392925,
    "generation" : 46,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6264454499748617,
      "LackOfCohesion" : 0.49015576503282304,
      "MetricsIntensity" : 0.03284805936877778,
      "Density" : 3.1116478797638214
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3be691e-5392-4aac-8fea-0bc174030c95",
    "objectives" : {
      "NumberOfConcerns" : 0.9963065558633426,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.4872926477464389,
      "MetricsIntensity" : 0.03274555790705569,
      "Density" : 0.9900667922589484
    },
    "euclideanDistance" : 42.02631777115978,
    "generation" : 50,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6266331658291457,
      "LackOfCohesion" : 0.4872926477464389,
      "MetricsIntensity" : 0.03274555790705568,
      "Density" : 3.0964113551151584
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "6a5df9e4-6a14-4404-90b5-340024b3a28e",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.4887717533733974,
      "MetricsIntensity" : 0.032828786949124625,
      "Density" : 0.9893817434492208
    },
    "euclideanDistance" : 44.02510237915373,
    "generation" : 52,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.625125628140703,
      "LackOfCohesion" : 0.4887717533733974,
      "MetricsIntensity" : 0.032828786949124625,
      "Density" : 3.1009125067096077
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "34fc2e27-447f-4f84-9f3e-9e7db5aaf7a5",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.49072409600357986,
      "MetricsIntensity" : 0.03284499928965729,
      "Density" : 0.9914368898784038
    },
    "euclideanDistance" : 45.02459770679127,
    "generation" : 48,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6249371543489193,
      "LackOfCohesion" : 0.49072409600357986,
      "MetricsIntensity" : 0.03284499928965729,
      "Density" : 3.109022556390978
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "5bdae4cf-924a-4941-8c6f-a1775b33d675",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.490066572624478,
      "MetricsIntensity" : 0.03285570799015188,
      "Density" : 0.9916081520808357
    },
    "euclideanDistance" : 46.02405994792103,
    "generation" : 51,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6249371543489188,
      "LackOfCohesion" : 0.490066572624478,
      "MetricsIntensity" : 0.032855707990151875,
      "Density" : 3.107890499194847
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "16e77ba3-55f5-43c4-8fb0-20480d739a92",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.4859367557337929,
      "MetricsIntensity" : 0.03283039247327126,
      "Density" : 0.9921219386881315
    },
    "euclideanDistance" : 46.02411387008015,
    "generation" : 48,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6306532663316586,
      "LackOfCohesion" : 0.4859367557337929,
      "MetricsIntensity" : 0.03283039247327126,
      "Density" : 3.101177730192719
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "bd888d6a-453d-451c-a6a2-6f5b34ce3e54",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.4883903113653059,
      "MetricsIntensity" : 0.03277034794196224,
      "Density" : 0.9934920363075869
    },
    "euclideanDistance" : 49.02262144278593,
    "generation" : 39,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6275792652239556,
      "LackOfCohesion" : 0.4883903113653059,
      "MetricsIntensity" : 0.03277034794196224,
      "Density" : 3.1104557640750663
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "71ba3c96-924a-4459-8186-7c19939f1aed",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.48972279582673206,
      "MetricsIntensity" : 0.03285094440768381,
      "Density" : 0.988867956841925
    },
    "euclideanDistance" : 51.02164570118034,
    "generation" : 50,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.624937154348919,
      "LackOfCohesion" : 0.48972279582673206,
      "MetricsIntensity" : 0.03285094440768381,
      "Density" : 3.099302200751476
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1b5fb908-d56f-4161-a2bb-4e3ea69400da",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.48642838174367276,
      "MetricsIntensity" : 0.0328672794404445,
      "Density" : 0.9929782497002911
    },
    "euclideanDistance" : 51.021718044187374,
    "generation" : 52,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6277665995975856,
      "LackOfCohesion" : 0.48642838174367276,
      "MetricsIntensity" : 0.0328672794404445,
      "Density" : 3.1088471849865953
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "e97b1315-b686-4512-9480-9ed9915f6dd6",
    "objectives" : {
      "NumberOfConcerns" : 0.9950754078177901,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.4885725130800215,
      "MetricsIntensity" : 0.03298262392775901,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 52.0212312752925,
    "generation" : 49,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6262575452716304,
      "LackOfCohesion" : 0.4885725130800215,
      "MetricsIntensity" : 0.03298262392775901,
      "Density" : 3.1037076840408377
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "5c42c782-51ef-4a22-a22c-68e5f198d0f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.48544838037131643,
      "MetricsIntensity" : 0.03285330029804634,
      "Density" : 0.9904093166638123
    },
    "euclideanDistance" : 52.02123653485371,
    "generation" : 47,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.627263581488934,
      "LackOfCohesion" : 0.48544838037131643,
      "MetricsIntensity" : 0.03285330029804634,
      "Density" : 3.100804289544236
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "7ec9fc1d-2931-4ab9-a4e5-b13a7e038b04",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.4883099450575215,
      "MetricsIntensity" : 0.03298710492406622,
      "Density" : 0.9890392190443569
    },
    "euclideanDistance" : 53.020831010395234,
    "generation" : 49,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6267605633802817,
      "LackOfCohesion" : 0.4883099450575215,
      "MetricsIntensity" : 0.032987104924066216,
      "Density" : 3.1015037593984958
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "67b1c2f2-be9b-4d4c-a313-4379c24b1939",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.4874083286477754,
      "MetricsIntensity" : 0.0329340962842656,
      "Density" : 0.9893817434492208
    },
    "euclideanDistance" : 53.02083485101986,
    "generation" : 54,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6264454499748617,
      "LackOfCohesion" : 0.4874083286477754,
      "MetricsIntensity" : 0.0329340962842656,
      "Density" : 3.1009125067096077
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "9f8e7a26-d7c6-4dde-ab45-480d7be54d69",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.49023326535163375,
      "MetricsIntensity" : 0.032875025998076665,
      "Density" : 0.9914368898784038
    },
    "euclideanDistance" : 54.02047270480988,
    "generation" : 43,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6245596376446905,
      "LackOfCohesion" : 0.49023326535163375,
      "MetricsIntensity" : 0.03287502599807667,
      "Density" : 3.110693175711983
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "bafd1a27-725b-4f0e-86cc-1b237a4e9910",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.48787636104529714,
      "MetricsIntensity" : 0.03299517948416047,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 55.0200563409633,
    "generation" : 26,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6260694514343235,
      "LackOfCohesion" : 0.48787636104529714,
      "MetricsIntensity" : 0.03299517948416047,
      "Density" : 3.1037076840408377
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "92a7fb8f-f6c9-4f27-b6d7-dbd7a8b93f42",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.4889279921465972,
      "MetricsIntensity" : 0.032958404867102394,
      "Density" : 0.9916081520808357
    },
    "euclideanDistance" : 56.01974439300266,
    "generation" : 50,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255661801711119,
      "LackOfCohesion" : 0.4889279921465972,
      "MetricsIntensity" : 0.032958404867102394,
      "Density" : 3.1112305212251474
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "f31d045d-562f-4460-b5c0-792a955cecf0",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.4896316345307035,
      "MetricsIntensity" : 0.032955292782254515,
      "Density" : 0.9912656276759719
    },
    "euclideanDistance" : 56.01974447483308,
    "generation" : 53,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255661801711119,
      "LackOfCohesion" : 0.4896316345307035,
      "MetricsIntensity" : 0.03295529278225451,
      "Density" : 3.1101558301988175
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "0639195f-671c-4d33-8b92-2704050a817f",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.4894347512076369,
      "MetricsIntensity" : 0.03284600685380796,
      "Density" : 0.9878403836273334
    },
    "euclideanDistance" : 57.01937998617492,
    "generation" : 48,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255020080321283,
      "LackOfCohesion" : 0.4894347512076369,
      "MetricsIntensity" : 0.03284600685380796,
      "Density" : 3.0877944325481805
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "800e3fec-9164-442a-9b53-094155bf791a",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.4856699700726947,
      "MetricsIntensity" : 0.032784374859851584,
      "Density" : 0.9953759205343381
    },
    "euclideanDistance" : 57.01946805176105,
    "generation" : 44,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6269482151835095,
      "LackOfCohesion" : 0.4856699700726947,
      "MetricsIntensity" : 0.032784374859851584,
      "Density" : 3.1080213903743306
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "88c95049-f8de-4427-807c-db14723961bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.486357272805464,
      "MetricsIntensity" : 0.032865889124067724,
      "Density" : 0.9897242678540846
    },
    "euclideanDistance" : 58.019036343437975,
    "generation" : 46,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6280825364871665,
      "LackOfCohesion" : 0.486357272805464,
      "MetricsIntensity" : 0.032865889124067724,
      "Density" : 3.100321888412017
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "f184b703-d45c-4baa-aba8-9eaceb0d62d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9996922129886119,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.48902059203535203,
      "MetricsIntensity" : 0.032728773357898304,
      "Density" : 0.9907518410686762
    },
    "euclideanDistance" : 58.01914499579713,
    "generation" : 46,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6305220883534142,
      "LackOfCohesion" : 0.48902059203535203,
      "MetricsIntensity" : 0.032728773357898304,
      "Density" : 3.09192944949225
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "92e426b4-c273-47aa-941e-fa579603ad53",
    "objectives" : {
      "NumberOfConcerns" : 0.9950754078177901,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.4879556203199912,
      "MetricsIntensity" : 0.03291294358873866,
      "Density" : 0.9871553348176058
    },
    "euclideanDistance" : 59.018673609897064,
    "generation" : 40,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6246231155778892,
      "LackOfCohesion" : 0.4879556203199912,
      "MetricsIntensity" : 0.03291294358873867,
      "Density" : 3.0906166219839153
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "57e2ec69-1e19-4258-8529-0c06ef197e5f",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.48911378161809205,
      "MetricsIntensity" : 0.03282124932782449,
      "Density" : 0.9886966946394931
    },
    "euclideanDistance" : 60.01842276191695,
    "generation" : 48,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6279537456008042,
      "LackOfCohesion" : 0.48911378161809205,
      "MetricsIntensity" : 0.03282124932782449,
      "Density" : 3.0921264059989295
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "84e7c877-2988-45f3-9b70-b2ecb52514ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.4887830661958832,
      "MetricsIntensity" : 0.03300975557967069,
      "Density" : 0.988867956841925
    },
    "euclideanDistance" : 61.01807588558094,
    "generation" : 26,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6258811681772405,
      "LackOfCohesion" : 0.4887830661958832,
      "MetricsIntensity" : 0.03300975557967069,
      "Density" : 3.1043010752688165
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "df4506bd-d787-40d3-bc3d-7f4fa3cd8237",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.48650338356208395,
      "MetricsIntensity" : 0.03284951018671777,
      "Density" : 0.9948621339270423
    },
    "euclideanDistance" : 61.01818512402165,
    "generation" : 48,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6272635814889342,
      "LackOfCohesion" : 0.48650338356208395,
      "MetricsIntensity" : 0.03284951018671777,
      "Density" : 3.108079186730872
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "e42acf56-4fe5-4d91-a1cd-72c89efcb7be",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.4898352779880183,
      "MetricsIntensity" : 0.03297296065636351,
      "Density" : 0.9912656276759719
    },
    "euclideanDistance" : 62.01782605092679,
    "generation" : 42,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6253776435045317,
      "LackOfCohesion" : 0.4898352779880183,
      "MetricsIntensity" : 0.032972960656363515,
      "Density" : 3.1118279569892477
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "6bc34370-b005-42af-91d2-082a89861f92",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.4924621658539904,
      "MetricsIntensity" : 0.03283059447507539,
      "Density" : 0.9876691214249015
    },
    "euclideanDistance" : 63.01756544514635,
    "generation" : 34,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6273229532898041,
      "LackOfCohesion" : 0.4924621658539904,
      "MetricsIntensity" : 0.032830594475075386,
      "Density" : 3.090568060021435
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "c444c0ba-f226-4334-b742-02cdc013c8ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.4927414839172314,
      "MetricsIntensity" : 0.03284152529371549,
      "Density" : 0.9874978592224696
    },
    "euclideanDistance" : 63.01756982166518,
    "generation" : 42,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6270080321285136,
      "LackOfCohesion" : 0.4927414839172314,
      "MetricsIntensity" : 0.03284152529371549,
      "Density" : 3.088377075522227
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "4dd7e124-743b-41c9-8ce5-bd91c6914be3",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.487330931312892,
      "MetricsIntensity" : 0.032872893353901034,
      "Density" : 0.9873265970200377
    },
    "euclideanDistance" : 64.01719865914971,
    "generation" : 49,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6239316239316237,
      "LackOfCohesion" : 0.487330931312892,
      "MetricsIntensity" : 0.032872893353901034,
      "Density" : 3.0911528150134044
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "5c371606-42dc-4900-ae9f-b6b5c7bfcecd",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.486868915920056,
      "MetricsIntensity" : 0.0327616807558691,
      "Density" : 0.9895530056516527
    },
    "euclideanDistance" : 65.01700687937785,
    "generation" : 49,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6276381909547746,
      "LackOfCohesion" : 0.486868915920056,
      "MetricsIntensity" : 0.032761680755869105,
      "Density" : 3.091492776886035
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "d62417e3-d707-4954-a744-51acac90c5e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.4868689159200559,
      "MetricsIntensity" : 0.032761680755869105,
      "Density" : 0.9895530056516527
    },
    "euclideanDistance" : 65.01700687937785,
    "generation" : 48,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6276381909547744,
      "LackOfCohesion" : 0.4868689159200559,
      "MetricsIntensity" : 0.0327616807558691,
      "Density" : 3.091492776886035
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "9e8d705c-2d5d-4131-b932-94479bbb38c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.48913110771675394,
      "MetricsIntensity" : 0.032931078743984155,
      "Density" : 0.9869840726151738
    },
    "euclideanDistance" : 67.01643229588369,
    "generation" : 44,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370224,
      "LackOfCohesion" : 0.48913110771675394,
      "MetricsIntensity" : 0.032931078743984155,
      "Density" : 3.093397745571659
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "9fcf3543-ba31-4af2-9c87-442c69603380",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.49198950602658365,
      "MetricsIntensity" : 0.032859081875501205,
      "Density" : 0.9859564994005823
    },
    "euclideanDistance" : 67.01646089817456,
    "generation" : 43,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6243093922651937,
      "LackOfCohesion" : 0.49198950602658365,
      "MetricsIntensity" : 0.032859081875501205,
      "Density" : 3.0868632707774806
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "beddfd18-436d-4e41-85a9-dddffe2f6c54",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.48917647594086283,
      "MetricsIntensity" : 0.03293873158412351,
      "Density" : 0.9868128104127419
    },
    "euclideanDistance" : 68.01618854743428,
    "generation" : 51,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370226,
      "LackOfCohesion" : 0.48917647594086283,
      "MetricsIntensity" : 0.03293873158412351,
      "Density" : 3.0912017167381975
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "c723235a-d2a7-4b2a-b9ea-8e2bdfffe6a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9950754078177901,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.48862153108839473,
      "MetricsIntensity" : 0.03285578271479198,
      "Density" : 0.9874978592224696
    },
    "euclideanDistance" : 68.01621246138536,
    "generation" : 49,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6262575452716292,
      "LackOfCohesion" : 0.48862153108839473,
      "MetricsIntensity" : 0.03285578271479198,
      "Density" : 3.091689008042896
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "4e602eed-4efa-4a8f-b85a-f7419e59b74b",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.4913823114739551,
      "MetricsIntensity" : 0.03286362762615535,
      "Density" : 0.9868128104127419
    },
    "euclideanDistance" : 68.01623142050846,
    "generation" : 49,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6256281407035178,
      "LackOfCohesion" : 0.4913823114739551,
      "MetricsIntensity" : 0.03286362762615535,
      "Density" : 3.089544235924933
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "da2908f6-7012-4f1c-819a-5d6a09130607",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.4898095098571025,
      "MetricsIntensity" : 0.03292913000530672,
      "Density" : 0.9856139749957185
    },
    "euclideanDistance" : 69.01594133969296,
    "generation" : 41,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6234288587229764,
      "LackOfCohesion" : 0.4898095098571025,
      "MetricsIntensity" : 0.03292913000530672,
      "Density" : 3.0907626208378094
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "7a3a34ea-44a1-4dd3-92a1-f0c93533dc19",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.4873899665685354,
      "MetricsIntensity" : 0.032794579394919955,
      "Density" : 0.9864702860078781
    },
    "euclideanDistance" : 69.01594524782051,
    "generation" : 55,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6244343891402713,
      "LackOfCohesion" : 0.4873899665685354,
      "MetricsIntensity" : 0.03279457939491995,
      "Density" : 3.086816720257235
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "95fee463-33a3-4a3f-8224-51044e79d4cf",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.4912510690655466,
      "MetricsIntensity" : 0.03286386033529511,
      "Density" : 0.9861277616030142
    },
    "euclideanDistance" : 69.01597219649798,
    "generation" : 47,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6241206030150752,
      "LackOfCohesion" : 0.4912510690655466,
      "MetricsIntensity" : 0.03286386033529511,
      "Density" : 3.0890557939914167
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.util.HistoricalSecrets.MAGIC], extractedMethods=[hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey), hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "cbffb5b6-0431-4991-9613-a703e6c08e2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.49000530679392484,
      "MetricsIntensity" : 0.03286180621061301,
      "Density" : 0.9861277616030142
    },
    "euclideanDistance" : 70.01573097113413,
    "generation" : 50,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6244343891402713,
      "LackOfCohesion" : 0.49000530679392484,
      "MetricsIntensity" : 0.03286180621061301,
      "Density" : 3.0890557939914167
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "5e2312a7-e1f9-428b-88b7-40a9ef7dcf11",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.49187063934381076,
      "MetricsIntensity" : 0.03289114143587644,
      "Density" : 0.9880116458297654
    },
    "euclideanDistance" : 70.01575751420557,
    "generation" : 47,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6229260935143281,
      "LackOfCohesion" : 0.49187063934381076,
      "MetricsIntensity" : 0.03289114143587644,
      "Density" : 3.098281417830289
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "c8218885-78a7-48a9-9d40-8224ca9444e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.49222199941246414,
      "MetricsIntensity" : 0.032873831416363256,
      "Density" : 0.9886966946394931
    },
    "euclideanDistance" : 70.01577401380472,
    "generation" : 42,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370226,
      "LackOfCohesion" : 0.49222199941246414,
      "MetricsIntensity" : 0.032873831416363256,
      "Density" : 3.100429645542428
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "d7ee4215-4f69-4c94-8a23-25afd3ff6b6a",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.4907875257661983,
      "MetricsIntensity" : 0.03292952480618782,
      "Density" : 0.9847576639835588
    },
    "euclideanDistance" : 71.01548295356817,
    "generation" : 25,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.62374245472837,
      "LackOfCohesion" : 0.4907875257661983,
      "MetricsIntensity" : 0.032929524806187827,
      "Density" : 3.0897367006985488
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "bed0ab33-a93e-4f64-b85b-55eb673f7033",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.49062875523257704,
      "MetricsIntensity" : 0.03288121574900832,
      "Density" : 0.9852714505908546
    },
    "euclideanDistance" : 72.01527388203051,
    "generation" : 40,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.622926093514329,
      "LackOfCohesion" : 0.49062875523257704,
      "MetricsIntensity" : 0.03288121574900832,
      "Density" : 3.0880300590445526
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "72f027dd-b9b2-4a3b-bab5-df6494467f5f",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.48957292176338674,
      "MetricsIntensity" : 0.03287002378871314,
      "Density" : 0.98664154821031
    },
    "euclideanDistance" : 72.01528969629662,
    "generation" : 55,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370228,
      "LackOfCohesion" : 0.48957292176338674,
      "MetricsIntensity" : 0.032870023788713135,
      "Density" : 3.0923242082662368
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "69ea4845-3d5f-44ca-a0c5-c39651d09b02",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.4911313222169683,
      "MetricsIntensity" : 0.03289594285015457,
      "Density" : 0.9881829080321973
    },
    "euclideanDistance" : 72.01530871620004,
    "generation" : 41,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6227364185110658,
      "LackOfCohesion" : 0.4911313222169683,
      "MetricsIntensity" : 0.032895942850154576,
      "Density" : 3.1004836109618483
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "63457e1a-75a4-4e8b-9f2a-9a1f7d0e366e",
    "objectives" : {
      "NumberOfConcerns" : 0.9932286857494613,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.49152786144304506,
      "MetricsIntensity" : 0.03288627678129914,
      "Density" : 0.9886966946394931
    },
    "euclideanDistance" : 73.01511285701038,
    "generation" : 51,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6240563663814798,
      "LackOfCohesion" : 0.49152786144304506,
      "MetricsIntensity" : 0.03288627678129914,
      "Density" : 3.100429645542428
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "f5695b7d-a1d6-4908-9a20-57bc03692885",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.48938895376055086,
      "MetricsIntensity" : 0.032945064363681324,
      "Density" : 0.9851001883884227
    },
    "euclideanDistance" : 74.01484243864634,
    "generation" : 44,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6235530951182693,
      "LackOfCohesion" : 0.48938895376055086,
      "MetricsIntensity" : 0.032945064363681324,
      "Density" : 3.0908113917248787
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "5caf4d44-9a57-44ae-b981-959b9839f4f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.49009259614465656,
      "MetricsIntensity" : 0.032942000906990086,
      "Density" : 0.9847576639835588
    },
    "euclideanDistance" : 74.01484253510336,
    "generation" : 44,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.623553095118269,
      "LackOfCohesion" : 0.49009259614465656,
      "MetricsIntensity" : 0.03294200090699008,
      "Density" : 3.0897367006985497
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "654bc286-3b1a-4dab-b3ca-a61a200eeb2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.4893849512272671,
      "MetricsIntensity" : 0.03294519617888351,
      "Density" : 0.9857852371981504
    },
    "euclideanDistance" : 74.0148474046923,
    "generation" : 30,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6230498238550577,
      "LackOfCohesion" : 0.4893849512272671,
      "MetricsIntensity" : 0.0329451961788835,
      "Density" : 3.092960773777539
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "e8e934d8-0ce3-4863-b498-62fbe50c3389",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.4900885936113733,
      "MetricsIntensity" : 0.03294213272219224,
      "Density" : 0.9854427127932865
    },
    "euclideanDistance" : 74.014847497941,
    "generation" : 44,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6230498238550575,
      "LackOfCohesion" : 0.4900885936113733,
      "MetricsIntensity" : 0.032942132722192236,
      "Density" : 3.091886082751208
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "58f374e9-a7e4-43e5-953d-b85f49ad0d68",
    "objectives" : {
      "NumberOfConcerns" : 0.992305324715297,
      "NumberOfRefactorings" : 75.0,
      "LackOfCohesion" : 0.4911402247126732,
      "MetricsIntensity" : 0.03290533696117724,
      "Density" : 0.9878403836273334
    },
    "euclideanDistance" : 75.01468389563816,
    "generation" : 43,
    "numberOfRefactorings" : 75,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.622546552591847,
      "LackOfCohesion" : 0.4911402247126732,
      "MetricsIntensity" : 0.03290533696117724,
      "Density" : 3.0994089199355175
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "0e9fbefd-12c9-4958-8dcf-5ff9698f3c68",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.4902089317103402,
      "MetricsIntensity" : 0.032879403029939955,
      "Density" : 0.9861277616030142
    },
    "euclideanDistance" : 76.01448256896023,
    "generation" : 51,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370226,
      "LackOfCohesion" : 0.4902089317103402,
      "MetricsIntensity" : 0.032879403029939955,
      "Density" : 3.090713902308105
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "4c81bd08-960f-487f-8f6e-11eac9f963af",
    "objectives" : {
      "NumberOfConcerns" : 0.9932286857494613,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.4878618356648392,
      "MetricsIntensity" : 0.032817547186932326,
      "Density" : 0.98664154821031
    },
    "euclideanDistance" : 77.01427822766992,
    "generation" : 45,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6240563663814789,
      "LackOfCohesion" : 0.4878618356648392,
      "MetricsIntensity" : 0.032817547186932326,
      "Density" : 3.0906652360515023
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "6d621e83-d278-4ba4-9a96-e5d9c8ca1f0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.49103308547504654,
      "MetricsIntensity" : 0.032954950740033066,
      "Density" : 0.9852714505908546
    },
    "euclideanDistance" : 78.01409001033551,
    "generation" : 47,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6230498238550577,
      "LackOfCohesion" : 0.49103308547504654,
      "MetricsIntensity" : 0.032954950740033066,
      "Density" : 3.091348737238045
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "321fb687-7615-468f-96b8-cb6422c66f58",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.4908327240256822,
      "MetricsIntensity" : 0.03289882327409281,
      "Density" : 0.9852714505908546
    },
    "euclideanDistance" : 78.01409264253509,
    "generation" : 41,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6227364185110658,
      "LackOfCohesion" : 0.4908327240256822,
      "MetricsIntensity" : 0.03289882327409281,
      "Density" : 3.08968850698174
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "d176fcdb-7683-4e11-a953-01ada0236f5f",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.4906803401689171,
      "MetricsIntensity" : 0.03294072198655506,
      "Density" : 0.9862990238054461
    },
    "euclideanDistance" : 78.01410468603035,
    "generation" : 48,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6243705941591138,
      "LackOfCohesion" : 0.4906803401689171,
      "MetricsIntensity" : 0.03294072198655505,
      "Density" : 3.0945728103170347
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "de7f5fb4-8d17-4785-a368-35570b44d839",
    "objectives" : {
      "NumberOfConcerns" : 0.992305324715297,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.4920847165763464,
      "MetricsIntensity" : 0.03291815561712578,
      "Density" : 0.9876691214249015
    },
    "euclideanDistance" : 79.01394428279184,
    "generation" : 48,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.622546552591847,
      "LackOfCohesion" : 0.4920847165763464,
      "MetricsIntensity" : 0.03291815561712578,
      "Density" : 3.098871574422353
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "04fc33e1-5196-4c6c-9b4d-f35e4815a974",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.4917325519610515,
      "MetricsIntensity" : 0.03290390654607576,
      "Density" : 0.9886966946394931
    },
    "euclideanDistance" : 79.01395880167811,
    "generation" : 22,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6238670694864048,
      "LackOfCohesion" : 0.4917325519610515,
      "MetricsIntensity" : 0.032903906546075765,
      "Density" : 3.1020956475013435
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "e520c1d9-930f-437c-8323-80a7eb687ca2",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 80.0,
      "LackOfCohesion" : 0.4900964286195156,
      "MetricsIntensity" : 0.03290350040048867,
      "Density" : 0.9847576639835588
    },
    "euclideanDistance" : 80.01372573250185,
    "generation" : 45,
    "numberOfRefactorings" : 80,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.623049823855058,
      "LackOfCohesion" : 0.4900964286195156,
      "MetricsIntensity" : 0.03290350040048867,
      "Density" : 3.0897367006985497
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.toList(Map<User,UserInfo>), hudson.model.View.People.getApi()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "f90c977c-f232-4682-b54a-82327c0d3b94",
    "objectives" : {
      "NumberOfConcerns" : 0.9919975377039089,
      "NumberOfRefactorings" : 80.0,
      "LackOfCohesion" : 0.4902924893928627,
      "MetricsIntensity" : 0.03295979332956459,
      "Density" : 0.9854427127932865
    },
    "euclideanDistance" : 80.01372775673022,
    "generation" : 48,
    "numberOfRefactorings" : 80,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6228600201409868,
      "LackOfCohesion" : 0.4902924893928627,
      "MetricsIntensity" : 0.03295979332956459,
      "Density" : 3.0935483870967744
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "f834fc30-5abd-41a7-923f-728ae3c213a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9919975377039089,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.49134870592840374,
      "MetricsIntensity" : 0.032922846001097274,
      "Density" : 0.9871553348176058
    },
    "euclideanDistance" : 81.0135855411577,
    "generation" : 41,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6228600201409868,
      "LackOfCohesion" : 0.49134870592840374,
      "MetricsIntensity" : 0.032922846001097274,
      "Density" : 3.098924731182796
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.tools.DownloadFromUrlInstaller.NodeSpecificInstallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.model.UserIdMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.model.UserIdMapper'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  }, {
    "solutionId" : "21702f73-7568-46f2-97ff-d3bcea5c8ea2",
    "objectives" : {
      "NumberOfConcerns" : 0.9916897506925207,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.49134470118499735,
      "MetricsIntensity" : 0.03292297725062525,
      "Density" : 0.9878403836273334
    },
    "euclideanDistance" : 81.01359009896406,
    "generation" : 39,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6223564954682779,
      "LackOfCohesion" : 0.49134470118499735,
      "MetricsIntensity" : 0.03292297725062525,
      "Density" : 3.101075268817204
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.EnvironmentList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.slaves.EnvironmentVariablesNodeProperty.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='jenkins.security.ImpersonatingUserDetailsService2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='hudson.WebAppMain.JenkinsJVMAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.tools.BatchCommandInstaller.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='jenkins.model.InvalidBuildsDir'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.model.EnvironmentContributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='jenkins.util.io.PathRemover'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='jenkins.management.CliLink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='hudson.security.AuthorizationStrategy.Unsecured'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='hudson.slaves.OfflineCause.SimpleOfflineCause'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.Functions.ThreadGroupMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.Functions.ThreadGroupMap'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.search.SearchFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='jenkins.security.s2m.CallableDirectionChecker.DefaultWhitelist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.node_monitors.TemporarySpaceMonitor.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.util.jna.WINBASE.FILETIME'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.slaves.DumbSlave.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.model.Descriptor.PropertyType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.model.Build.BuildExecution'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.AbstractBuild.AbstractRunner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.FilePath.DirectoryFilter'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='hudson.security.FullControlOnceLoggedInAuthorizationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='jenkins.websocket.WebSockets'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='hudson.model.AbstractDescribableImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='hudson.model.AbstractDescribableImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='hudson.security.UserMayOrMayNotExistException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='jenkins.security.stapler.RoutingDecisionProvider'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitor.RevokeAllSelectedUserAndUuid'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.jna.DotNet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.jna.DotNet'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='hudson.model.Failure'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.slaves.Cloud.CloudState'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.labels.LabelAtomPropertyDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.model.InvisibleAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='jenkins.ReflectiveFilePathFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='jenkins.model.RenameAction.TransientActionFactoryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.model.UpdateCenter.RestartJenkinsJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.ExpressionFactory2.JellyMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='hudson.util.NullStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='hudson.util.NullStream'"
      } ]
    } ]
  } ]
}