{
  "executionId" : "4cacb804-04ed-450d-8d4d-68cdbb87c41b",
  "computingTime" : 764046,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1241305510968433,
    "meanNumConcerns" : 1.6359516616314205,
    "meanMetricsIntensity" : 0.03296937024300846,
    "meanLackOfCohesion" : 0.48535030050355504
  },
  "population" : [ {
    "solutionId" : "8d9e2c0d-3f8a-4826-a9f3-4a589e4a282a",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48708944575185503,
      "MetricsIntensity" : 0.032793124017956296,
      "Density" : 0.9984586401781127
    },
    "euclideanDistance" : 10.111358209131,
    "generation" : 5,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63371801304566,
      "LackOfCohesion" : 0.48708944575185503,
      "MetricsIntensity" : 0.032793124017956296,
      "Density" : 3.110992529348986
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "29eeba31-bdc3-4a40-9416-7ae94235bf8b",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4870894457518549,
      "MetricsIntensity" : 0.03279312401795632,
      "Density" : 0.9984586401781127
    },
    "euclideanDistance" : 10.111358209131,
    "generation" : 55,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63371801304566,
      "LackOfCohesion" : 0.4870894457518549,
      "MetricsIntensity" : 0.03279312401795632,
      "Density" : 3.110992529348986
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.isApplicable(Collection<? extends Item>)', targetType='hudson.scm.ChangeLogSet.Entry'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "96a99298-3122-4767-888d-4df6739237d0",
    "objectives" : {
      "NumberOfConcerns" : 1.0036934441366574,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48757194081274313,
      "MetricsIntensity" : 0.03271606966374764,
      "Density" : 0.9991436889878403
    },
    "euclideanDistance" : 10.111601523978745,
    "generation" : 47,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634586466165414,
      "LackOfCohesion" : 0.48757194081274313,
      "MetricsIntensity" : 0.03271606966374764,
      "Density" : 3.1081513052743728
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a066e4c9-663b-49c1-8e94-1a3157415224",
    "objectives" : {
      "NumberOfConcerns" : 1.0036934441366574,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4885792668200692,
      "MetricsIntensity" : 0.032714838435934986,
      "Density" : 0.9991436889878403
    },
    "euclideanDistance" : 10.111650142368825,
    "generation" : 50,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634586466165414,
      "LackOfCohesion" : 0.4885792668200692,
      "MetricsIntensity" : 0.032714838435934986,
      "Density" : 3.1081513052743728
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "8d57dc88-3893-4574-b7b9-8a8bdcc4abb9",
    "objectives" : {
      "NumberOfConcerns" : 1.0040012311480455,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48636470939946774,
      "MetricsIntensity" : 0.032731593296081544,
      "Density" : 1.0005137866072957
    },
    "euclideanDistance" : 10.111709464629955,
    "generation" : 50,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6350877192982458,
      "LackOfCohesion" : 0.48636470939946774,
      "MetricsIntensity" : 0.032731593296081544,
      "Density" : 3.1107561235356758
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "f8ede716-7d31-47e3-9489-a252f240deb2",
    "objectives" : {
      "NumberOfConcerns" : 1.0040012311480455,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48737203540679386,
      "MetricsIntensity" : 0.03273036206826888,
      "Density" : 1.0005137866072957
    },
    "euclideanDistance" : 10.111757962235634,
    "generation" : 49,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6350877192982456,
      "LackOfCohesion" : 0.48737203540679386,
      "MetricsIntensity" : 0.03273036206826889,
      "Density" : 3.1107561235356753
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "ca5617ef-d928-409e-8185-9df79de476f6",
    "objectives" : {
      "NumberOfConcerns" : 1.0033856571252693,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.4876990893052763,
      "MetricsIntensity" : 0.03272251542950018,
      "Density" : 1.0015413598218874
    },
    "euclideanDistance" : 10.111814329638564,
    "generation" : 53,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634085213032581,
      "LackOfCohesion" : 0.4876990893052763,
      "MetricsIntensity" : 0.03272251542950018,
      "Density" : 3.1172707889125797
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "40524ee6-4a15-4d53-9394-3ee9940a74de",
    "objectives" : {
      "NumberOfConcerns" : 1.0033856571252693,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.48717057020532867,
      "MetricsIntensity" : 0.03273124751222412,
      "Density" : 1.0025689330364789
    },
    "euclideanDistance" : 10.111890710517619,
    "generation" : 46,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6340852130325818,
      "LackOfCohesion" : 0.48717057020532867,
      "MetricsIntensity" : 0.03273124751222412,
      "Density" : 3.1188066062866278
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "08f1053e-4b73-4e70-89c3-15ffa5302ed8",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.48704207990415915,
      "MetricsIntensity" : 0.0327564516140358,
      "Density" : 0.997944853570817
    },
    "euclideanDistance" : 11.101227731288246,
    "generation" : 46,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327145007526345,
      "LackOfCohesion" : 0.48704207990415915,
      "MetricsIntensity" : 0.03275645161403581,
      "Density" : 3.1093916755602984
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "b6bf8cd2-5ea3-4e8b-b051-c57584cafcfc",
    "objectives" : {
      "NumberOfConcerns" : 1.0030778701138812,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.48651450369331656,
      "MetricsIntensity" : 0.032750759307954964,
      "Density" : 1.0
    },
    "euclideanDistance" : 11.101528461795313,
    "generation" : 50,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344032096288867,
      "LackOfCohesion" : 0.48651450369331656,
      "MetricsIntensity" : 0.032750759307954964,
      "Density" : 3.1108151305274374
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1256aaad-494d-473d-8582-4d92cfb9d0aa",
    "objectives" : {
      "NumberOfConcerns" : 1.0030778701138812,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.48752238348074556,
      "MetricsIntensity" : 0.03274952740327158,
      "Density" : 1.0
    },
    "euclideanDistance" : 11.101572673250041,
    "generation" : 46,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6344032096288867,
      "LackOfCohesion" : 0.48752238348074556,
      "MetricsIntensity" : 0.03274952740327158,
      "Density" : 3.110815130527437
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "5ff500e4-a544-4ee5-b0a3-3542f6fda838",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.4894759686531321,
      "MetricsIntensity" : 0.03273739287842133,
      "Density" : 1.0003425244048638
    },
    "euclideanDistance" : 11.101578287857684,
    "generation" : 45,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323971915747235,
      "LackOfCohesion" : 0.4894759686531321,
      "MetricsIntensity" : 0.032737392878421326,
      "Density" : 3.1168623265741733
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "104620a4-5424-4a1e-abf9-83cce67de6f3",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.488782611100136,
      "MetricsIntensity" : 0.0327548728674794,
      "Density" : 0.9960609693440657
    },
    "euclideanDistance" : 13.085616160664273,
    "generation" : 50,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6312092323130956,
      "LackOfCohesion" : 0.488782611100136,
      "MetricsIntensity" : 0.0327548728674794,
      "Density" : 3.1084981293425975
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "8cbbc430-ab53-481b-8216-4837fbc65440",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.4871253063656914,
      "MetricsIntensity" : 0.0327353480836478,
      "Density" : 0.9988011645829765
    },
    "euclideanDistance" : 14.079782672099636,
    "generation" : 51,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632898696088265,
      "LackOfCohesion" : 0.4871253063656914,
      "MetricsIntensity" : 0.0327353480836478,
      "Density" : 3.108742004264392
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "8502e146-1e11-49fb-a8f2-814bb3c187a7",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.4865626706995026,
      "MetricsIntensity" : 0.03277435334183077,
      "Density" : 1.0013700976194553
    },
    "euclideanDistance" : 14.079880087379232,
    "generation" : 55,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6322127446061212,
      "LackOfCohesion" : 0.4865626706995026,
      "MetricsIntensity" : 0.03277435334183078,
      "Density" : 3.120064034151548
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "edd6c47a-3aea-4cc8-af77-c87b8d050847",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.48569928078908287,
      "MetricsIntensity" : 0.03277199232407308,
      "Density" : 0.9989724267854084
    },
    "euclideanDistance" : 15.074395096193214,
    "generation" : 54,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6322127446061212,
      "LackOfCohesion" : 0.48569928078908287,
      "MetricsIntensity" : 0.03277199232407308,
      "Density" : 3.110933333333332
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "ef5f15cf-f341-4e4a-aa03-b47f0295a740",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.48676742853311583,
      "MetricsIntensity" : 0.03275379522069194,
      "Density" : 1.002397670834047
    },
    "euclideanDistance" : 16.070050195490825,
    "generation" : 38,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633216256899147,
      "LackOfCohesion" : 0.48676742853311583,
      "MetricsIntensity" : 0.03275379522069194,
      "Density" : 3.1199360341151388
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "67b2d693-fcaa-44e7-a2b6-d65c5441f802",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.4890128238936708,
      "MetricsIntensity" : 0.0327287237233436,
      "Density" : 1.0020551464291831
    },
    "euclideanDistance" : 16.07015454397809,
    "generation" : 46,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6339017051153464,
      "LackOfCohesion" : 0.4890128238936708,
      "MetricsIntensity" : 0.0327287237233436,
      "Density" : 3.1188699360341143
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "258ae145-5927-4a51-b6cd-7f990d83c103",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.48795822289468244,
      "MetricsIntensity" : 0.032766742346103016,
      "Density" : 1.000171262202432
    },
    "euclideanDistance" : 17.065777186152616,
    "generation" : 57,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6312092323130956,
      "LackOfCohesion" : 0.48795822289468244,
      "MetricsIntensity" : 0.032766742346103016,
      "Density" : 3.11965811965812
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7fd64447-cf40-41d0-9106-c7d70261059c",
    "objectives" : {
      "NumberOfConcerns" : 1.0033856571252693,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.48663094274503094,
      "MetricsIntensity" : 0.032662574807266566,
      "Density" : 0.9994862133927043
    },
    "euclideanDistance" : 17.065861595182255,
    "generation" : 45,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6349047141424278,
      "LackOfCohesion" : 0.48663094274503094,
      "MetricsIntensity" : 0.032662574807266566,
      "Density" : 3.1092168353756
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1b2e0428-82fe-40e7-ad4b-7032b5612a01",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.4858012911427434,
      "MetricsIntensity" : 0.032768907911776814,
      "Density" : 1.0018838842267512
    },
    "euclideanDistance" : 17.06587027525142,
    "generation" : 55,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327145007526345,
      "LackOfCohesion" : 0.4858012911427434,
      "MetricsIntensity" : 0.03276890791177682,
      "Density" : 3.1183368869936032
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "33368cdd-1c5b-4875-9e37-ac70113c528e",
    "objectives" : {
      "NumberOfConcerns" : 1.002462296091105,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.4889520868748611,
      "MetricsIntensity" : 0.03264851125668279,
      "Density" : 1.0005137866072957
    },
    "euclideanDistance" : 17.06593386137489,
    "generation" : 39,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6334002006018054,
      "LackOfCohesion" : 0.4889520868748611,
      "MetricsIntensity" : 0.03264851125668279,
      "Density" : 3.115733333333333
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "49811a8b-10c3-4f74-9b99-32248ab1f7cd",
    "objectives" : {
      "NumberOfConcerns" : 1.0021545090797168,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.486586885113577,
      "MetricsIntensity" : 0.03267227485105361,
      "Density" : 0.9982873779756808
    },
    "euclideanDistance" : 18.062079770153904,
    "generation" : 49,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6337180130456601,
      "LackOfCohesion" : 0.486586885113577,
      "MetricsIntensity" : 0.03267227485105361,
      "Density" : 3.1087999999999996
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "90f2f570-50b6-4128-8a37-326318103ec3",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.4858902597679485,
      "MetricsIntensity" : 0.03279186329261283,
      "Density" : 1.0010275732145915
    },
    "euclideanDistance" : 18.062110522359426,
    "generation" : 54,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631526104417671,
      "LackOfCohesion" : 0.4858902597679485,
      "MetricsIntensity" : 0.03279186329261283,
      "Density" : 3.1189967982924234
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7f87b290-4ff3-4c37-b200-782b3ec7f182",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.48510552960787423,
      "MetricsIntensity" : 0.03278641486562433,
      "Density" : 0.997602329165953
    },
    "euclideanDistance" : 19.05865232380739,
    "generation" : 56,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6315261044176708,
      "LackOfCohesion" : 0.48510552960787423,
      "MetricsIntensity" : 0.03278641486562432,
      "Density" : 3.109983982915109
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "2dcae83e-3c70-4a5d-a031-6fe408682a54",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.4872784750151397,
      "MetricsIntensity" : 0.03275845326609988,
      "Density" : 1.0006850488097276
    },
    "euclideanDistance" : 19.058885474296805,
    "generation" : 54,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6320281124497995,
      "LackOfCohesion" : 0.4872784750151397,
      "MetricsIntensity" : 0.03275845326609987,
      "Density" : 3.117929562433298
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "f5e4461b-aedf-438d-80c6-2ac99a9cd42d",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.4897217315296648,
      "MetricsIntensity" : 0.03266722642830506,
      "Density" : 0.9996574755951362
    },
    "euclideanDistance" : 19.05895869256889,
    "generation" : 41,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323971915747235,
      "LackOfCohesion" : 0.4897217315296648,
      "MetricsIntensity" : 0.032667226428305066,
      "Density" : 3.114727854855924
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7bd5a868-d235-42e9-9b5f-8e0b616e4e6f",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.4877884662363156,
      "MetricsIntensity" : 0.03266771473823665,
      "Density" : 1.0020551464291831
    },
    "euclideanDistance" : 19.059083585614236,
    "generation" : 50,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634721525338686,
      "LackOfCohesion" : 0.4877884662363156,
      "MetricsIntensity" : 0.03266771473823665,
      "Density" : 3.1188699360341143
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "40a943ed-ac8c-4e67-bf37-2de0fd365dca",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.48741418520575114,
      "MetricsIntensity" : 0.03280347477684258,
      "Density" : 0.9953759205343381
    },
    "euclideanDistance" : 20.05558142705626,
    "generation" : 56,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629331993972878,
      "LackOfCohesion" : 0.48741418520575114,
      "MetricsIntensity" : 0.03280347477684258,
      "Density" : 3.11134903640257
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "53e61ca2-c1eb-4dab-948f-b2b40dd26a3f",
    "objectives" : {
      "NumberOfConcerns" : 1.0009233610341643,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.48529853539981566,
      "MetricsIntensity" : 0.032704936061847704,
      "Density" : 0.9986299023805446
    },
    "euclideanDistance" : 21.053163504278793,
    "generation" : 52,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632530120481927,
      "LackOfCohesion" : 0.48529853539981566,
      "MetricsIntensity" : 0.032704936061847704,
      "Density" : 3.1115261472785485
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "294317bc-93c6-4acc-a45b-761b8d956a62",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.4882813601166331,
      "MetricsIntensity" : 0.03266594235595993,
      "Density" : 1.000171262202432
    },
    "euclideanDistance" : 21.053334855613684,
    "generation" : 51,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327145007526345,
      "LackOfCohesion" : 0.4882813601166331,
      "MetricsIntensity" : 0.03266594235595993,
      "Density" : 3.114666666666667
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "21d83236-865c-407f-b2c4-b88cafd30b26",
    "objectives" : {
      "NumberOfConcerns" : 0.9996922129886119,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.4891799343773098,
      "MetricsIntensity" : 0.032703829104357596,
      "Density" : 0.9948621339270423
    },
    "euclideanDistance" : 22.05061227573664,
    "generation" : 48,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.630522088353413,
      "LackOfCohesion" : 0.4891799343773098,
      "MetricsIntensity" : 0.032703829104357596,
      "Density" : 3.106417112299465
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "35714875-dc4d-4c58-b509-7b7c66be41bb",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.4861271295415634,
      "MetricsIntensity" : 0.03269983398963109,
      "Density" : 0.9972598047610892
    },
    "euclideanDistance" : 22.05072288600145,
    "generation" : 55,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330321285140552,
      "LackOfCohesion" : 0.4861271295415634,
      "MetricsIntensity" : 0.03269983398963109,
      "Density" : 3.10891617725574
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "91cd4535-b64c-4f41-a997-8711f038db1e",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.4860704557988687,
      "MetricsIntensity" : 0.032697125317697105,
      "Density" : 0.9969172803562254
    },
    "euclideanDistance" : 23.048479541628215,
    "generation" : 48,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632028112449799,
      "LackOfCohesion" : 0.4860704557988687,
      "MetricsIntensity" : 0.032697125317697105,
      "Density" : 3.1078483715963703
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "b319f075-e8f2-465d-9e41-8a4b96ed38de",
    "objectives" : {
      "NumberOfConcerns" : 1.0018467220683287,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.48908657952746304,
      "MetricsIntensity" : 0.03265022649865991,
      "Density" : 1.0003425244048638
    },
    "euclideanDistance" : 23.048745166282178,
    "generation" : 45,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332162568991473,
      "LackOfCohesion" : 0.48908657952746304,
      "MetricsIntensity" : 0.03265022649865991,
      "Density" : 3.1168623265741733
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "78304e6b-981f-427a-b13d-968b1113327a",
    "objectives" : {
      "NumberOfConcerns" : 1.002770083102493,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.48765341423291153,
      "MetricsIntensity" : 0.03266395162071236,
      "Density" : 1.0017126220243193
    },
    "euclideanDistance" : 23.048814477166427,
    "generation" : 56,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347215253386866,
      "LackOfCohesion" : 0.48765341423291153,
      "MetricsIntensity" : 0.03266395162071236,
      "Density" : 3.117803837953092
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "e2fefda0-277a-463d-b9d7-827363bd04fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.4874439818183531,
      "MetricsIntensity" : 0.03281796167407756,
      "Density" : 0.9946908717246103
    },
    "euclideanDistance" : 24.04627143768928,
    "generation" : 51,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6286432160804023,
      "LackOfCohesion" : 0.4874439818183531,
      "MetricsIntensity" : 0.03281796167407756,
      "Density" : 3.1092077087794427
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "36a4bcb7-5f10-41a8-907b-8d1fd3a74c0e",
    "objectives" : {
      "NumberOfConcerns" : 0.9993844259772238,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.4860260410076083,
      "MetricsIntensity" : 0.03270685506996323,
      "Density" : 0.9957184449392019
    },
    "euclideanDistance" : 24.046361793489343,
    "generation" : 50,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6308387744851827,
      "LackOfCohesion" : 0.4860260410076083,
      "MetricsIntensity" : 0.03270685506996323,
      "Density" : 3.107429182255478
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "666d6720-62f7-4bce-90a6-faebff24d9b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.4873387167106973,
      "MetricsIntensity" : 0.032777204605085854,
      "Density" : 0.9948621339270423
    },
    "euclideanDistance" : 25.044576016520733,
    "generation" : 50,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6322127446061212,
      "LackOfCohesion" : 0.4873387167106973,
      "MetricsIntensity" : 0.032777204605085854,
      "Density" : 3.10144153764015
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "3f6f6ee6-f381-460b-9df2-059f3c9f69f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.4869586720283067,
      "MetricsIntensity" : 0.03268140081105348,
      "Density" : 0.9974310669635211
    },
    "euclideanDistance" : 25.044682984497957,
    "generation" : 52,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6335341365461846,
      "LackOfCohesion" : 0.4869586720283067,
      "MetricsIntensity" : 0.03268140081105348,
      "Density" : 3.1094500800854252
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0333449d-bf92-43fc-aba9-b14f7ac9575d",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.4869586720283066,
      "MetricsIntensity" : 0.03268140081105351,
      "Density" : 0.9974310669635211
    },
    "euclideanDistance" : 25.044682984497957,
    "generation" : 44,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633534136546185,
      "LackOfCohesion" : 0.4869586720283066,
      "MetricsIntensity" : 0.03268140081105351,
      "Density" : 3.109450080085425
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "008d6591-5444-4ef3-918f-a78c187b2333",
    "objectives" : {
      "NumberOfConcerns" : 1.0012311480455525,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.48834735737222823,
      "MetricsIntensity" : 0.032656942725230224,
      "Density" : 1.0005137866072957
    },
    "euclideanDistance" : 25.04482064751849,
    "generation" : 40,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330321285140559,
      "LackOfCohesion" : 0.48834735737222823,
      "MetricsIntensity" : 0.032656942725230224,
      "Density" : 3.119060331019755
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "acc9b3fe-d1b1-47f8-9358-2b2b35ae8e45",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.48571117339606334,
      "MetricsIntensity" : 0.03279865413694825,
      "Density" : 0.9965747559513616
    },
    "euclideanDistance" : 26.042816792167503,
    "generation" : 57,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303365143144148,
      "LackOfCohesion" : 0.48571117339606334,
      "MetricsIntensity" : 0.03279865413694824,
      "Density" : 3.111764705882353
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1dbf726e-a9a9-4fcc-b9a3-d2bce7ebde0c",
    "objectives" : {
      "NumberOfConcerns" : 1.0006155740227762,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.4846614802693508,
      "MetricsIntensity" : 0.03288620571235061,
      "Density" : 0.9988011645829765
    },
    "euclideanDistance" : 26.042941722208194,
    "generation" : 47,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632847815168257,
      "LackOfCohesion" : 0.4846614802693508,
      "MetricsIntensity" : 0.032886205712350604,
      "Density" : 3.112059765208111
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "075402e6-4b95-4411-8665-3fbc60832350",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.48481860724782266,
      "MetricsIntensity" : 0.032739571323534486,
      "Density" : 0.9964034937489296
    },
    "euclideanDistance" : 27.04119967944199,
    "generation" : 49,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6306532663316589,
      "LackOfCohesion" : 0.48481860724782266,
      "MetricsIntensity" : 0.03273957132353449,
      "Density" : 3.109567076429717
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "d64b55e0-ea4a-454c-badf-99a2915482ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.48481860724782283,
      "MetricsIntensity" : 0.03273957132353448,
      "Density" : 0.9964034937489296
    },
    "euclideanDistance" : 27.04119967944199,
    "generation" : 56,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6306532663316582,
      "LackOfCohesion" : 0.48481860724782283,
      "MetricsIntensity" : 0.03273957132353448,
      "Density" : 3.109567076429717
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "2759fdf2-1027-481e-a4fd-8ebe0fbd0212",
    "objectives" : {
      "NumberOfConcerns" : 0.9993844259772238,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.48559514357348527,
      "MetricsIntensity" : 0.032724887170467655,
      "Density" : 0.9981161157732489
    },
    "euclideanDistance" : 27.041299498603145,
    "generation" : 52,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631658291457287,
      "LackOfCohesion" : 0.48559514357348527,
      "MetricsIntensity" : 0.032724887170467655,
      "Density" : 3.1115856914041644
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "73af9e13-91c7-47eb-8ea3-3404c66e48c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0015389350569406,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.4842104063260796,
      "MetricsIntensity" : 0.03280123265244649,
      "Density" : 0.9989724267854084
    },
    "euclideanDistance" : 28.039910160098064,
    "generation" : 38,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6343545956805623,
      "LackOfCohesion" : 0.4842104063260796,
      "MetricsIntensity" : 0.0328012326524465,
      "Density" : 3.112593383137673
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AccountExpiredException'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "1eaf3cc8-829f-467c-913e-fa857baa5520",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.48916979287647455,
      "MetricsIntensity" : 0.03281749371474342,
      "Density" : 0.9914368898784038
    },
    "euclideanDistance" : 29.038254694092334,
    "generation" : 55,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6285140562248992,
      "LackOfCohesion" : 0.48916979287647455,
      "MetricsIntensity" : 0.03281749371474343,
      "Density" : 3.1006963042313873
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "b7c40168-18fd-49fa-ab79-2bacf49cb0ec",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.48556564276721653,
      "MetricsIntensity" : 0.0329263345242531,
      "Density" : 0.9957184449392019
    },
    "euclideanDistance" : 30.037064401448095,
    "generation" : 55,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6301507537688438,
      "LackOfCohesion" : 0.48556564276721653,
      "MetricsIntensity" : 0.0329263345242531,
      "Density" : 3.110754414125201
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "ed85946a-1dae-44b4-aee2-c8e986b66ef9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.48531032485274,
      "MetricsIntensity" : 0.03270192592755392,
      "Density" : 0.9982873779756808
    },
    "euclideanDistance" : 30.037206742391163,
    "generation" : 52,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323455549974888,
      "LackOfCohesion" : 0.48531032485274,
      "MetricsIntensity" : 0.03270192592755392,
      "Density" : 3.1104589114194234
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "40d7b20d-b244-4951-8a76-1e6da9d5d51c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.48771790259071435,
      "MetricsIntensity" : 0.0326878391442324,
      "Density" : 0.9996574755951362
    },
    "euclideanDistance" : 30.03728104066426,
    "generation" : 51,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63184329482672,
      "LackOfCohesion" : 0.48771790259071435,
      "MetricsIntensity" : 0.03268783914423241,
      "Density" : 3.1163908168713284
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0cf7e72d-6f8f-45a5-931a-c53cca32b4ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.4867787006130949,
      "MetricsIntensity" : 0.03281190038539859,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 31.03577935897403,
    "generation" : 53,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6293319939728779,
      "LackOfCohesion" : 0.4867787006130949,
      "MetricsIntensity" : 0.03281190038539859,
      "Density" : 3.100053504547886
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "4e3e9f00-30c8-4296-b1c7-6f33c500d142",
    "objectives" : {
      "NumberOfConcerns" : 1.0009233610341643,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.4875606470196821,
      "MetricsIntensity" : 0.03269167425109592,
      "Density" : 0.9967460181537935
    },
    "euclideanDistance" : 31.036013505755808,
    "generation" : 52,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6317109884596084,
      "LackOfCohesion" : 0.4875606470196821,
      "MetricsIntensity" : 0.03269167425109592,
      "Density" : 3.1089743589743595
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.lastUseDate], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid(), jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "fb13d5d5-a9a2-4985-9e5a-fa9e1e6c36db",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.4863422484120459,
      "MetricsIntensity" : 0.03291869906662325,
      "Density" : 0.9945196095221784
    },
    "euclideanDistance" : 32.03468665656367,
    "generation" : 57,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6289592760180995,
      "LackOfCohesion" : 0.4863422484120459,
      "MetricsIntensity" : 0.03291869906662325,
      "Density" : 3.110337439742902
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "921f9ae9-bcae-4709-8592-5d32279efdee",
    "objectives" : {
      "NumberOfConcerns" : 1.0009233610341643,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.4840760188706569,
      "MetricsIntensity" : 0.03280123265244648,
      "Density" : 0.9986299023805446
    },
    "euclideanDistance" : 32.034895267028766,
    "generation" : 52,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633350075339026,
      "LackOfCohesion" : 0.4840760188706569,
      "MetricsIntensity" : 0.03280123265244648,
      "Density" : 3.111526147278549
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "b6675510-18f9-4bc7-81b8-9103a18c3918",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.48822618545815705,
      "MetricsIntensity" : 0.03279686031087746,
      "Density" : 0.9917794142832677
    },
    "euclideanDistance" : 33.03361910761545,
    "generation" : 54,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629331993972878,
      "LackOfCohesion" : 0.48822618545815705,
      "MetricsIntensity" : 0.03279686031087745,
      "Density" : 3.101767541510444
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "1851d6b5-50ea-4900-b441-a7bfdeddeb1a",
    "objectives" : {
      "NumberOfConcerns" : 0.9996922129886119,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.4868658537599248,
      "MetricsIntensity" : 0.03270913869880105,
      "Density" : 0.9924644630929954
    },
    "euclideanDistance" : 33.033656753053,
    "generation" : 51,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.630522088353414,
      "LackOfCohesion" : 0.4868658537599248,
      "MetricsIntensity" : 0.032709138698801044,
      "Density" : 3.100588550026752
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "0a6f9461-ebce-41dd-935c-1cfb9dd94af6",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.4878764531673845,
      "MetricsIntensity" : 0.032732370133769235,
      "Density" : 0.9945196095221784
    },
    "euclideanDistance" : 33.033668363747516,
    "generation" : 53,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6294620412267473,
      "LackOfCohesion" : 0.4878764531673845,
      "MetricsIntensity" : 0.03273237013376923,
      "Density" : 3.110337439742902
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "4370dece-ba0f-441a-b0bf-7d69dc86dde9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003077870113881,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.48765011352877397,
      "MetricsIntensity" : 0.03270608367209519,
      "Density" : 0.9924644630929954
    },
    "euclideanDistance" : 33.0336869528727,
    "generation" : 51,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631526104417671,
      "LackOfCohesion" : 0.48765011352877397,
      "MetricsIntensity" : 0.03270608367209519,
      "Density" : 3.0989304812834226
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.authentication], extractedMethods=[org.acegisecurity.AuthenticationException.getAuthentication(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "268adc3c-a8dc-4e05-9e25-67be639d00f9",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.4884616105676935,
      "MetricsIntensity" : 0.03284864325753281,
      "Density" : 0.9905805788662442
    },
    "euclideanDistance" : 34.03256368786731,
    "generation" : 53,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6281407035175883,
      "LackOfCohesion" : 0.4884616105676935,
      "MetricsIntensity" : 0.03284864325753281,
      "Density" : 3.1013404825737267
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "a41cbfc8-8253-4968-bb98-02744d2778b9",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.48434329777127305,
      "MetricsIntensity" : 0.03280671527560113,
      "Density" : 0.9984586401781127
    },
    "euclideanDistance" : 34.0328162861496,
    "generation" : 37,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.632663316582915,
      "LackOfCohesion" : 0.48434329777127305,
      "MetricsIntensity" : 0.03280671527560113,
      "Density" : 3.112653497063535
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "7396e490-8f88-4c0b-900c-b93371592b59",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.4900673599242103,
      "MetricsIntensity" : 0.03281249738879754,
      "Density" : 0.9912656276759719
    },
    "euclideanDistance" : 35.03170221653675,
    "generation" : 45,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6288297338021092,
      "LackOfCohesion" : 0.4900673599242103,
      "MetricsIntensity" : 0.03281249738879753,
      "Density" : 3.100160685591858
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners, hudson.model.Hudson.computerListeners], extractedMethods=[hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.getComputerListeners(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.doFieldCheck(String, String, String, String), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.doQuietDown(StaplerResponse), hudson.model.Hudson.getInstance(), hudson.model.Hudson.doLogRss(StaplerRequest, StaplerResponse), hudson.model.Hudson.getJob(String), hudson.model.Hudson.getJobCaseInsensitive(String), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.isWindows()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "3da1a33d-c10a-40ca-b5c4-e0ee8678fe6a",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.48441831755616926,
      "MetricsIntensity" : 0.03283772172930831,
      "Density" : 0.9962322315464976
    },
    "euclideanDistance" : 35.031782102844254,
    "generation" : 54,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314731020613373,
      "LackOfCohesion" : 0.48441831755616926,
      "MetricsIntensity" : 0.03283772172930831,
      "Density" : 3.1106951871657764
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "564c81fb-b0cd-4c4a-8131-1b7e48464a52",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.48449239060968674,
      "MetricsIntensity" : 0.0328259990543139,
      "Density" : 0.997944853570817
    },
    "euclideanDistance" : 35.031840637969175,
    "generation" : 40,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6319758672699851,
      "LackOfCohesion" : 0.48449239060968674,
      "MetricsIntensity" : 0.032825999054313895,
      "Density" : 3.112713675213675
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "9064cb51-de17-4581-a55d-10cf9cd69077",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.4861932395090579,
      "MetricsIntensity" : 0.03272662238047944,
      "Density" : 0.9921219386881315
    },
    "euclideanDistance" : 37.029978396683106,
    "generation" : 50,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629834254143647,
      "LackOfCohesion" : 0.4861932395090579,
      "MetricsIntensity" : 0.03272662238047944,
      "Density" : 3.0995184590690212
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c6389ab2-1155-47ed-b82c-60954ea31059",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.4893094832337479,
      "MetricsIntensity" : 0.03283651117297805,
      "Density" : 0.9905805788662442
    },
    "euclideanDistance" : 38.029141531503605,
    "generation" : 37,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6276381909547741,
      "LackOfCohesion" : 0.4893094832337479,
      "MetricsIntensity" : 0.03283651117297805,
      "Density" : 3.1013404825737267
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c6b66548-a807-4843-99d0-7e579b4f848c",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.4846373836720543,
      "MetricsIntensity" : 0.03291407467937332,
      "Density" : 0.9960609693440657
    },
    "euclideanDistance" : 38.02925721271533,
    "generation" : 40,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6304675716440424,
      "LackOfCohesion" : 0.4846373836720543,
      "MetricsIntensity" : 0.03291407467937332,
      "Density" : 3.111824505082932
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "6255bb6c-85f8-4306-8c27-1d906a938451",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.4854582719628405,
      "MetricsIntensity" : 0.03286172354379951,
      "Density" : 0.9952046583319062
    },
    "euclideanDistance" : 39.02847229197951,
    "generation" : 45,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6297786720321936,
      "LackOfCohesion" : 0.4854582719628405,
      "MetricsIntensity" : 0.0328617235437995,
      "Density" : 3.1108137044967874
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "e41e4608-553b-43de-802f-9e7c20c0a1d7",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.48871098302349736,
      "MetricsIntensity" : 0.03270659791849777,
      "Density" : 0.9919506764856996
    },
    "euclideanDistance" : 39.02847714709841,
    "generation" : 42,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303365143144148,
      "LackOfCohesion" : 0.48871098302349736,
      "MetricsIntensity" : 0.03270659791849777,
      "Density" : 3.1006423982869387
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "97409d52-33e2-4059-928f-6fb2cd465e81",
    "objectives" : {
      "NumberOfConcerns" : 0.9984610649430594,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.4854252873392778,
      "MetricsIntensity" : 0.03291664790497822,
      "Density" : 0.993320774105155
    },
    "euclideanDistance" : 40.02774452643783,
    "generation" : 54,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6301507537688433,
      "LackOfCohesion" : 0.4854252873392778,
      "MetricsIntensity" : 0.03291664790497822,
      "Density" : 3.1032637774210805
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "3532b085-b922-4530-9c25-16c7e77173b6",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.4849052673451669,
      "MetricsIntensity" : 0.03291917559522161,
      "Density" : 0.9958897071416338
    },
    "euclideanDistance" : 40.0277713669693,
    "generation" : 34,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6297786720321934,
      "LackOfCohesion" : 0.4849052673451669,
      "MetricsIntensity" : 0.0329191755952216,
      "Density" : 3.112955032119915
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "7e5342ba-18ed-4060-b214-eae097c60ce8",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.48863747449609657,
      "MetricsIntensity" : 0.03285408434740039,
      "Density" : 0.9902380544613804
    },
    "euclideanDistance" : 42.02633021005282,
    "generation" : 50,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6269482151835089,
      "LackOfCohesion" : 0.48863747449609657,
      "MetricsIntensity" : 0.03285408434740039,
      "Density" : 3.100268096514745
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "c18ba7dd-5144-4e7f-92ce-ab10e26eec72",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.48567745890945707,
      "MetricsIntensity" : 0.03293811754598087,
      "Density" : 0.9950333961294743
    },
    "euclideanDistance" : 42.026423820276655,
    "generation" : 42,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.628772635814889,
      "LackOfCohesion" : 0.48567745890945707,
      "MetricsIntensity" : 0.03293811754598087,
      "Density" : 3.1119442956614893
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "2a84ecb2-4157-4c59-97fd-79605370ca29",
    "objectives" : {
      "NumberOfConcerns" : 0.9987688519544475,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.4886146083688104,
      "MetricsIntensity" : 0.03272569055274966,
      "Density" : 0.9926357252954273
    },
    "euclideanDistance" : 43.025837355118384,
    "generation" : 54,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629834254143647,
      "LackOfCohesion" : 0.4886146083688104,
      "MetricsIntensity" : 0.03272569055274966,
      "Density" : 3.099465240641711
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "7abb37a6-5266-44ff-ad63-2270892ab4fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.4864398780914156,
      "MetricsIntensity" : 0.032846157444488135,
      "Density" : 0.9921219386881315
    },
    "euclideanDistance" : 44.02517305246328,
    "generation" : 51,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6276381909547737,
      "LackOfCohesion" : 0.4864398780914156,
      "MetricsIntensity" : 0.032846157444488135,
      "Density" : 3.1011777301927195
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "48950c47-7061-4a51-9a30-9c687b1f1f2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.4878002546176822,
      "MetricsIntensity" : 0.03274408086998407,
      "Density" : 0.9907518410686762
    },
    "euclideanDistance" : 45.024612068784535,
    "generation" : 49,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6286432160804023,
      "LackOfCohesion" : 0.4878002546176822,
      "MetricsIntensity" : 0.03274408086998407,
      "Density" : 3.0985538296732726
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "5a77daab-32d5-47c2-b93f-d174455fe0c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.4883480588400876,
      "MetricsIntensity" : 0.03285909491543081,
      "Density" : 0.9898955300565165
    },
    "euclideanDistance" : 46.02402478313295,
    "generation" : 53,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.626445449974862,
      "LackOfCohesion" : 0.4883480588400876,
      "MetricsIntensity" : 0.03285909491543081,
      "Density" : 3.0991957104557644
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "6b0fd92b-881d-4c66-bf9f-61066fef223d",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.4891550538174244,
      "MetricsIntensity" : 0.032843344403539206,
      "Density" : 0.9900667922589484
    },
    "euclideanDistance" : 48.02304235627555,
    "generation" : 44,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6269482151835095,
      "LackOfCohesion" : 0.4891550538174244,
      "MetricsIntensity" : 0.032843344403539206,
      "Density" : 3.1013948497854082
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Node.holdOffLaunchUntilSave, hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS, hudson.model.Node.temporaryOfflineCause, hudson.model.Node.LOGGER], extractedMethods=[hudson.model.Node.createPath(String), hudson.model.Node.getFileSystemProvisioner(), hudson.model.Node.getClockDifferenceCallable(), hudson.model.Node.getDisplayName(), hudson.model.Node.getNodeName(), hudson.model.Node.toComputer(), hudson.model.Node.setNodeName(String), hudson.model.Node.canTake(Queue.BuildableItem), hudson.model.Node.getACL(), hudson.model.Node.getChannel(), hudson.model.Node.getMode(), hudson.model.Node.getClockDifference(), hudson.model.Node.save(), hudson.model.Node.createComputer(), hudson.model.Node.setTemporaryOfflineCause(OfflineCause), hudson.model.Node.getWorkspaceFor(TopLevelItem), hudson.model.Node.isHoldOffLaunchUntilSave(), hudson.model.Node.getDescriptor(), hudson.model.Node.getRootPath(), hudson.model.Node.reconfigure(StaplerRequest, JSONObject), hudson.model.Node.getNodeDescription(), hudson.model.Node.getSearchUrl(), hudson.model.Node.getNumExecutors(), hudson.model.Node.isAcceptingTasks()]"
      } ]
    } ]
  }, {
    "solutionId" : "6fe3015b-a769-4a6b-8d07-71c610540b18",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.4858709979144241,
      "MetricsIntensity" : 0.03283021777127701,
      "Density" : 0.9929782497002911
    },
    "euclideanDistance" : 48.02311385385622,
    "generation" : 52,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6304675716440424,
      "LackOfCohesion" : 0.4858709979144241,
      "MetricsIntensity" : 0.03283021777127701,
      "Density" : 3.1021936864633495
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "92cdf252-9e22-4e61-8b95-818726f80f51",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.4852436474400418,
      "MetricsIntensity" : 0.03286436465890242,
      "Density" : 0.99109436547354
    },
    "euclideanDistance" : 49.02257299691822,
    "generation" : 43,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6292756539235413,
      "LackOfCohesion" : 0.4852436474400418,
      "MetricsIntensity" : 0.03286436465890242,
      "Density" : 3.101286173633441
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "34361fbb-4ef8-4599-949a-6a654caa914b",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.4872278554550239,
      "MetricsIntensity" : 0.032951798230788074,
      "Density" : 0.9900667922589484
    },
    "euclideanDistance" : 50.02210234091353,
    "generation" : 54,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6277665995975856,
      "LackOfCohesion" : 0.4872278554550239,
      "MetricsIntensity" : 0.032951798230788074,
      "Density" : 3.1013948497854082
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.Hudson.itemListeners], extractedMethods=[hudson.model.Hudson.setSlaves(List<Slave>), hudson.model.Hudson.getJob(String), hudson.model.Hudson.isWindows(), hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse), hudson.model.Hudson.getSlaves(), hudson.model.Hudson.getInstance(), hudson.model.Hudson.getSlave(String), hudson.model.Hudson.getJobListeners(), hudson.model.Hudson.isDarwin(), hudson.model.Hudson.doQuietDown(StaplerResponse)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "770c7004-4324-4db9-9cb8-0f0a05ad9bb0",
    "objectives" : {
      "NumberOfConcerns" : 0.9963065558633426,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.486405674457819,
      "MetricsIntensity" : 0.03292824853662544,
      "Density" : 0.99109436547354
    },
    "euclideanDistance" : 50.02212080214339,
    "generation" : 49,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6282696177062372,
      "LackOfCohesion" : 0.486405674457819,
      "MetricsIntensity" : 0.03292824853662544,
      "Density" : 3.1046137339055786
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "7f1babfe-ebb1-45a7-aaf4-18cf27cccac8",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.4855120132420216,
      "MetricsIntensity" : 0.03286989120031087,
      "Density" : 0.9909231032711081
    },
    "euclideanDistance" : 51.02166936203578,
    "generation" : 44,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6285858077503776,
      "LackOfCohesion" : 0.4855120132420216,
      "MetricsIntensity" : 0.03286989120031087,
      "Density" : 3.10241286863271
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "b6e76352-e9bf-4193-a4e3-a0da09009a98",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.4869274885826594,
      "MetricsIntensity" : 0.0327486767456932,
      "Density" : 0.9957184449392019
    },
    "euclideanDistance" : 51.021812214976336,
    "generation" : 50,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6291457286432158,
      "LackOfCohesion" : 0.4869274885826594,
      "MetricsIntensity" : 0.0327486767456932,
      "Density" : 3.109090909090909
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "6eeb886d-01ed-48cb-8b5f-5d344ba5442d",
    "objectives" : {
      "NumberOfConcerns" : 0.9990766389658357,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.48588395201370677,
      "MetricsIntensity" : 0.032732526373709256,
      "Density" : 0.997773591368385
    },
    "euclideanDistance" : 51.02186649764262,
    "generation" : 52,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303365143144148,
      "LackOfCohesion" : 0.48588395201370677,
      "MetricsIntensity" : 0.032732526373709256,
      "Density" : 3.1105178857447937
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "14f3f72c-fc8e-40ea-beae-32a39839cf29",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.485068093768719,
      "MetricsIntensity" : 0.03275091981287132,
      "Density" : 0.9958897071416338
    },
    "euclideanDistance" : 53.02097561919133,
    "generation" : 53,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6291457286432158,
      "LackOfCohesion" : 0.485068093768719,
      "MetricsIntensity" : 0.03275091981287132,
      "Density" : 3.109625668449198
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "b6b942b3-489a-4a4a-be58-37fec04cce03",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.4862350258907658,
      "MetricsIntensity" : 0.03295990114417716,
      "Density" : 0.9900667922589484
    },
    "euclideanDistance" : 54.02045116101807,
    "generation" : 57,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6272635814889338,
      "LackOfCohesion" : 0.4862350258907658,
      "MetricsIntensity" : 0.03295990114417716,
      "Density" : 3.1013948497854082
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "77fa99ba-4a9b-4c47-806e-46d6dbf6554a",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.48573132144519465,
      "MetricsIntensity" : 0.032945891735171644,
      "Density" : 0.9907518410686762
    },
    "euclideanDistance" : 54.020453508495685,
    "generation" : 45,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6275792652239551,
      "LackOfCohesion" : 0.48573132144519465,
      "MetricsIntensity" : 0.03294589173517164,
      "Density" : 3.1035407725321886
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "0fa1082b-7f97-48c3-8414-b482b00f007f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.4860041620365808,
      "MetricsIntensity" : 0.032832037967873255,
      "Density" : 0.9928069874978592
    },
    "euclideanDistance" : 54.02053336624305,
    "generation" : 54,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6302816901408455,
      "LackOfCohesion" : 0.4860041620365808,
      "MetricsIntensity" : 0.032832037967873255,
      "Density" : 3.1033190578158463
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "db42a15a-8eb4-48c6-b768-51919b9d1be3",
    "objectives" : {
      "NumberOfConcerns" : 0.9966143428747307,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.4861543360283841,
      "MetricsIntensity" : 0.03285135700610571,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 55.020135506876514,
    "generation" : 53,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6295923502767997,
      "LackOfCohesion" : 0.4861543360283841,
      "MetricsIntensity" : 0.032851357006105704,
      "Density" : 3.1033743974290307
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "53ea4a98-de92-4f7a-a7e6-758cb73848e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9963065558633426,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.4875902215208326,
      "MetricsIntensity" : 0.03281887165965685,
      "Density" : 0.9943483473197465
    },
    "euclideanDistance" : 55.02017972245759,
    "generation" : 52,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6274509803921569,
      "LackOfCohesion" : 0.4875902215208326,
      "MetricsIntensity" : 0.03281887165965685,
      "Density" : 3.1114683815648445
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "75f056d2-93aa-4be2-bf61-2c13c5b7b123",
    "objectives" : {
      "NumberOfConcerns" : 0.997229916897507,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.4897159368956833,
      "MetricsIntensity" : 0.03273614523279477,
      "Density" : 0.9936632985100189
    },
    "euclideanDistance" : 55.020202904133455,
    "generation" : 47,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6281407035175883,
      "LackOfCohesion" : 0.4897159368956833,
      "MetricsIntensity" : 0.03273614523279477,
      "Density" : 3.107659346545259
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "cf2b31c3-e2b9-4aab-8ce8-4ec889d82e76",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.4865039391637693,
      "MetricsIntensity" : 0.032964848606299994,
      "Density" : 0.9898955300565165
    },
    "euclideanDistance" : 56.01970393124098,
    "generation" : 30,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.626572722697534,
      "LackOfCohesion" : 0.4865039391637693,
      "MetricsIntensity" : 0.032964848606299994,
      "Density" : 3.1025228126677393
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "9095c61f-f947-4c71-9f3e-88caecbc0f84",
    "objectives" : {
      "NumberOfConcerns" : 0.9978454909202832,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.48680154554647337,
      "MetricsIntensity" : 0.03273970525386414,
      "Density" : 0.9972598047610892
    },
    "euclideanDistance" : 56.019891738336916,
    "generation" : 50,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6299648064353949,
      "LackOfCohesion" : 0.48680154554647337,
      "MetricsIntensity" : 0.03273970525386413,
      "Density" : 3.113903743315507
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "2822a1a3-8058-470a-a27c-5f538b497f51",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.48685279917019564,
      "MetricsIntensity" : 0.032881776906738755,
      "Density" : 0.9897242678540846
    },
    "euclideanDistance" : 57.01937443989552,
    "generation" : 52,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6280825364871665,
      "LackOfCohesion" : 0.48685279917019564,
      "MetricsIntensity" : 0.032881776906738755,
      "Density" : 3.100321888412017
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "e08b935a-8c31-4752-9b03-dedf5245cebc",
    "objectives" : {
      "NumberOfConcerns" : 0.9950754078177901,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.48801546724814543,
      "MetricsIntensity" : 0.03294596862488953,
      "Density" : 0.9897242678540846
    },
    "euclideanDistance" : 58.01903975184996,
    "generation" : 54,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.627075993960745,
      "LackOfCohesion" : 0.48801546724814543,
      "MetricsIntensity" : 0.03294596862488952,
      "Density" : 3.1036519871106347
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "97e8180a-8aea-4524-8681-b155911e3c63",
    "objectives" : {
      "NumberOfConcerns" : 0.9969221298861188,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.4880816695289453,
      "MetricsIntensity" : 0.03274579888287469,
      "Density" : 0.9953759205343381
    },
    "euclideanDistance" : 58.01916858211354,
    "generation" : 50,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.628456510809452,
      "LackOfCohesion" : 0.4880816695289453,
      "MetricsIntensity" : 0.03274579888287469,
      "Density" : 3.1113490364025695
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "dd920b2f-639e-48c5-bbd4-1e2f34ee3f5e",
    "objectives" : {
      "NumberOfConcerns" : 0.9981532779316713,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.48600467424427457,
      "MetricsIntensity" : 0.032745131350795265,
      "Density" : 0.9970885425586573
    },
    "euclideanDistance" : 59.018876372860255,
    "generation" : 53,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6304675716440422,
      "LackOfCohesion" : 0.48600467424427457,
      "MetricsIntensity" : 0.032745131350795265,
      "Density" : 3.1117049706039555
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "6801f14f-8ec7-4281-86e3-37dbd5f07516",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.4882773387711933,
      "MetricsIntensity" : 0.03276298459687993,
      "Density" : 0.9934920363075869
    },
    "euclideanDistance" : 60.018479780233044,
    "generation" : 48,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6272635814889342,
      "LackOfCohesion" : 0.4882773387711933,
      "MetricsIntensity" : 0.03276298459687993,
      "Density" : 3.1104557640750667
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "a056a21d-a601-4c58-9db7-06fd84de3cc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.48650417528252554,
      "MetricsIntensity" : 0.03288022783047712,
      "Density" : 0.9941770851173146
    },
    "euclideanDistance" : 61.01816895977025,
    "generation" : 52,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.626760563380282,
      "LackOfCohesion" : 0.48650417528252554,
      "MetricsIntensity" : 0.03288022783047713,
      "Density" : 3.110932475884245
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.getDefinition(), hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.getValue()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "338d5f10-32a6-4d82-b3df-f07943d2e235",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.48734163076770076,
      "MetricsIntensity" : 0.03296363135037491,
      "Density" : 0.9893817434492208
    },
    "euclideanDistance" : 62.0177861826143,
    "generation" : 50,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6263846928499497,
      "LackOfCohesion" : 0.48734163076770076,
      "MetricsIntensity" : 0.03296363135037492,
      "Density" : 3.1025778732545652
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='hudson.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.model.AbstractCIBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSelfLabel()', targetType='hudson.model.labels.LabelAtom'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.model.Computer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getAssignedLabels()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='hudson.model.Saveable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.FileSystemProvisioner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDynamicLabels()', targetType='hudson.model.LabelFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.model.Jenkins'"
      } ]
    } ]
  }, {
    "solutionId" : "95c5ea56-306b-43de-bf00-f5c9f24f193c",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.4868314007322279,
      "MetricsIntensity" : 0.032761912040662186,
      "Density" : 0.9940058229148827
    },
    "euclideanDistance" : 62.01787575720533,
    "generation" : 53,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6275792652239558,
      "LackOfCohesion" : 0.4868314007322279,
      "MetricsIntensity" : 0.032761912040662186,
      "Density" : 3.1103965702036427
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "68cfcb8d-44eb-4151-b5aa-34672c9c1b84",
    "objectives" : {
      "NumberOfConcerns" : 0.9950754078177901,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.4884965254226657,
      "MetricsIntensity" : 0.032839751319310204,
      "Density" : 0.993320774105155
    },
    "euclideanDistance" : 63.01758935830638,
    "generation" : 49,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6262575452716295,
      "LackOfCohesion" : 0.4884965254226657,
      "MetricsIntensity" : 0.032839751319310204,
      "Density" : 3.1115879828326185
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "e4c6ce6e-b402-42c7-a75f-7b74a9dddcc5",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.48760401868589415,
      "MetricsIntensity" : 0.0327805365901614,
      "Density" : 0.993149511902723
    },
    "euclideanDistance" : 64.01730032432651,
    "generation" : 51,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.626572722697534,
      "LackOfCohesion" : 0.48760401868589415,
      "MetricsIntensity" : 0.0327805365901614,
      "Density" : 3.1093833780160853
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "ec961eff-d0c5-4da4-85bc-f82c718f8677",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.4867430888677496,
      "MetricsIntensity" : 0.03277641837710126,
      "Density" : 0.9905805788662442
    },
    "euclideanDistance" : 65.01700744081462,
    "generation" : 49,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6269482151835093,
      "LackOfCohesion" : 0.4867430888677496,
      "MetricsIntensity" : 0.03277641837710126,
      "Density" : 3.09967845659164
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "f08c6511-2715-47f3-95af-15d83fdc8f82",
    "objectives" : {
      "NumberOfConcerns" : 0.9975377039088951,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.4890675034499467,
      "MetricsIntensity" : 0.03273920052796708,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 65.0170745738797,
    "generation" : 46,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6286432160804023,
      "LackOfCohesion" : 0.4890675034499467,
      "MetricsIntensity" : 0.03273920052796708,
      "Density" : 3.101713062098501
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "26f421b4-df70-435f-a55b-d69c30ae4704",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.4878233263013021,
      "MetricsIntensity" : 0.032857345678332546,
      "Density" : 0.9929782497002911
    },
    "euclideanDistance" : 67.01651583974916,
    "generation" : 40,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255661801711119,
      "LackOfCohesion" : 0.4878233263013021,
      "MetricsIntensity" : 0.03285734567833254,
      "Density" : 3.1105150214592268
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.ParameterValue.LOGGER, hudson.model.ParameterValue.description], extractedMethods=[hudson.model.ParameterValue.getShortDescription(), hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars), hudson.model.ParameterValue.equals(Object), hudson.model.ParameterValue.getAssignedLabel(SubTask), hudson.model.ParameterValue.getDescription(), hudson.model.ParameterValue.isSensitive(), hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>), hudson.model.ParameterValue.getValue(), hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars), hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>), hudson.model.ParameterValue.setDescription(String), hudson.model.ParameterValue.getFormattedDescription(), hudson.model.ParameterValue.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "6dafe87d-3977-4b22-aba7-bf7a5ac97070",
    "objectives" : {
      "NumberOfConcerns" : 0.9956909818405664,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.48611749558429024,
      "MetricsIntensity" : 0.03278504286824997,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 68.01627328372527,
    "generation" : 51,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.627263581488934,
      "LackOfCohesion" : 0.48611749558429024,
      "MetricsIntensity" : 0.03278504286824997,
      "Density" : 3.1033743974290315
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "7b449a94-529b-4630-b5ca-a9a7359d9027",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.48853001821492703,
      "MetricsIntensity" : 0.03281117855952907,
      "Density" : 0.9890392190443569
    },
    "euclideanDistance" : 70.01576170470457,
    "generation" : 53,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6252515090543258,
      "LackOfCohesion" : 0.48853001821492703,
      "MetricsIntensity" : 0.03281117855952907,
      "Density" : 3.098175965665237
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "9ff39ae5-ed09-4829-b33a-ddaefeb59620",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.48631218883056576,
      "MetricsIntensity" : 0.03280225972447341,
      "Density" : 0.9904093166638123
    },
    "euclideanDistance" : 70.0157656282413,
    "generation" : 46,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6260694514343235,
      "LackOfCohesion" : 0.48631218883056576,
      "MetricsIntensity" : 0.03280225972447341,
      "Density" : 3.1024678111587987
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "9d22742c-7c59-4ba6-88d4-6a912c2c7b0d",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.487733920447619,
      "MetricsIntensity" : 0.03287379016919279,
      "Density" : 0.9895530056516527
    },
    "euclideanDistance" : 70.015767815783,
    "generation" : 54,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.624937154348919,
      "LackOfCohesion" : 0.487733920447619,
      "MetricsIntensity" : 0.03287379016919279,
      "Density" : 3.0997854077253226
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.cli.CLI.ClientSideImpl.exit, hudson.cli.CLI.ClientSideImpl.complete], extractedMethods=[hudson.cli.CLI.ClientSideImpl.exit(), hudson.cli.CLI.ClientSideImpl.onExit(int), hudson.cli.CLI.ClientSideImpl.finished()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "9c8c2cbb-509f-4e33-af2b-276e3e810f8f",
    "objectives" : {
      "NumberOfConcerns" : 0.9944598337950139,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.48626254355342524,
      "MetricsIntensity" : 0.032873453307314546,
      "Density" : 0.9900667922589484
    },
    "euclideanDistance" : 71.01553854290877,
    "generation" : 42,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6252515090543265,
      "LackOfCohesion" : 0.48626254355342524,
      "MetricsIntensity" : 0.03287345330731454,
      "Density" : 3.1013948497854082
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "72c969cc-12a3-42ae-81ce-4e28c1c74b77",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.4871118044648618,
      "MetricsIntensity" : 0.03282818647509481,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 72.01531247775162,
    "generation" : 53,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255661801711119,
      "LackOfCohesion" : 0.4871118044648618,
      "MetricsIntensity" : 0.03282818647509481,
      "Density" : 3.100375738056898
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "7f4f275f-34b0-44e8-8968-59bd85d9c2ba",
    "objectives" : {
      "NumberOfConcerns" : 0.994767620806402,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.4893374583080813,
      "MetricsIntensity" : 0.03279541936009641,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 72.01533605200525,
    "generation" : 51,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6257545271629774,
      "LackOfCohesion" : 0.4893374583080813,
      "MetricsIntensity" : 0.03279541936009641,
      "Density" : 3.100375738056898
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "df6baa8b-aef2-44e1-853e-aa3235f60197",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.4880459502936883,
      "MetricsIntensity" : 0.03289287482336551,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 73.01510483851752,
    "generation" : 50,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6242454728370224,
      "LackOfCohesion" : 0.4880459502936883,
      "MetricsIntensity" : 0.03289287482336551,
      "Density" : 3.100375738056898
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.labels.LabelExpression.rhs, hudson.model.labels.LabelExpression.lhs], extractedMethods=[hudson.model.labels.LabelExpression.validate(String), hudson.model.labels.LabelExpression.validate(String, Item), hudson.model.labels.LabelExpression.autoComplete(String), hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.AsyncAperiodicWork.getSlowLoggingLevel(), hudson.model.AsyncAperiodicWork.getNormalLoggingLevel(), hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "4978f2ca-7d02-46d5-ba22-6b4cb3efad7a",
    "objectives" : {
      "NumberOfConcerns" : 0.9959987688519545,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.486803896270691,
      "MetricsIntensity" : 0.03276451745889061,
      "Density" : 0.9922932008905635
    },
    "euclideanDistance" : 73.01516767693626,
    "generation" : 37,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6277665995975856,
      "LackOfCohesion" : 0.486803896270691,
      "MetricsIntensity" : 0.03276451745889062,
      "Density" : 3.103374397429031
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "2857590e-f9e7-4880-b3cd-bbdfd43cb722",
    "objectives" : {
      "NumberOfConcerns" : 0.9953831948291783,
      "NumberOfRefactorings" : 74.0,
      "LackOfCohesion" : 0.48698150935548007,
      "MetricsIntensity" : 0.032790908633289324,
      "Density" : 0.9914368898784038
    },
    "euclideanDistance" : 74.01494417376334,
    "generation" : 46,
    "numberOfRefactorings" : 74,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6275792652239556,
      "LackOfCohesion" : 0.48698150935548007,
      "MetricsIntensity" : 0.032790908633289324,
      "Density" : 3.102357984994642
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.tokenUuid, jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.COMP_BY_LAST_USE_THEN_COUNTER], extractedMethods=[jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "53b9baac-fc3b-4018-9b75-6d284495f51c",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 75.0,
      "LackOfCohesion" : 0.48803475416618314,
      "MetricsIntensity" : 0.032903782165799346,
      "Density" : 0.9886966946394931
    },
    "euclideanDistance" : 75.01469120416914,
    "generation" : 53,
    "numberOfRefactorings" : 75,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6245596376446905,
      "LackOfCohesion" : 0.48803475416618314,
      "MetricsIntensity" : 0.032903782165799346,
      "Density" : 3.100429645542428
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[hudson.model.AsyncAperiodicWork.thread, hudson.model.AsyncAperiodicWork.name, hudson.model.AsyncAperiodicWork.lastRotateMillis], extractedMethods=[hudson.model.AsyncAperiodicWork.execute(TaskListener), hudson.model.AsyncAperiodicWork.getLogFile(), hudson.model.AsyncAperiodicWork.createListener(), hudson.model.AsyncAperiodicWork.getErrorLoggingLevel(), hudson.model.AsyncAperiodicWork.doAperiodicRun()]"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "a44fad96-6ba8-4735-9e2f-d1c5881ba7ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9938442597722376,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.48714977455358427,
      "MetricsIntensity" : 0.032801001345046384,
      "Density" : 0.9898955300565165
    },
    "euclideanDistance" : 76.01451184071134,
    "generation" : 43,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6258811681772407,
      "LackOfCohesion" : 0.48714977455358427,
      "MetricsIntensity" : 0.032801001345046384,
      "Density" : 3.10252281266774
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "3832f9c9-ab25-4bb0-b610-1838495eac61",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.4888156424840157,
      "MetricsIntensity" : 0.03287886200888991,
      "Density" : 0.9892104812467888
    },
    "euclideanDistance" : 77.01432122567087,
    "generation" : 48,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6245596376446905,
      "LackOfCohesion" : 0.4888156424840157,
      "MetricsIntensity" : 0.03287886200888991,
      "Density" : 3.1037076840408377
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.acegisecurity.AuthenticationException.extraInformation], extractedMethods=[org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException), org.acegisecurity.AuthenticationException.getExtraInformation(), org.acegisecurity.AuthenticationException.setAuthentication(Authentication), org.acegisecurity.AuthenticationException.toSpring(), org.acegisecurity.AuthenticationException.clearExtraInformation()]"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "6edf5e2c-1b5c-4798-a122-3e6d6984f53d",
    "objectives" : {
      "NumberOfConcerns" : 0.9941520467836257,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.48777158627895856,
      "MetricsIntensity" : 0.032800347537124665,
      "Density" : 0.9895530056516527
    },
    "euclideanDistance" : 77.01432691666076,
    "generation" : 47,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6255661801711119,
      "LackOfCohesion" : 0.48777158627895856,
      "MetricsIntensity" : 0.03280034753712467,
      "Density" : 3.101449275362318
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[hudson.model.View.People.getApi(), hudson.model.View.People.toList(Map<User,UserInfo>)]"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "d24c2241-bd5d-4f7e-88fb-5aabccb2619a",
    "objectives" : {
      "NumberOfConcerns" : 0.9932286857494613,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.4879228191322935,
      "MetricsIntensity" : 0.0328196361786701,
      "Density" : 0.9890392190443569
    },
    "euclideanDistance" : 78.01412594911868,
    "generation" : 46,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6248741188318228,
      "LackOfCohesion" : 0.4879228191322935,
      "MetricsIntensity" : 0.032819636178670106,
      "Density" : 3.1015037593984958
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobCaseInsensitive(String)', targetType='hudson.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='hudson.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(String, String, String, String)', targetType='hudson.util.FormValidation'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "6803a2b0-3b23-4c8b-8447-6fc32fb040c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9935364727608494,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.4873962159127083,
      "MetricsIntensity" : 0.03288496724362151,
      "Density" : 0.9893817434492208
    },
    "euclideanDistance" : 79.01395210625357,
    "generation" : 51,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6253776435045317,
      "LackOfCohesion" : 0.4873962159127083,
      "MetricsIntensity" : 0.03288496724362151,
      "Density" : 3.1025778732545644
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "92a3b9da-6044-4d88-8e33-203979347773",
    "objectives" : {
      "NumberOfConcerns" : 0.9932286857494613,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.4873692035619856,
      "MetricsIntensity" : 0.0328774009026524,
      "Density" : 0.9897242678540846
    },
    "euclideanDistance" : 79.01395235661006,
    "generation" : 45,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6248741188318228,
      "LackOfCohesion" : 0.4873692035619856,
      "MetricsIntensity" : 0.0328774009026524,
      "Density" : 3.1036519871106347
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.getLegacyKey()', targetType='jenkins.model.Jenkins'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "cc8d6b1d-dc25-40a0-89f4-efb052acfd12",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.48816926013510714,
      "MetricsIntensity" : 0.03290564499342139,
      "Density" : 0.9885254324370611
    },
    "euclideanDistance" : 81.01359433113518,
    "generation" : 10,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6243705941591138,
      "LackOfCohesion" : 0.48816926013510714,
      "MetricsIntensity" : 0.03290564499342139,
      "Density" : 3.101558301988179
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "27b74531-fc14-45e5-8aaf-6d024419b620",
    "objectives" : {
      "NumberOfConcerns" : 0.9929208987380732,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.488169260135107,
      "MetricsIntensity" : 0.032905644993421405,
      "Density" : 0.9885254324370611
    },
    "euclideanDistance" : 81.01359433113518,
    "generation" : 53,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6243705941591133,
      "LackOfCohesion" : 0.488169260135107,
      "MetricsIntensity" : 0.0329056449934214,
      "Density" : 3.1015583019881787
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='jenkins.model.Jenkins.EnforceSlaveAgentPortAdministrativeMonitor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.validate(String, Item)', targetType='hudson.slaves.AbstractCloudSlave'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='hudson.slaves.AbstractCloudSlave'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  }, {
    "solutionId" : "522cdad2-04da-4084-a268-abe6b7ad6ac9",
    "objectives" : {
      "NumberOfConcerns" : 0.9926131117266851,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.48814224784522536,
      "MetricsIntensity" : 0.03289648767936921,
      "Density" : 0.988867956841925
    },
    "euclideanDistance" : 81.01359457312503,
    "generation" : 18,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6238670694864048,
      "LackOfCohesion" : 0.48814224784522536,
      "MetricsIntensity" : 0.03289648767936921,
      "Density" : 3.102632993014508
    },
    "sequences" : [ {
      "refactoredTypeName" : "hudson.util.HistoricalSecrets",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.tryDecrypt(Cipher, byte[])', targetType='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.util.HistoricalSecrets.MAGIC', targetTypeName='hudson.model.BuildAuthorizationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.util.HistoricalSecrets.decrypt(String, CryptoConfidentialKey)', targetType='hudson.util.jna.WINBASE.FILETIME'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.ParameterValue",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.equals(Object)', targetType='hudson.model.UpdateCenter.CompleteBatchJob.Success'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getFormattedDescription()', targetType='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.ParameterValue.LOGGER', targetTypeName='CLIEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.hashCode()', targetType='hudson.util.AdaptedIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.isSensitive()', targetType='hudson.model.UpdateCenter.NoOpJob'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createVariableResolver(AbstractBuild<?,?>)', targetType='hudson.FilePath.SecureFileCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getAssignedLabel(SubTask)', targetType='hudson.model.labels.LabelExpression.And'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getShortDescription()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getValue()', targetType='hudson.util.ProcessTree.DoVetoersExist'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvironment(Run<?,?>, EnvVars)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.createBuildWrapper(AbstractBuild<?,?>)', targetType='jenkins.util.AtmostOneTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.setDescription(String)', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.getDescription()', targetType='jenkins.mvn.SettingsProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, Map<String,String>)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.ParameterValue.buildEnvVars(AbstractBuild<?,?>, EnvVars)', targetType='hudson.TcpSlaveAgentListener.ConnectionFromCurrentPeer'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Hudson",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getInstance()', targetType='hudson.model.DirectoryBrowserSupport.IsAbsolute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJobListeners()', targetType='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Hudson.itemListeners', targetTypeName='hudson.model.queue.ScheduleResult.Created'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isWindows()', targetType='hudson.model.Run.Artifact'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.isDarwin()', targetType='FeedItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlave(String)', targetType='hudson.model.AbstractProject.LabelValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.setSlaves(List<Slave>)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getJob(String)', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.getSlaves()', targetType='hudson.util.VariableResolver.Union'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doFieldCheck(StaplerRequest, StaplerResponse)', targetType='hudson.util.CompressedFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Hudson.doQuietDown(StaplerResponse)', targetType='hudson.util.CompressedFile'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.View.People",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.toList(Map<User,UserInfo>)', targetType='hudson.model.queue.MappingWorksheet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.View.People.getApi()', targetType='hudson.triggers.SlowTriggerAdminMonitor.Value'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.labels.LabelExpression",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.autoComplete(String)', targetType='jenkins.model.Jenkins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.getExpression()', targetType='hudson.model.Label'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.labels.LabelExpression.paren(LabelOperatorPrecedence, Label)', targetType='hudson.model.Label'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.AsyncAperiodicWork",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getLogFile()', targetType='jenkins.util.xstream.SafeURLConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.createListener()', targetType='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.lastRotateMillis', targetTypeName='hudson.util.FormFieldValidator.WorkspaceFilePath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.execute(TaskListener)', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.getErrorLoggingLevel()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.AsyncAperiodicWork.doAperiodicRun()', targetType='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.AsyncAperiodicWork.thread', targetTypeName='jenkins.slaves.restarter.JnlpSlaveRestarterInstaller.Install'"
      } ]
    }, {
      "refactoredTypeName" : "org.acegisecurity.AuthenticationException",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.setAuthentication(Authentication)', targetType='hudson.util.ExceptionCatchingThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.fromSpring(org.springframework.security.core.AuthenticationException)', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.toSpring()', targetType='org.acegisecurity.AuthenticationServiceException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.getExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.acegisecurity.AuthenticationException.clearExtraInformation()', targetType='hudson.model.HealthReport.ConverterImpl'"
      } ]
    }, {
      "refactoredTypeName" : "jenkins.security.apitoken.ApiTokenStats.SingleTokenStats",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getTokenUuid()', targetType='jenkins.model.lazy.BuildReference.DefaultHolderFactory.SoftHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getLastUseDate()', targetType='hudson.util.DecodingStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='jenkins.security.apitoken.ApiTokenStats.SingleTokenStats.getNumDaysUse()', targetType='hudson.util.DecodingStream'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.cli.CLI.ClientSideImpl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.exit()', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.onExit(int)', targetType='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.cli.CLI.ClientSideImpl.exit', targetTypeName='org.acegisecurity.AuthenticationSpringImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.cli.CLI.ClientSideImpl.finished()', targetType='hudson.util.ProcessTree.Remote.RemoteProcess'"
      } ]
    }, {
      "refactoredTypeName" : "hudson.model.Node",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDescriptor()', targetType='hudson.model.Descriptor.Self'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeDescription()', targetType='hudson.util.DOSToUnixPathHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getMode()', targetType='hudson.util.ProcessTree.WindowsOSProcess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isHoldOffLaunchUntilSave()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getFileSystemProvisioner()', targetType='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.holdOffLaunchUntilSave', targetTypeName='hudson.model.AbstractItem.Replacer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getWorkspaceFor(TopLevelItem)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifferenceCallable()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.toComputer()', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setNodeName(String)', targetType='hudson.search.UserSearchProperty.DescriptorImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createPath(String)', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getRootPath()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getDisplayName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNodeName()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getChannel()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getClockDifference()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.save()', targetType='hudson.tools.ZipExtractionInstaller.ChmodRecAPlusX'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.setTemporaryOfflineCause(OfflineCause)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.reconfigure(StaplerRequest, JSONObject)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getSearchUrl()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.canTake(Queue.BuildableItem)', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getNumExecutors()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.getACL()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.createComputer()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='hudson.model.Node.isAcceptingTasks()', targetType='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.SKIP_BUILD_CHECK_ON_FLYWEIGHTS', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.temporaryOfflineCause', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='hudson.model.Node.LOGGER', targetTypeName='jenkins.telemetry.impl.StaplerDispatches.StaplerTrace'"
      } ]
    } ]
  } ]
}